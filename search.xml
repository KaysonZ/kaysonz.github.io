<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>毕业设计-阅读笔记1-ADS2193芯片</title>
      <link href="/posts/282af25d.html"/>
      <url>/posts/282af25d.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>ADS219X系列芯片是TI公司的低功耗生物电采集模拟前端。最后的X代表几通道，ADS2193就是3通道的的意思。</p><p>ADS1293具有三个高分辨率通道，最高可达25.6 ksps。每个通道可以独立编程为特定的采样率和带宽，允许用户优化配置的性能和功率。所有输入引脚都包含一个EMI滤波器，可以通过灵活的路由开关路由到任何通道。灵活的路由还允许构建独立的导联，而无需外部重新连接引线。例如右腿驱动和Wilson/Goldberger导联。第四个通道允许外部模拟速度检测，不使用数字速度检测的应用程序。ADS1293集成了一个自诊断报警系统，当系统超出工作条件范围时进行检测。这样的事件会报告给错误标志。错误标志的总体状态在专用的ALARMB引脚上作为信号可用。</p><h1 id="关键电气参数"><a href="#关键电气参数" class="headerlink" title="关键电气参数"></a>关键电气参数</h1><ul><li>采用28-PIN WQFN封装</li><li>模拟电源： -0.3v ~ 6v</li><li>数字电源： -0.3v ~ 6v</li><li>输入引脚电压耐受范围与电流耐受范围： -0.3v ~ VDD+0.3v， 10ma</li><li>推荐工作温度：-20 ~ 85$^\circ C$</li><li>Digital Voltage Supply 不应超过min(3.6v，VDD)</li><li>差分输入端量程$\pm400mv$</li><li>在3.3V供电，$f_{osc}=409.6khz$下，SPI通信最高支持20MHz</li></ul><h1 id="引脚作用"><a href="#引脚作用" class="headerlink" title="引脚作用"></a>引脚作用</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105151335412.png" alt="image-20241105151335412" style="zoom: 80%;" /></p><div class="table-container"><table><thead><tr><th style="text-align:left">PIN</th><th style="text-align:left">TYPE</th><th>FUNCTION</th><th></th></tr></thead><tbody><tr><td style="text-align:left">IN1-IN6</td><td style="text-align:left">模拟输入</td><td>心电电极输入</td><td></td></tr><tr><td style="text-align:left">WCT</td><td style="text-align:left">模拟输出</td><td>Wilson导联中心输出（艾氏三角中心）/模拟起搏信道输出</td><td></td></tr><tr><td style="text-align:left">CMOUT</td><td style="text-align:left">输出</td><td>IN口平均电压输出（可编程）</td><td></td></tr><tr><td style="text-align:left">RLDOUT</td><td style="text-align:left">模拟输出</td><td>右腿驱动放大器输出</td><td></td></tr><tr><td style="text-align:left">RLDINV</td><td style="text-align:left">模拟输入</td><td>右腿驱动反相输入</td><td></td></tr><tr><td style="text-align:left">RLDIN</td><td style="text-align:left">模拟I/O</td><td>右腿驱动放大器正输入/模拟起搏通道输出</td><td></td></tr><tr><td style="text-align:left">RLDREF</td><td style="text-align:left">模拟输出</td><td>内部右腿驱动参考电压</td><td></td></tr><tr><td style="text-align:left">SYNCB</td><td style="text-align:left">数字I/O</td><td>多芯片同步I/O（多芯片级联，菊花链模式）</td><td></td></tr><tr><td style="text-align:left">VSSIO</td><td style="text-align:left">数字电源</td><td>数字部分地</td><td></td></tr><tr><td style="text-align:left">ALARMB</td><td style="text-align:left">数字输出</td><td>警告信号</td><td></td></tr><tr><td style="text-align:left">CSB</td><td style="text-align:left">数字输入</td><td>SPI片选信号</td><td></td></tr><tr><td style="text-align:left">SCLK</td><td style="text-align:left">数字输入</td><td>SPI时钟信号</td><td></td></tr><tr><td style="text-align:left">SDI</td><td style="text-align:left">数字输入</td><td>SPI数据输入信号</td><td></td></tr><tr><td style="text-align:left">SDO</td><td style="text-align:left">数字输出</td><td>SPI数据输出信号</td><td></td></tr><tr><td style="text-align:left">DRDYB</td><td style="text-align:left">数字输出</td><td>数据就绪信号</td><td></td></tr><tr><td style="text-align:left">CLK</td><td style="text-align:left">数字I/O</td><td>内部时钟输出或外部时钟输入，用于多芯片同步</td><td></td></tr><tr><td style="text-align:left">VDDIO</td><td style="text-align:left">数字电源</td><td>数字部分电源</td><td></td></tr><tr><td style="text-align:left">XTAL1</td><td style="text-align:left">数字输入</td><td>外部晶振1</td><td></td></tr><tr><td style="text-align:left">XTAL2</td><td style="text-align:left">数字输入</td><td>外部晶振2</td><td></td></tr><tr><td style="text-align:left">RSTB</td><td style="text-align:left">数字输入</td><td>重置</td><td></td></tr><tr><td style="text-align:left">CVREF</td><td style="text-align:left">模拟I/O</td><td>用于内部参考电压的外部端子，固定串联1uF电容后接地</td><td></td></tr><tr><td style="text-align:left">VSS</td><td style="text-align:left">模拟电源</td><td>电源地</td><td></td></tr><tr><td style="text-align:left">VDD</td><td style="text-align:left">模拟电源</td><td>电源供电</td><td></td></tr><tr><td style="text-align:left">DAP</td><td style="text-align:left">NC</td><td>NC</td></tr></tbody></table></div><h1 id="模拟前端"><a href="#模拟前端" class="headerlink" title="模拟前端"></a>模拟前端</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105124539914.png" alt="image-20241105124539914"></p><h2 id="3通道ADC"><a href="#3通道ADC" class="headerlink" title="3通道ADC"></a>3通道ADC</h2><p>该芯片通过仪用放大器对前几信号进行放大，然后使用sigma-delta modulator配个数字滤波器进行AD转换。仪用放大器增益为3.5倍，最大差分输入为$\pm400mv$，SDM最大输入为$\pm1.4v$</p><p>SDM的工作频率可编程位102.4kHz或204.8kHz，后者提供更大的过采样比，提升数据精度，但功耗更大。时钟速率是通过<code>AFE_RES</code>寄存器的<code>FS_HIGH_CHx</code>位进行配置的。</p><p>引脚IN1-IN6为ADC输入口，可以通过内部的复用开关配置哪两个为一组。3通道可以进行差分电压测量，也可以通过配置接入Positive Reference或Negative Reference。<strong>该芯片支持电池电压检测，但是这个功能将会占用一个通道</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105124839112.png" alt="image-20241105124839112"></p><p>配置的寄存器为：<code>VBAT_MONI_CHx</code>选择是否为电压检测；<code>CALx</code>配置是否连接至片上参考电压；<code>POSx</code>和<code>NEGx</code>选择连接至INx电极。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105125236129.png" alt="image-20241105125236129"></p><p>POS和NEG都占3bit，位于<code>FLEX_CHx_CN</code>寄存器中。</p><ul><li>000：断开</li><li>001-110：分别代表IN1-IN6</li></ul><p>每个通道的仪用放大器可以通过配置<code>AFE_SHDN_CN</code>寄存器的<code>EN_HIRES_CHx</code>位设置为高性能模式或低功耗模式；SDM可以通过配置同寄存器的<code>SHDN_SDM_CHx</code>位设置为高性能或低功耗模式。低功耗模式将带来3倍的能耗下降。</p><h3 id="电池监测"><a href="#电池监测" class="headerlink" title="电池监测"></a>电池监测</h3><p>电池监测仅在VDD为2.4v-4.8v时可以使用，5v供电时不能使用。</p><p>使用电池监测时需要配置<code>FLEX_VBAT_CN</code>寄存器中的<code>VBAT_MONI_CHx=1</code>来启用，同时必须配置<code>AFE_SHDN_CN</code>寄存器的<code>SHDN_INA_CHx=1</code>来关闭仪用放大器。此时SDM的POSx会连接至VDD，NEGx会采样CVREF引脚的电压。电池电压的计算公式为</p><script type="math/tex; mode=display">V_{BAT}=V_{REF}\bigg[1+3.246(\frac{ADC_{out}}{ADC_{max}}-\frac{1}{2})\bigg]</script><p>除了电池监测模式之外，当VDD小于2.7v时，会触发BATLOW报警，这个报警独立于电池监测模式之外。</p><h3 id="测试模式"><a href="#测试模式" class="headerlink" title="测试模式"></a>测试模式</h3><p>在<code>FLEX_CHx_CN</code>寄存器中，MSB处有2bit的测试信号选择位。通过对其进行配置，可以对为ADC注入一个内部产生的直流测试信号。</p><ul><li>00: Test signal disconnected and CH1 inputs determined by POS1 and NEG1 (default)</li><li>01: Connect channel one to positive test signal</li><li>10: Connect channel one to negative test signal </li><li>11: Connect channel one to zero test signal</li></ul><p>当连接至0电位测试信号时，ADC输出值为MAX的一半。当连接至正负测试信号时，ADC输出值为$ADC_{out}=[\pm\frac{3.5V_{TEST}}{2V_{REF}}+\frac{1}{2}]ADC_{MAX}$，其中$V_{EST}=V_{REF}/12$</p><h3 id="可编程数字滤波器"><a href="#可编程数字滤波器" class="headerlink" title="可编程数字滤波器"></a>可编程数字滤波器</h3><p>其数字滤波部分由三个可编程的SINC滤波器构成。Sinc滤波器一个全部除去给定带宽之上的信号分量而只保留低频信号的理想电子滤波器，在频域上就是一个矩形窗。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105182108033.png" alt="image-20241105182108033"></p><p>第一级中，标准的抽取率（Decimation rate）为4，也通过<code>R1_RATE</code>寄存器的<code>R1_RATE_Chx</code>位进行配置来变更为2（0:R=4; 1:R=2）；为2时，对外输出的数据速率也会翻倍，此时可以更好地获取起搏信号，但是带宽并不改变。</p><p>在第二级中，同样地也可以通过配置<code>R2_RATE</code>寄存器设置抽取率为4或2，但是此时更低的抽取率会同时提高输出速率和截止频率的带宽。如果要进行起搏信号检测，推荐将其配置为2.</p><p>此时还没有进行很低带宽的滤波，因此第二级输出的信号是包含有起搏信号的。PACE信号会出从这一级输出。</p><p>在第三级带宽要低的多得多，对应的也可以设置高的抽取率，抽取率会影响输出数据速率和带宽。每个信道都有一个独立的7bit寄存器来设置<code>R3_RATE_CHx</code>。</p><ul><li>00000001: 4</li><li>00000010: 6</li><li>00000100: 8</li><li>00001000: 12</li><li>00010000: 16</li><li>00100000: 32 </li><li>01000000: 64 </li><li>10000000: 128 (default)</li></ul><p>这三级滤波器的配置会影响输出数据速率，ADCMAX的值，滤波带宽。</p><p>除了这些之外，不同的内部时钟也会影响采样的基频。第二级和第三级以及不同时钟配置下的输出数据速率和带宽如下表：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105185019873.png" alt="image-20241105185019873"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105185031651.png" alt="image-20241105185031651"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105185041896.png" alt="image-20241105185041896"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241105185052052.png" alt="image-20241105185052052"></p><h2 id="Wilson中心参考电压"><a href="#Wilson中心参考电压" class="headerlink" title="Wilson中心参考电压"></a>Wilson中心参考电压</h2><p>ADS1293的模拟前端自带Wilson中心参考电压的生成电路。如下图所示。该电路由三个Voltage Buffer分别采集LA、RA、LL的电压，后交由平均值电路产生中心电压<code>WCT_OUT</code>.三个Buffer的信号源由<code>WILSON_EN1</code>，<code>WILSON_EN2</code>，<code>WILSON_EN3</code>三个寄存器控制。如果配置为000（NC状态），则Buffer提高阻输入。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241124185920508.png" alt="image-20241124185920508"></p><p><code>WCT_OUT</code>可以被配置输入到IN6和WCT上。只要Analogue Pace Channel没有配置复用到WCT，<code>WCT_OUT</code>就会被输出到WCT引脚上。如果存在复用，也可以通过配置<code>WILSON_CN</code>寄存器的<code>WILSONINT</code>bit使其输出到IN6。</p><p>同时，该电路还包含一个对其两两取均值的电路，这可以用于测量aVR，aVL，aVF导联。若BUF1采集LA，BUF2采集RA，BUF3采集LL，通过上图可以看到，$G1=(LA+LL)/2, G2=(RA+LL)/2, G3=(RA+LA)/2$。则$aVR=RA-G1, aVL=LA-G2, aVF=LL-G3$。G参考电压可以被路由到IN4,5,6。</p><p>如果想要同时采集单极加压导联和标准导联，则需要多个ads1293芯片协同。</p><h2 id="右腿驱动电路"><a href="#右腿驱动电路" class="headerlink" title="右腿驱动电路"></a>右腿驱动电路</h2><h2 id="心电数据读取"><a href="#心电数据读取" class="headerlink" title="心电数据读取"></a>心电数据读取</h2><h1 id="交互指令"><a href="#交互指令" class="headerlink" title="交互指令"></a>交互指令</h1><p> 芯片通过SPI读写控制寄存器进行交互：数据在CLK下降沿更改，上升沿读取。每条指令由16bit构成，包含8bit指令和8bit数据，如果在16个时钟周期前关闭选片。<strong>本芯片SPI不支持双工，在读取时MOSI（SDI）引脚必须保持低电平</strong></p><ul><li>在8bit指令中，MSB为读写标志位，0为Write Data，1为Read Data</li><li>若为写模式，则指令发送完后继续发送8bit数据；若为读模式，则指令发送完后待芯片返回8bit数据。</li><li>在读模式时，可以进行连续读取，首先通过信令发送8bit基地址，继续保持SCLK和CS信号，即可进行连续读取，读取方向为基地址自增。发送完指令后，CS信号需要保持到$8*(1+n)$个时钟周期，其中n为读取的byte数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕业设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计-阅读笔记1-心电基础</title>
      <link href="/posts/84608994.html"/>
      <url>/posts/84608994.html</url>
      
        <content type="html"><![CDATA[<div class="note warning flat"><p>本篇笔记是以<strong>通信工程</strong>专业的视角，去学习临床上的心电的成因和现有的临床诊疗手段，以为后续的心电信号采集和信号处理打下基础。虽然尽可能保留了所查阅资料的本意，但仍<strong>可能会有较多错误，不建议任何医学或相关专业同学参考</strong></p></div><h1 id="心电和常用导联"><a href="#心电和常用导联" class="headerlink" title="心电和常用导联"></a>心电和常用导联</h1><div class="note info flat"><p>该部分参考资料：</p><p>[1] <a href="https://www.bilibili.com/video/BV1hs4y1m7Vn?spm_id_from=player_end_recommend&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">零基础学懂：心电图_哔哩哔哩_bilibili</a></p><p>[2] <a href="https://www.bilibili.com/video/BV1oT411x7qV/?spm_id_from=333.788.recommend_more_video.0">零基础学懂：十二导联心电图（上）_哔哩哔哩_bilibili</a></p><p>[3] <a href="https://www.bilibili.com/video/BV1wz4y1z7eb?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">零基础学懂：十二导联心电图（下）_哔哩哔哩_bilibili</a></p><p>[4] 重庆医科大学 诊断学心电图 课程PPT</p></div><h2 id="引入-心电如何产生"><a href="#引入-心电如何产生" class="headerlink" title="引入-心电如何产生"></a>引入-心电如何产生</h2><p>心电信号由心脏内特殊心肌细胞产生，这种特殊心肌细胞可以产生并传导生物电。心电细胞的充放电流程为：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241013230344780.png" alt="image-20241013230344780" style="zoom:67%;" /></p><ol><li>生物电由窦房结中心脏起搏细胞发出。此时生物电充斥左右心房。这一步产生的心电波形被称为P波。</li><li>生物电到达房室结，房室结会延缓窦房结兴奋。此时生物电产生小的缓冲。</li><li>生物电沿着希氏束（又称房室束）传递到左右希氏束分支。<strong>此时左希氏束接受主要的生物电，并将生物电传导给右希氏束。</strong></li><li>生物电流向浦肯野纤维，并分为左右两个方向。因左心室心肌厚度大于右心室，因此左心室为主导。</li><li>生物电到浦肯野纤维末端，充盈整个心脏。3-5步产生的波形被称为QRS波群。</li><li>细胞保持去极化状态。持续一段时间。</li><li>细胞自心脏外侧开始，逐渐由外向内复极化。复极化产生的心电波形被称为T波。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241013230914256.png" alt="image-20241013230914256" style="zoom:50%;" /></p><h2 id="心电图的意义"><a href="#心电图的意义" class="headerlink" title="心电图的意义"></a>心电图的意义</h2><p>在临床医学中，心电图的主要作用有：</p><ul><li>识别和确诊各种心律失常</li><li>心肌梗死的主要确诊手段</li><li>辅助诊疗：⑴　房室肥大； ⑵　心肌缺血；⑶　反映心肌损害，心肌炎；⑷　心包炎；⑸　辅助诊断电解质紊乱(高血钾、低血钾）；⑹　了解药物对心肌的影响</li></ul><p>为了从不同维度记录这个信号传递过程从而观测心脏的各维度信息，诞生了不同的连接测量方式。常见的有十二种导联方式（也称Wilson 12导联系统），这也是医院体检项目“十二导联心电图”的名称由来。P-QRS-T波在不同导联下记录出的波形也有差异。</p><p>十二导联由双极导联3种、单极加压肢体导联3种、胸导联六种构成。</p><h2 id="标准导联（双极导联）"><a href="#标准导联（双极导联）" class="headerlink" title="标准导联（双极导联）"></a>标准导联（双极导联）</h2><p>标准导联有$I,II,III$三种。其中以$II$型导联观测的P-QRS-T波最为经典，下面首先介绍$II$型导联的波形由来。</p><h3 id="II型导联"><a href="#II型导联" class="headerlink" title="II型导联"></a>II型导联</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241015135313628.png" alt="image-20241015135313628" style="zoom: 50%;" /></p><p>II型导联在人的右上肢和左下肢上接入电极，认为右上肢为零势点。<strong>此时其测量电轴为从右上肢到左下肢</strong>（当人面对我们时，电轴向量就是从左上到右下），而心电图的幅值是心电向量在电轴上的投影。其关系如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/befd16d782e42c7a0b6a2870ec528350.jpg" alt="befd16d782e42c7a0b6a2870ec528350"></p><p>下图是II导联观测下的标准心电图像</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/PQRST.png" alt="PQRST" style="zoom: 20%;" /></p><p>回顾下图的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241013230914256.png" alt="image-20241013230914256" style="zoom: 50%;" /></p><ul><li><p>在1步骤中，心电向量与观测电轴同向，因此产生了P波</p></li><li><p>房室结的延缓导致了PR segment这一段延缓</p></li><li><p>在延缓后，生物电被左右希氏束吸收，（左希氏束吸收为主，传递给右希氏束），这一过程本来与测量电轴同向，但由于它们除了传自身传递外，还会传递给周围的心肌细胞，这一些传递与测量电轴反向，才最终导致了小小的Q波</p></li><li><p>随后生物电传导至左右希氏束末端，此时对应下图的两个箭头。因为左心室心肌更为肥厚，因此此时左心室生物电占主导。故虽然右心肌侧心电向量不完全与测量电轴同向，其也产生最高振幅的R波</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014135253372.png" alt="image-20241014135253372" style="zoom:50%;" /></p></li><li><p>随后心电流向浦肯野纤维末端，此时左右心室的心电向量都与测量电轴反向，因此有反向S波</p></li><li><p>在经历ST段之后，心脏逐渐开始复极化，复极化由心脏外侧开始，逐渐向内进行。而由于复极化与极化向量相反，因此呈现在测量电轴上又是一个同向向量。故最后复极化产生正振幅T波</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241015131515854.png" alt="image-20241015131515854" style="zoom: 25%;" /></p><p>至此，便得到了II导联观测下的心电图像。可见，$II$导联的测量电轴与心电的主要活动电轴几乎重合，因此其幅值属于较为明显的那一类。</p><p>对应地，P-QRS-T波分别对应：</p><ul><li>P波：最早出现幅度较低、园钝、似半圆的波形，<strong>反映心房除极</strong>。</li><li>QRS波群：Ｐ波后幅度较高的综合波群，由于其为综合波群，因此有其特定的命名原则，<strong>反映心室除极</strong>。<em>（无R波的QRS波群称之为QS波。l波幅&lt;0.5mV者用q、r、s表示，否则用Q、R、S表示，QS波不分大小写)</em></li><li>T波：QRS综合波群后的基底部较宽波，反映心室晚期复极</li></ul><h3 id="I型导联"><a href="#I型导联" class="headerlink" title="I型导联"></a>I型导联</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241015135256377.png" alt="image-20241015135256377" style="zoom:50%;" /></p><p>I型导联以右上肢电极为零势点，左上肢电极记录心脏电活动。可见，当人面对我们时，I导联的测量电轴方向为水平从左到右。</p><p>$I$导联下波形的分析与$II$导联一样，下图是$II$导联与$I$导联下记录波形的对比图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014194938846.png" alt="image-20241014194938846" style="zoom:50%;" /></p><p>可见，在$I$导联下，P-QRS-T波依旧可见，方向也与$II$导联几乎相同，但幅值会小很多。</p><h3 id="III型导联"><a href="#III型导联" class="headerlink" title="III型导联"></a>III型导联</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241015135457425.png" alt="image-20241015135457425" style="zoom:67%;" /></p><p>$III$导联以左上肢为零势点，左下肢为观测点，当人面对我们时，其测量电轴向量右上至左下。其与$II$导联电轴也有非常大相似之处，因此波形也类似，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014200751089.png" alt="image-20241014200751089"></p><h3 id="艾氏三角（Einthoven-triangle）"><a href="#艾氏三角（Einthoven-triangle）" class="headerlink" title="艾氏三角（Einthoven triangle）"></a>艾氏三角（Einthoven triangle）</h3><p>标记左上肢、右上肢、右下肢为三个点，连接这三点的分别就是上述介绍的三种导联。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014201049716.png" alt="image-20241014201049716" style="zoom:50%;" /></p><p>这就构成了艾氏三角。如果取两点之间的中点电势作为观测零势点，而余下一点作为观测点，那就可以在这个三角形上再加上三条垂直于某一边的向量。这就是单极加压肢体导联。</p><h3 id="中心电端"><a href="#中心电端" class="headerlink" title="中心电端"></a>中心电端</h3><p>Wilson发现将上述三个导联的电极通过导线连在一起时，其综合电位几乎为0，因此称其为中心电端。就像是把上面的三角取到了中心。其代表心脏中心的电势点。</p><p>这个中心电端是后续介绍的胸导联的零势点。</p><h2 id="单极加压肢体导联"><a href="#单极加压肢体导联" class="headerlink" title="单极加压肢体导联"></a>单极加压肢体导联</h2><p>如果以这个中心电势为零势点，去分别测量右上肢，左上肢，左下肢的电信号，那么就可以得到VR、VL、VF三组由艾氏三角中心指向三个顶点的测量向量。但是这样的向量测量出来的信号太低了。</p><p>故而取两侧肢体的中间电位作为参考零势点，此时测量出来的方向不变，而幅值可以增大一倍。这就是单极加压肢体导联中“单极加压”的含义。</p><h3 id="aVR，aVL，aVF导联"><a href="#aVR，aVL，aVF导联" class="headerlink" title="aVR，aVL，aVF导联"></a>aVR，aVL，aVF导联</h3><p>单极加压肢体导联有$aVR,aVL,aVF$三种。分别对应下图从左到右。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014203053564.png" alt="image-20241014203053564" style="zoom:67%;" /></p><ul><li>aVR导联：在左上肢与左下肢间串联两个5000欧电阻进行分压，取其中心电势作为零势点，观察右上肢电信号。观测向量为从右下到左上。</li><li>aVL导联：在右上肢与左下肢间串联两个5000欧电阻进行分压，取其中心电势作为零势点，观察左上肢电信号。观测向量为从左下到右上。</li><li>aVF导联：在双侧上肢间串联两个5000欧电阻进行分压，取其中心电势作为零势点，观察左下肢电信号。观测向量为从上到下。</li></ul><h3 id="心电向量轴"><a href="#心电向量轴" class="headerlink" title="心电向量轴"></a>心电向量轴</h3><p>将$I,II,III,aVR,aVL,aVF$的测量向量放在一个原点，就构成了心电轴，如下图所示。将QRS波群发生时，个测量轴测出的向量相加，便可得出心电轴。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/b04124.0012.0.png" alt="心电轴" style="zoom: 33%;" /></p><p>体检报告单中的”QRS电轴”一栏数据，就来自于此。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014213053631.png" alt="image-20241014213053631" style="zoom:50%;" /></p><p><strong>电轴的临床意义有：</strong>（正常心电轴在$-30^\circ$到$+90^\circ$之间）</p><ul><li>电轴左偏可探查：横位心(肥胖体型，妊娠晚期，高度腹水)、左室肥厚、左前分支传导阻滞</li><li>电轴右偏可探查：正常幼婴、垂位心、右室肥厚、左后分支传导阻滞　</li></ul><p>除了将所有向量加起来看综合电轴之外，也可以直接通过心电图对向量轴进行判断。举个例子：假设有$I,II,aVF$三组导联数据，其R波分别呈正波，负波，负波</p><ul><li>假如I导联的R波呈正波，可以看出心电向量此时位于$-90^\circ$到$90^\circ$之间；</li><li>II导联R波呈负波，那么可以推断此时心电向量位于$-30^\circ$到$+120^\circ$之间；</li><li>aVF导联R波呈负波，那么可以推断此时心电向量位于$0^\circ$到$+180^\circ$之间；</li><li>综合研判取交集，心电向量位于$-30^\circ$与$-90^\circ$之间，与正常的$-30^\circ$到$+90^\circ$的范围不符，因此患者存在左心肌肥厚</li></ul><h2 id="胸导联"><a href="#胸导联" class="headerlink" title="胸导联"></a>胸导联</h2><p>在上面的肢体导联中，都是从冠状面对心脏进行观察的。然而心脏作为一个3D的玩意儿，冠状面的观察肯定是不够的。因此诞生了胸导联，胸导联有$v1,v2,v3,v4,v5,v6$ 6种。其参考零势点为上面提到的中心电端，相当于零势点在心脏中心，6片电极片帖在胸部，从俯视角度观测心脏电活动。</p><h3 id="心室水平面电活动顺序"><a href="#心室水平面电活动顺序" class="headerlink" title="心室水平面电活动顺序"></a>心室水平面电活动顺序</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241015135843655.png" alt="image-20241015135843655"></p><ol><li>室间隔去极化：方向从左至右，由于室间隔厚度不大，因此心电向量较小</li><li>心室去极化：去极化方向由心内膜至心外膜，由于左心室厚度大于右心室，因此总心电向量以左心室占主导，从内向外。</li><li>从外壁向内的复极化</li></ol><p>整体的心电向量环如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241022150813989.png" style="zoom:33%;" /></p><h3 id="胸导联电极位置"><a href="#胸导联电极位置" class="headerlink" title="胸导联电极位置"></a>胸导联电极位置</h3><ul><li>V1导联：胸骨右缘第四肋间</li><li>V2导联：胸骨左缘第四肋间</li><li>V3导联：V2与V4导联之间位置</li><li>V4导联：胸骨左缘第五肋间锁骨中线水平</li><li>V5导联：胸骨左缘第五肋间腋前线水平</li><li>V6导联：与V5导联平线的腋中线水平</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241013234441605.png" alt="image-20241013234441605"></p><p>它们分别起到的作用是：</p><ul><li>v1&amp;v2：观察右心室</li><li>v3&amp;v4：观测室间隔、右室和左室的移行部</li><li>v5&amp;v6：观测左心室</li></ul><p>结合水平面的电活动顺序：</p><ol><li>在室间隔去极化时，心电向量朝向$v1,v2$，而与$v5,v6$反向，故而此时$v1,v2$呈现小幅度正向波而$v5,v6$呈现小幅度负向波。此时$v2,v3$表现出略有差异幅度非常小的等电位波形。</li><li>在心室去极化时，心电向量以朝向$v5,v6$方向为主，故此时$v5,v6$呈现大幅度正向波形而$v1,v2$呈现大幅度负向波形。此时$v2,v3$表现出略有差异但幅度较大的等电位波形。</li><li>在复极时，除$v1$导联外所有胸导联均呈现正向T波。</li></ol><h1 id="心电图的临床诊疗"><a href="#心电图的临床诊疗" class="headerlink" title="心电图的临床诊疗"></a>心电图的临床诊疗</h1><div class="note info flat"><p>本节参考资料：</p><p>[1]重庆医科大学 诊断学心电图 课程资料</p><p>[2] <a href="https://heart.dxy.cn/article/513090">漫话心律失常：常见室上性心动过速及心电图表现 - 丁香园</a></p><p>[3] 其他网络资源</p><p>传统临床诊疗依据多见于时域，无频域分解。</p></div><p>通过心电图获取的波形，能用于临床诊疗的信息来自于：</p><ul><li>各波段时程</li><li>各波段振幅</li><li>平均心电轴</li></ul><h2 id="心电的正常数据"><a href="#心电的正常数据" class="headerlink" title="心电的正常数据"></a>心电的正常数据</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/PQRST.png" alt="PQRST" style="zoom: 20%;" /></p><ul><li>P-R范围：范围0.12-0.2秒，幼儿会轻度缩短，老人和心动过缓可略微延长，但不超过0.22秒</li><li>QRS波群（肢体导联）：范围0.06~0.10s，最宽不超过0.11s。同时，$I,II,III$导联主波向上，且$I$导联R波振幅小于1.5mV；$aVL,aVF$呈现qR、Rs或R型波形，且$aVL$导联R波振幅小于1.2mV，$aVF$ R波振幅小于2.0mV；$aVR$呈现QS、rS或Qr型波形，且主波向下。</li><li>QRS波群（胸导联）：正常时Ｒ波由$v1$向$v6$逐渐升高, Ｓ波逐渐变浅，$v1$、$v2$呈rS波型（可偶呈QS波形，但不可出现q/Q波），R/S＜１，$v5$、$v6$呈qRs波型，   R/S＞１,   V3或V4为过度区，R/S≈1。 $v1$的R波振幅不超过1.0mV，$v5、v6$R波振幅不超过2.5mV。</li><li>Q波与R波：Q波的振幅应当小于同导联R波的1/4，同时宽度小于0.04s</li><li>S-T段：QRS波群终点至T波起点时间范围为0.04-0.12s</li><li>Ｔ波的方向大多与  QRS主波方向一致。若V1导联Ｔ波向上，则V2~V6导联就不应再向下。</li><li>Q-T段：Q-T长短跟心率密切相关。正常心率时，Q-T正常范围在0.32～0.44S之间（若超过说明心肌复极异常，可辅助确诊心肌缺血、损害，低血钾）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241022161427482.png" alt="image-20241022161427482"></p><ul><li>U波：U波可见于胸导联，在$v3$导联较为明显（机制不详）。正常与T波方向大体一致，如上图。若U波增大（甚至与T波合成一整个波形），常见于血钾过低。</li></ul><h2 id="心电轴的临床意义"><a href="#心电轴的临床意义" class="headerlink" title="心电轴的临床意义"></a>心电轴的临床意义</h2><p>正常心电轴轴心位于$+30^\circ$到$-90^\circ$</p><p><strong>电轴左偏：</strong></p><ul><li>横位心</li><li>左室肥厚</li><li>左前分支传导阻滞</li></ul><p><strong>电轴右偏：</strong> </p><ul><li>垂位心</li><li>右室肥厚</li><li>左后分支传导阻滞</li></ul><p>（幼婴心电图出现电轴右偏为正常现象）</p><h2 id="心房、心室肥大"><a href="#心房、心室肥大" class="headerlink" title="心房、心室肥大"></a>心房、心室肥大</h2><p>心房肥大通常表现为心房扩大，较少表现为心房肌肥厚。其在心电图上的表现为P波改变。</p><h3 id="左右心房扩大"><a href="#左右心房扩大" class="headerlink" title="左右心房扩大"></a>左右心房扩大</h3><p>正常的P波由先由左心房除极，再由右心房除极，二者叠加形成光滑圆顿的波形。</p><p>当<strong>右心房扩大</strong>时，右侧波形提前，导致双侧波形峰值靠近，融合出一个较高的P波，其波峰电压$\geq0.25mv$（称P波高尖或肺型P波），但时间不延长。其确诊条件为：</p><ul><li>肢体导联p波振幅≥0.25mV</li><li>V1导联P波直立，振幅 ≥ 0.15mv</li><li>若p波呈双向,则其振幅的算术和≥0.2mV</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241022162915336.png" alt="image-20241022162915336" style="zoom:150%;" /></p><p>当<strong>左心房扩大</strong>时，左侧P波提前，导致双侧P波峰值间隔扩大，导致P波呈现切迹（也称二尖瓣P波），且幅度相较于正常高一点。其确诊条件为：</p><ul><li>$P_{time}\geq0.12s$</li><li>Ｐ波增宽呈双峰，峰 距$\geq0.04s$</li><li>$|Ptfv1|≥0.04mm.s$（Ptfv1即V1导联P波终末电势（P-wave terminal force V1）,等于V1的负向P波时间乘以负向P波振幅。）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241022162804609.png" alt="image-20241022162804609"></p><h3 id="左右心室肥大"><a href="#左右心室肥大" class="headerlink" title="左右心室肥大"></a>左右心室肥大</h3><p><strong>左心室肥大</strong>时，会使得本就占优势的左心电向量更为突出，体现在心电图上就是$I,aVL,v5,v6$导联的R波振幅增大，$v1,v2$出现较深s波。临床确诊条件为：</p><ul><li>V5或V6的R波&gt;2.5mV；V5R波+V1s波&gt;4.0mV（男）或&gt;3.5mV（女）</li><li>I导联R波&gt;1.5mV；aVL R波&gt;1.2mV；avF R波&gt;2.0mV；I R波+III S波&gt;2.5mV</li></ul><p><strong>右心室肥大</strong>时，会平衡左心室的占主导的心电向量，只有当右心室肥厚达到一定程度时，才会导致QRS环右侧向量猛增。导致$v1,v2$导联的R波增大，同时$v4,v5$减少。临床确诊标准为：</p><ul><li>$v1$或$v3$导联的$R/S\geq1$</li><li>RV1+SV5&gt;1.05mV</li><li>电轴右偏</li><li>aVR的$R/S$或$R/Q\geq1$</li><li>V1呈现qr或qR波形（由于肥厚导致心脏转位）</li><li>ST-T波呈现T波双向或倒置，ST段降低。</li></ul><p><strong>双心室肥厚</strong>没有诊断标准，在心电图上类似于正常心电图，或倾向于单侧心室肥厚的心电图</p><h2 id="心肌（心梗）疾病"><a href="#心肌（心梗）疾病" class="headerlink" title="心肌（心梗）疾病"></a>心肌（心梗）疾病</h2><p>正常复极化操作时，心外膜复极化在前，心内膜在后。但当心肌缺血时会影响心复极，使得T波与ST段发生改变。因此心肌缺血问题主要依靠观察ST-T波段。</p><h3 id="心内-amp-外膜下肌缺血"><a href="#心内-amp-外膜下肌缺血" class="headerlink" title="心内&amp;外膜下肌缺血"></a>心内&amp;外膜下肌缺血</h3><p>这会导致部分内心肌复极化延迟，导致本应与外膜复极化抗衡的向量减小或消失。因此以心外膜为主的T波进一步增大，出现高大的T波。同理，当心外膜下肌缺血时，将出现倒置的T波。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241023103801111.png" alt="image-20241023103801111"></p><h3 id="心肌损伤"><a href="#心肌损伤" class="headerlink" title="心肌损伤"></a>心肌损伤</h3><p>心肌损伤时，ST段心电向量会从正常的心肌指向损伤心肌。</p><p>因此，心内膜下心肌损伤时，心电向量指向心内膜，使观测心外膜的导联的ST段压低；心外膜下心肌损伤时，ST向量指向心外膜，引起外膜面导联ST段抬高。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241023113549037.png" alt="image-20241023113549037" style="zoom: 25%;" /></p><p>心绞痛也是由心绞痛是由于冠状动脉供血不足，导致心肌短暂性缺氧所致。此时心肌血氧供需矛盾，产生损伤电流。</p><ul><li>对于典型心绞痛，其源于耗氧量增加，心肌血氧供需矛盾产生损伤电流，此时ST段压低。水平压低或倾斜下移$0.1mv$。</li><li>变异型心绞痛主要为冠脉痉挛狭窄，会导致心肌急性严重缺血，产生损伤电流致使ST段抬高。</li><li>如果ST段持续压低（水平或倾0.05mv），则代表持续供血不足，常见于慢性冠状动脉供血不足，该疾病还有T波低平、负正双向和倒置等特征。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241023114903258.png" alt="image-20241023114903258" style="zoom:33%;" /></p><h3 id="心肌坏死"><a href="#心肌坏死" class="headerlink" title="心肌坏死"></a>心肌坏死</h3><p>心肌进一步缺血会导致心肌坏死，坏死的心肌会完全丧失电活动。由于周围心肌依旧照常进行除极，因此心综合心电向量会背离心肌坏死区域，在相应导联上出现大Q波（坏死性/病理性Q波）。</p><h3 id="心肌梗死"><a href="#心肌梗死" class="headerlink" title="心肌梗死"></a>心肌梗死</h3><p>当同时出现心肌缺血，损伤，和坏死的图像时，可怀疑心肌梗死。只有典型的坏死性Q波是诊断心肌梗死较为可靠的依据。</p><p>目前一般依据ECG结果，将急性心梗分为：ST段抬高心梗（STEMI）与非ST段抬高心梗（NSTEMI），前者暗示血栓完全闭塞了冠脉管腔，后者可能血栓造成冠脉管腔不完全闭塞；</p><h2 id="心律问题"><a href="#心律问题" class="headerlink" title="心律问题"></a>心律问题</h2><p>心电图可以检测心脏的每一次跳动，因此可以通过跳动时间发现心律不齐、早搏、房颤、心律失常等等问题。</p><h3 id="窦性心律不齐"><a href="#窦性心律不齐" class="headerlink" title="窦性心律不齐"></a>窦性心律不齐</h3><p>心跳的指令在正常情况下由窦房结发出，因此称其为窦性心律。窦性心律不齐是指窦房结发出的激动显著不规律，使心房和心室的节律也不规则的现象。在ECG上表现为两P波见周期长度不等。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241023121334758.png" alt="image-20241023121334758"></p><h3 id="心动过速"><a href="#心动过速" class="headerlink" title="心动过速"></a>心动过速</h3><p>心动过速指的是静息心率达到每分钟100次。在心电图上有好几类被统一识别为“宽QRS心动过速”，包含各种室上性心动过速，顺向性房室折返性心动过速，各种不同室上性心动过速经旁道前传，逆向性房室折返性心动过速，房室折返性心动过速，室性心动过速。</p><p>宽QRS心动过速表现为：QRS波形态畸形，且时间延长（&gt;0.12s），常有继发性ST-T波改变。其是用于分辨上室性心动过速和室速的依据。</p><ul><li>窦性心动过速：由于窦房结下达跳动命令过快导致。可能由于剧烈运动、情绪激动、贫血、休克等等引起。ECG上表现为单纯心律加快。</li><li>房性心动过速：频率 &gt;100 次 / 分，多数在 160-180 次 / 分，具有清晰可见的 P 波，P 波之间具有等电位线（这点很重要），P波形态和窦性心律不符合者，多为房速。</li></ul><p>窦性心动过速</p><h3 id="心动缓慢"><a href="#心动缓慢" class="headerlink" title="心动缓慢"></a>心动缓慢</h3><p>正常静息心率小于60则为心动过缓。窦性心动过缓可分为病理性及生理性两种。</p><h1 id="心电采集常见噪声及滤波方法"><a href="#心电采集常见噪声及滤波方法" class="headerlink" title="心电采集常见噪声及滤波方法"></a>心电采集常见噪声及滤波方法</h1><div class="note info flat"><p>本部分参考资料：</p></div><h2 id="工频干扰"><a href="#工频干扰" class="headerlink" title="工频干扰"></a>工频干扰</h2><p>50Hz/60Hz正弦波，电网交流电导致的干扰，且可能带有谐波成分。这是心电信号中最严重的干扰。由于线性不变的陷波滤波器通常对这种脉冲敏感，因此考虑采用非线性结构滤波器可能更合适。现有可采用的滤波器有：</p><ul><li>陷波滤波器</li><li>平滑滤波算法（均值滤波、中值滤波、高斯滤波）</li></ul><p>由于其与心电信号区间存在重合，再加上电力线感应出的信号可能带有产生高次谐波，套用传统滤波器效果可能并不是很好。</p><p>因此生物医学有一种叫”右腿驱动 (right-leg drive)”的接法。除了心电的常规测量电极之外，再接一个右腿电击（视情况接在其他部位）。它将共模电压反向放大后重新连接人体，以此达到消除共模干扰的效果。之所以接右腿，是因为右腿离心脏最远，不容易影响正常心电信号。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241104165022966.png" alt="image-20241104165022966"></p><h2 id="肌电干扰"><a href="#肌电干扰" class="headerlink" title="肌电干扰"></a>肌电干扰</h2><p>肌电干扰来自于肌肉活动，分布于0Hz-10000Hz内（30-300Hz分布较多）。会影响心电的典型肌肉活动是头部动作，颈部运动，吞咽活动等。其于心电信号在0.1Hz-100Hz内频谱重叠。其频率特性于白噪声有相似之处。</p><h2 id="活动干扰"><a href="#活动干扰" class="headerlink" title="活动干扰"></a>活动干扰</h2><p>在患者进行右上肢运动时（例如帕金森导致右上肢震颤），可能影响$I,II,aVR,aVL$导联产生心房扑动的特征。例如下图是阵发性心房扑动的波形，假性房扑与之类似。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241015162038352.png" alt="image-20241015162038352" style="zoom: 67%;" /></p><p>凡不是由于心在激动而发生在心电图上的改变医学上被称为“伪差（artifact）”，除了上述假性方扑之外，其还可以产生心律失常波形和冠心病波形、假性心房颤动（房颤）、假性室性心动过速（室速）、假性心室颤动（室颤）、假性窦性停搏、假性急性心肌梗死等。</p><h2 id="基线漂移"><a href="#基线漂移" class="headerlink" title="基线漂移"></a>基线漂移</h2><h1 id="心电的例外情况：起搏心电图"><a href="#心电的例外情况：起搏心电图" class="headerlink" title="心电的例外情况：起搏心电图"></a>心电的例外情况：起搏心电图</h1><p>上述所讨论的所有心电图，都是基于</p>]]></content>
      
      
      <categories>
          
          <category> 毕业设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生物信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part1-CH2-电路实现技术</title>
      <link href="/posts/2f4a86be.html"/>
      <url>/posts/2f4a86be.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-AND-OR-NOT门综合设计（Synthesis-Using-AND-OR-and-NOT-Gates）"><a href="#使用-AND-OR-NOT门综合设计（Synthesis-Using-AND-OR-and-NOT-Gates）" class="headerlink" title="使用 AND OR NOT门综合设计（Synthesis Using AND, OR, and NOT Gates）"></a>使用 AND OR NOT门综合设计（Synthesis Using AND, OR, and NOT Gates）</h1><ul><li><p><strong>Minterm:</strong> 选取为1的项目。 <strong>选择输入逻辑满足F=1的输入组合</strong>，通过以下步骤设计Boolean function:</p><ol><li><p>使得某一个输入满足组合时输出为1（输入进行AND运算）</p></li><li><p>当 1 中任意一个满足时（步骤1的结果们进行OR运算），输出为1</p><p>例如，对$x_1,x_2,x_3$三个输入，想要满足$x_1=1 x_2=1 x_3=1$ 和$x_1=0 x_2=1 x_3=1$ 时输出为1，首先选取使得f输出为1的组合，也就是前面提到的两个，然后进行and运算:$x_1x_2x_3$和$\overline x_1 x_2x_3$，再对and运算的结果进行OR运算$F=x_1x_2x_3+\overline x_1 x_2x_3$(<strong>对应 Sum of Product SOP</strong>)</p></li></ol></li><li><p><strong>Maxterm:</strong> 排除为0的项目。<strong>选择输入逻辑满足F=0的输入组合</strong>，通过以下步骤设计Boolean function:</p><ol><li><p>使得输入满足这个组合时输出为0（输入AND运算的结果取反，然后德摩根化开，此时$\overline {A.B}$ 就会变成$\overline A+\overline B$ ）</p></li><li><p>当所有输入情况任意一个满足为0时为0，否则为1（步骤1的结果AND运算）。</p><p>例如： $F=(A+B).(  \overline {A}  +B).(A+  \overline {B}  )$ <strong>(对应 Product of Sum POS)</strong></p></li></ol></li><li><p><strong>Cost：</strong>电路中  <strong>门的总数</strong>  加 <strong>门的输入信号的总数</strong>, 如果题目说需要同时给了未取反和取反(complement)的形式，则可以忽略not门造成的cost，否则需要计算not门的cost</p></li></ul><p><em>例: Maxterm的化简</em></p><script type="math/tex; mode=display">f=(  x_ {1}  +  x_ {2}  +  x_ {3}  )(  x_ {1}  +  \overline {x}_ {2}  +  x_ {3}  )(  x_ {1}  +  \overline {x}_ {2}  +  \overline {x}_ {3}  )  (\overline {x}_ {1}+\overline {x}_ {2}+\overline {x}_ {3})_ {(}</script><script type="math/tex; mode=display">f=((  x_ {1}  +  x_ {3}  )+  x_ {2}  )((  x_ {1}  +  x_ {3}  )+  \overline {x}_ {2}  )(  x_ {1}  +(\overline  x_ {2}  +  \overline {x}_ {3}  ))(  \overline {x}_ {1}  +(  \overline {x}_ {2}  +  \overline {x}_ {3}  ))\\</script><script type="math/tex; mode=display">f=(  x_ {1}  +  x_ {3}  )(  \overline {x}_ {2}  +  \overline {x}_ {3}  )\\</script><div class="note info simple"><p><em>把AND OR NOT门电路转化成NAND和NOR只需要用DeMorgan’s theorem 整体取反后化开即可。Multiplexer后面有更详细的涉及，此处省去。</em></p></div><hr><h1 id="晶体管开关-Transistor-Switches"><a href="#晶体管开关-Transistor-Switches" class="headerlink" title="晶体管开关 (Transistor Switches)"></a>晶体管开关 (Transistor Switches)</h1><p>晶体管有三个级：  源极(Source)  漏极(Drain)  栅极(Gate)  </p><ul><li><p><strong>NMOS:</strong>   当$V_G$是低电平的时候关断，高电平的时候导通。 </p></li><li><p><strong>PMOS:</strong>    当$V_G$是低电平的时候导通，高电平的时候截止。</p><table>   <tr>       <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240113231550895.png"/></center></td>       <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240113232443627.png"/></center></td>   </tr></table></li></ul><h2 id="NMOS-逻辑门"><a href="#NMOS-逻辑门" class="headerlink" title="NMOS 逻辑门"></a><strong>NMOS</strong> <strong>逻辑门</strong></h2><ul><li><p>利用开关的特性，通过上拉或下拉工作模式即可实现一个基于NMOS的逻辑门。此时需要一个限流电阻。因此该种方式功耗较大 </p></li><li><p>从MOS管的构成视角来看，AND和OR门其实是NAND和NOR门取反(如下图所示)，成本更高</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240113232959053.png" alt="image-20240113232959053.png (748×237) (kaysonz.top)"></p><h2 id="CMOS逻辑门-五星级的"><a href="#CMOS逻辑门-五星级的" class="headerlink" title="CMOS逻辑门 (五星级的)"></a>CMOS逻辑门 (五星级的)</h2><h3 id="CMOS逻辑门的介绍"><a href="#CMOS逻辑门的介绍" class="headerlink" title="CMOS逻辑门的介绍"></a>CMOS逻辑门的介绍</h3><p>NMOS逻辑门中通过上拉电阻实现上拉电路，这导致了功耗增加。CMOS逻辑门则优化了这个问题。</p><p>CMOS使用上拉电路和下拉电路，构成逻辑门。以NOT门为例，无论输入是低或高时，CMOS NOT门都直接被连到VCC或者GND，内部没有电流流动，理想状态下没有功率。这是CMOS是当今最流行的逻辑电路技术的原因。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114004622139.png" alt="image-20240114004622139"></p><h3 id="使用CMOS逻辑门构建逻辑电路"><a href="#使用CMOS逻辑门构建逻辑电路" class="headerlink" title="使用CMOS逻辑门构建逻辑电路"></a>使用CMOS逻辑门构建逻辑电路</h3><p>在MOS层面，<strong>AND逻辑需要两个MOS都导通才导通，因此可以用两个MOS管串联来实现；OR逻辑只需要任意任意一个MOS导通它就导通，因此可以用两个MOS管并联来实现</strong></p><p>下图就时一个使用MOS管实现NOR逻辑的例子：</p><ul><li><p>上拉电路是电路取1的表达状态：根据真值表，只有当$x_1,x_2$都是0的时候，电路输出才是1。也就是$x_1x_2$</p></li><li><p>下拉电路是电路取0的表达状态，根据真值表，只要任意输入不为0，电路输出0。也就是$x_1+x_2$</p></li><li>根据上面的分析，AND逻辑使用串联，OR逻辑使用并联，即可得到下面这个NOR gate</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114004807165.png" alt="image-20240114004807165"></p><p><em>Example：Realise the following function using PMOS and NMOS$f=  \overline {x_ {1}}  +  \overline {x_ {2}}   \cdot   \overline {x_ {3}}  $</em> </p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114005501784.png" alt="img" style="zoom:150%;" /></p><p>如上图所示，上拉电路为$f=1$的时候，也就是$f=  \overline {x_ {1}}  +  \overline {x_ {2}}   \cdot   \overline {x_ {3}}  $</p><p>下拉电路为$f=0$的时候，也就是$  \overline f=\overline { \overline {x_ {1}}  +  \overline {x_ {2}}   \cdot   \overline {x_ {3}}  }=<br>(  x_ {1}  )  (x_ {2}+x_ {3}) $，逻辑是($x_1$) 与 ($x_2,x_3$并联的结果) 串联</p><hr><h1 id="可编程逻辑器件-Programmable-Logic-Devices-PLDs"><a href="#可编程逻辑器件-Programmable-Logic-Devices-PLDs" class="headerlink" title="可编程逻辑器件 (Programmable Logic Devices PLDs)"></a>可编程逻辑器件 (Programmable Logic Devices PLDs)</h1><h2 id="Programmable-Logic-Array-PLA"><a href="#Programmable-Logic-Array-PLA" class="headerlink" title="Programmable Logic Array (PLA)"></a><strong>Programmable Logic Array (PLA)</strong></h2><p>PLA 由AND运算后输入给OR运算，整体构成了一个SOP的形式，下图中曲线的位置代表它可编程。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114011303571.png" alt="image-20240114011303571"></p><p>下图逻辑表达式如下 </p><p>$ P_ {1} $ = $ x_ {1} $ $ x_ {2} $  $ P_ {2} $ = $ x_ {1} $ $ \overline {x}_ {3} $ , $ P_ {3} $ = $ \overline {x}_ {1} $ $ \overline {x}_ {2} $ $ x_ {3} $ , $ andP_ {4} $ = $ x_ {1} $ $ x_ {3} $<br> $ f_ {1} $ = $ x_ {1} $ $ x_ {2} $ + $ x_ {1} $ $ \overline {x}_ {3} $ + $ \overline {x}_ {1} $ $ \overline {x}_ {2} $ $ x_ {3} $<br> $ f_ {2} $ = $ x_ {1} $ $ x_ {2} $ + $ \overline {x}_ {1} $ $ \overline {x_ {2}} $ $ x_ {3} $ + $ x_ {1} $ $ x_ {3} $ </p><p><strong>PLA 所需的可编程开关具有难以制造，速度慢的问题。</strong></p><h2 id="Programmable-Array-Logic-PAL"><a href="#Programmable-Array-Logic-PAL" class="headerlink" title="Programmable Array Logic (PAL)"></a><strong>Programmable Array Logic (PAL)</strong></h2><p>PAL的AND plane是可编程的，OR plane是固定的。与PLA相比，PAL提供的灵活性较小；PLA允许每个或门最多有四个乘积项，而PAL中的或门只有两个输入。但它减少了可编程开关的数量。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114010919955.png" alt="image-20240114010919955"></p><p>上图的输出为： $ f_ {1} $ = $ x_ {1} $ $ x_ {2} $ $ \overline {x}_ {3} $ + $ \overline {x}_ {1} $ $ x_ {2} $ $ x_ {3} $ ；   $ f_ {2} $ = $ \overline {x}_ {1} $ $ \overline {x}_ {2} $ + $ x_ {1} $ $ x_ {2} $ $ x_ {3} $ </p><p>因为PAL的OR的输出是不可编程的，因此flexibility较差。利用额外的宏单元来提升flexibility。宏(Macrocell) :将OR Gate的输出连接至额外的电路，如下图例子所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114011123843.png" alt="image-20240114011123843"></p><h2 id="Complex-Programmable-Logic-Device-CPLD"><a href="#Complex-Programmable-Logic-Device-CPLD" class="headerlink" title="Complex Programmable Logic Device (CPLD)"></a><strong>Complex Programmable Logic Device (CPLD)</strong></h2><p>为了实现需要更多输入和输出的电路，可以使用多个PLA或PAL，或者可以使用更复杂类型的芯片，称为复杂可编程逻辑器件（CPLD）。CPLD的基本结构可看成由可编程逻辑阵列（LAB），可编程I/O控制模块和可编程内部连线（PIA）等三部分组成。</p><p>Example：下图是四个类似PAL的块，连接到一组互连线。每个类似PAL的块也连接到标记为I/O块。note: 一旦CPLD被编程了，那它的程序是可以断电保存的。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114011242968.png" alt="image-20240114011242968"></p><h2 id="Field-programmable-gate-array-FPGA"><a href="#Field-programmable-gate-array-FPGA" class="headerlink" title="Field-programmable gate array (FPGA)"></a><strong>Field-programmable gate array (FPGA)</strong></h2><p>FPGA由可编程逻辑块（CLB/Logic Block），输入/输出模块（IOB）及可编程互连资源（PIR）等三种可编程电路和一个SRAM结构的配置存储单元组成。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114011406647.png" alt="image-20240114011406647"></p><p>最常用的可编程逻辑块（Logic Block），是查表(Look Up Table LUT)</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114011456609.png" alt="image-20240114011456609"></p><hr><h1 id="Custom-Chips-Standard-Cells-and-Gate-Arrays"><a href="#Custom-Chips-Standard-Cells-and-Gate-Arrays" class="headerlink" title="Custom Chips, Standard Cells, and Gate Arrays"></a><strong>Custom Chips, Standard Cells, and Gate Arrays</strong></h1><p>限制PLD中可以容纳的电路大小的关键因素是可编程开关的存在。尽管这些开关提供了用户可编程性的重要优势</p><ul><li><p><strong>它们在芯片上消耗了大量空间，从而导致成本增加。</strong></p></li><li><p><strong>它们还导致电路运行速度的降低</strong></p></li><li><p><strong>以及功耗的增加。</strong></p><p>AISC可以解决如上问题</p></li></ul><h2 id="Application-specific-integrated-circuits-AISCs"><a href="#Application-specific-integrated-circuits-AISCs" class="headerlink" title="Application-specific integrated circuits (AISCs)"></a><strong>Application-specific integrated circuits (AISCs)</strong></h2><p>专用集成电路，是指应特定用户要求和特定电子系统的需要而设计、制造的集成电路。制造商首先制造出逻辑操作的模板，后根据用户需求将模板用不同方式组合在一起。</p><p><strong>ASIC在批量生产时与通用集成电路相比具有体积更小、功耗更低、可靠性提高、性能提高、保密性增强、成本降低等优点。</strong></p><p><strong>ASIC和FPGA相比，ASIC是专用集成电路，一旦设计完成后集成电路即固定。而FPGA是在阵列内集成大量数字电路基本门电路和存储器，开发人员可以通过烧写FPGA配置来定义电路。</strong></p><p>一个AISC的例子：这个电路中，制造商制造框起来的标准逻辑块，用户自定义连接(红线)，来实现不同输出，下图电路实现的输出就是：$f_1=  x_ {1}   x_ {2}  +  \overline {x_ {1}}  \overline {x_ {2}}   x_ {3}  +  x_ {1}   x_ {3}  $;    $ f_2=  \overline {x_ {1}}    \overline {x_ {3}}  +  \overline {x_ {1}}   \overline {x_ {2}}   x_ {3}  +  x_ {1}   x_ {3}  $</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114011657224.png" alt="image-20240114011657224"></p><hr><h1 id="传输门（Transmission-Gates）五星级"><a href="#传输门（Transmission-Gates）五星级" class="headerlink" title="传输门（Transmission Gates）五星级"></a><strong>传输门（Transmission Gates）五星级</strong></h1><p>NMOS(高开低关)传输0较好，而传输1较差。PMOS（低开高关）传输1较好而传输0较差。传输门把一个NMOS和一个PMOS组合在一起，从而实现很低的导通电阻和很高的截止电阻。因此，传输门可以直接使得原始信号x通过逻辑门，此时逻辑门输出$f=x$。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114012221074.png" alt="image-20240114012221074"></p><div class="note warning simple"><p>五星级问题：一个传输门有几个 Transistor？ ——2个; 因为是把PMOS和NMOS组合在一起</p></div><p><strong>五星级例题：使用传输门构建XOR</strong></p><p>XOR表达式：$f=\overline x_1x_2+x_1 \overline x_2$</p><p>根据真值表，当$x_1=0$时，输出$f=x_2$。当$x_1=1$时，输出$f=\overline x_2 $。根据传输门良好导通的特性，下图电路可被设计。</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114012807046.png"/></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114012819416.png"/></center></td>    </tr></table><hr><h1 id="SPLD、CPLD和FPGA的实现细节"><a href="#SPLD、CPLD和FPGA的实现细节" class="headerlink" title="SPLD、CPLD和FPGA的实现细节"></a><strong>SPLD、CPLD和FPGA的实现细节</strong></h1><h2 id="PLD"><a href="#PLD" class="headerlink" title="PLD"></a>PLD</h2><p>这是一个普通的XOR Gate，使用NMOS实现的电路</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114012954804.png" alt="image-20240114012954804"></p><p>这是可编程版本</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114013017068.png" alt="image-20240114013017068"></p><p>白色框框内部结构是EEPROM编程开关，$Ve$连接的就是EEPROM</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114013141719.png" alt="image-20240114013141719"></p><h2 id="FPGA"><a href="#FPGA" class="headerlink" title="FPGA"></a>FPGA</h2><p>与白色框框不同，FPGA采用SRAM编程，结构如下图所示.  <strong>SRAM 单元中的数据掉电就会丢失</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114014257973.png" alt="image-20240114014257973"></p><hr><h1 id="典型逻辑电路和它们的VHDL代码"><a href="#典型逻辑电路和它们的VHDL代码" class="headerlink" title="典型逻辑电路和它们的VHDL代码"></a>典型逻辑电路和它们的VHDL代码</h1><h2 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114013350317.png" alt="image-20240114013350317"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--定义实体，主要定义输入输出的端口--</span></span><br><span class="line"><span class="keyword">ENTITY</span> examplel <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> (x1,x2,x3 :<span class="keyword">IN</span> <span class="built_in">BIT</span> ; <span class="comment">--PORT后定义输入的端口和输出的端口</span></span><br><span class="line">f  : <span class="keyword">OUT</span> <span class="built_in">BIT</span> );<span class="comment">--这里定义类型为BIT，只有0和1两种状态；这里也可以定义为STD_LOGIC,会多出高阻等等状态，Dr.Wu一般只会考0和1的</span></span><br><span class="line"><span class="keyword">END</span> example1 ;</span><br><span class="line"><span class="comment">--定义某个实体对应的逻辑结构--</span></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> LogicFunc <span class="keyword">OF</span> examplel <span class="keyword">IS</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">f &lt;= (x1 <span class="keyword">AND</span> x2) <span class="keyword">OR</span> (<span class="keyword">NOT</span> X2 <span class="keyword">AND</span> x3) <span class="comment">--写输入，输出端口对应的逻辑表达式</span></span><br><span class="line"><span class="keyword">END</span> LogicFunc;</span><br></pre></td></tr></table></figure><h2 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114013524391.png" alt="image-20240114013524391"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTITY</span> example2 <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> (xl,x2,x3,x4 :<span class="keyword">IN</span> <span class="built_in">BIT</span> ; <span class="comment">--PORT后定义输入的端口和输出的端口，这里是多路输出，有f和g两个OUT</span></span><br><span class="line">f,g : <span class="keyword">OUT</span> <span class="built_in">BIT</span>);</span><br><span class="line"><span class="keyword">END</span> example2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> LogicFunc <span class="keyword">OF</span> example2 <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">f &lt;=(x1 <span class="keyword">AND</span> x3) <span class="keyword">OR</span> (x2 <span class="keyword">AND</span> x4) ;<span class="comment">--分别写出输出的逻辑表达式</span></span><br><span class="line">g &lt;= (x1 <span class="keyword">OR</span> <span class="keyword">NOT</span> x3) <span class="keyword">AND</span> (<span class="keyword">NOT</span> X2 <span class="keyword">OR</span> X4)</span><br><span class="line"><span class="keyword">END</span> LogicFunc ;</span><br></pre></td></tr></table></figure><hr><center>---CHAPTER END---</center>]]></content>
      
      
      <categories>
          
          <category> 大三上 </category>
          
          <category> 数字电路设计与可靠性工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专业实训-4G LTE</title>
      <link href="/posts/773de39a.html"/>
      <url>/posts/773de39a.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>同前面介绍的2G、3G时代一样，4G时代也有诸多标准。任何用户高速移动下达到或超过100Mbps，静态数据传输达到1Gbps的无线数据网络系统都可以称作4G，而LTE（Long-Term Evolution 长期演进）技术只是其中之一。但因为LTE实在部署太广泛，所以才会看到4G就是LTE。下图是截止2018年8月LTE的全球部署情况。红色代表使用中。深蓝和浅蓝分别是正在部署和正在规划。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240925233223819.png" alt="image-20240925233223819"></p><p>LTE由3GPP</p><h1 id="LET-A网络结构"><a href="#LET-A网络结构" class="headerlink" title="LET-A网络结构"></a>LET-A网络结构</h1><p>在LTE中，网络架构被称为 EPS（Evolved Packet System）。</p><p>其接入网部分被称为E-UTRAN（Evolved Universal Terrestrial Radio  Access Network）。</p><p>核心网部分被称为EPC（Evolved Packet Core）。这个核心网架构也被叫做网络架构被称作Service Architecture Evolution SAE （系统架构演进），因其是由PS域核心网网络架构演进而来。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240925232719175.png" alt="image-20240925232719175"></p><h2 id="接入网E-UTRAN"><a href="#接入网E-UTRAN" class="headerlink" title="接入网E-UTRAN"></a>接入网E-UTRAN</h2><p>E-UTRAN协议支撑了UE与无线网络的通信，其协议包含了多设备下无线信道的Medium Access Control (MAC)的机制，并保障了连接可靠性。其还支持对高层PDU的分段和重组以及IP报头压缩（这句话看不懂的话去复习现代通信网络）。</p><p>接入网中由3GPP制定网元为eNodeB。</p><ul><li>eNodeB：Evolved NodeB，中文叫演进型NodeB，简写为eNB。eNodeB相比3G/UMTS中的Node B，集成了部分RNC的功能。在“现代通信网络”一课中Baoninghai老师曾说过：“通信网络有扁平化发展的趋势”。这就是其体现，在5G网络中eNB直连核心网，不再有控制器。</li></ul><p>在LTE中eNB是具有相互通信的功能的，且没有集中控制器，这对eNB的分布式部署带来了极大的便利。甚至可以一条线部署（核心网-eNB-eNB-eNB-……-eNB）这样，这非常有利于轨道交通内基站的部署。</p><h2 id="核心网EPC"><a href="#核心网EPC" class="headerlink" title="核心网EPC"></a>核心网EPC</h2><p>LTE的核心网被称为EPC（Evolved Packet Core）。它提供一个基于分组交换的面向连接的网络通信。</p><p>在核心网上，因网元功能所行使的职责不同而被分为了两个面：控制面和用户面。控制面负责协调网络资源，对网络进行管理；而用户面传输和路由用户数据，让不同用户间数据可达。在下面将会更详细地介绍。</p><p>这体现出了一个点：LTE的网络是<strong>纯基于IP的（Purely IP based）</strong>全PS域网络，<strong>没有CS域</strong>，无论是用户面还是控制面，他们都基于IP连接，相互间只是使用IP构建出了一个逻辑链路。相应的，承载这种连接（即，提供物理连接、路由等）的“承载网”被称为EPS Bearer。在这个EPS Bearer上，可以定义给予用户的QoS，<del>这取决于用户给的米够不够</del>。</p><div class="note danger flat"><p>Purely IP based这个特点五星级！</p></div><p>在下图中，连接UE-ENodeB-MME之间还有一条线写了个“NAS（Non-Access-stratum）”，这是何物呢？其实，在UE-eNodeB之间还有一个AS（Access-stratum）没写出来。他们分别是UE和MME之间的功能层和UE和eNB间的功能层。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240925232719175.png" alt="image-20240925232719175"></p><p>任何连个物体之间通信需要同一种协议，就像两个人之间交流需要通过同一种语言，所以UE和MME之间的交互的协议就是NAS即非接入层。为什么叫非接入层？因为UE和MME都不属于接入层设备（eNodeB是接入设备），所以UE和MME之间的通信协议叫非接入层。而UE和eNB间就被称为接入层（AS）。在下图中能更体现这种关系，NAS是AS的上层协议，AS被eNB解析后，NAS帧作为AS层的Payload被完整转发给了MME。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926010951925.png" alt="image-20240926010951925" style="zoom:80%;" /></p><h3 id="EPC核心网元"><a href="#EPC核心网元" class="headerlink" title="EPC核心网元"></a>EPC核心网元</h3><p>回到LTE网络结构图，在EPC中含有众多网元，其主要网元和作用如下：</p><ul><li><strong>MME：</strong>Mobile Managenment Entity 移动管理实体。它是LTE网络中的控制大脑，负责对用户进行身份验证，切换等操作。如前面介绍，其采用NAS信令集。当S-GW注册的空闲用户收到新数据时，MME 会寻呼用户。当用户连接到 eNodeB 时，eNodeB 会选择 MME。MME 依次选择S-GW和P-GW。它对于用户的鉴权是通过访问HSS（Home Subscriber Server）实现的。</li><li><strong>HSS/AAA：</strong>Home Subscriber Server 归属签约用户服务器。用于存储用户签约信息的服务器，是2G/3G网元HLR的演进和升级，主要负责管理用户的签约数据及移动用户的位置信息。其功能与HLR相同，但HLR适用于2G/3G，而HSS是4G，其接口也不同，采用S6a接口与MME相连，内含Diameter协议，基于IP承载。（对应的，HLR采用MAP协议，基于TDM承载）。而和HSS并列的还有一个AAA（Authentication、Authorization、Accounting）</li><li><strong>S-GW：</strong>Serving Gateway，服务网关。其主要功能为1. 路由和转发用户数据包 2.用户数据缓存和寻呼支持 3.移动性切换管理 4.进行传输层数据包标记 5.做为本地锚点。其是属于用户面的网关，是由UMTS中的SGSN演变而来。</li><li><strong>P-GW：</strong>PDN Gateway，PDN网关。其中PDN全称为Packet Data Network (分组数据网络)。这里这个PDN指的是外部PDN，而非前面提到的EPS Bearer中用到的PDN。可以把它理解为连接当前区域网络和其他网络的网关。P-GW的主要功能有 1. 做为 Inter-eNB切换中的本地移动性锚点（MAP）2. Inter-3GPP移动性锚点 3.合法侦听 4.跨运营商计费的用户账单和QCI粒度 5.UE IP地址分配。这也是属于用户面网关。</li><li><strong>ePDG：</strong>当UE和EPC通过非3GPP标准接入时，ePDG负责保证数据传输安全</li><li><strong>ANDSF：</strong>Access Network Discovery and Selection Function 接入网络发现和选择功能。可为3GPP和非3GPP（如Wi-Fi）的用户设备（UE）提供有关连接的接入信息。ANDSF的目的是协助UE发现在其附近的接入网络，并提供接入的优先次序和管理这些网络的连接规则。</li></ul><p>这里面S-GW和P-GW的描述都抽象得很，更简单的对其最重要功能的描述是：PGW是UE到外部网络的默认路由；SGW是分组路由和转发，以及eNB间切换的负责人。</p><p>下图是从3G核心网到5G核心网间网元的进化历程。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/4e9b56106827be399f13a50b8f8a6b4b.png" alt="img" style="zoom:67%;" /></p><h3 id="EPC网元间接口："><a href="#EPC网元间接口：" class="headerlink" title="EPC网元间接口："></a>EPC网元间接口：</h3><p>TE网络内不同网元和其他网元连接有不同的“接口”，例如MME和S-GW连接就是通过S11接口。所谓接口就是一组逻辑上的连接+所使用的协议栈。例如eNB和S-GW间双方有网络有路由，处于可达状态，双方互相给对方一个IP，通过这个IP就可以以自己的身份访问对方；互相也采用同一套通信协议，这样大家就可以互联互通了。在IUV实验手册内有更具象化的配置，如下图，eNB和SGW间的接口是S1-U，这里S1-U的IP地址是3.3.3.1，因此当eNB访问这个IP时，SGW就知道这是eNB来信了。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926004929203.png" alt="image-20240926004929203" style="zoom:50%;" /></p><ul><li>S5/S8：连接S-GW与P-GW</li><li>S6b：连接HSS/AAA与P-GW</li><li>S2b：连接ePDG与P-GW</li><li>sWm：连接HSS/AAA 与 ePDG</li><li>S6a：连接MME与HSS/AAA</li><li>S11：连接MME与S-GW</li><li>S1接口：LTE eNodeB（基站）与 EPC（分组核心网）之间的通讯接口；分为S1-MME（或S1-C）的控制面接口和S1-U的用户面接口。S1-C连接eNB和MME，S1-U连接eNB和S-GW</li><li>X2接口：eNB间的通信接口（控制面通信），X2接口的功能很强大，可以尽可能减少对核心网的依赖，但是现网中并未完全使用X2的功能。</li></ul><h1 id="LTE的控制流程"><a href="#LTE的控制流程" class="headerlink" title="LTE的控制流程"></a>LTE的控制流程</h1><p>在EPC中有三种区域类型：MME pool areas, Tracking areas, S-GW service areas</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926024009997.png" alt="image-20240926024009997" style="zoom:67%;" /></p><ul><li>MME pool areas：移动设备可以在不改变服务MME的情况下移动的区域（网络运营商可能会将一大个区域配置为一个MME池，如一个主要城市）</li><li>Tracking areas：跟踪区，由多个eNB组成的，非重叠的小区域。这相当于2G/3G中的Location Area，用于跟踪UE的位置。在一个TA内移动UE不需要向EPC更新自己的位置。当处于空闲状态的UE需要被寻呼时，必须在UE所注册的跟踪区的所有小区进行寻呼。</li><li>S-GW service areas：由一个或多个SGW连接的区域，移动设备可以在该区域内移动而无需更改SGW。</li></ul><h2 id="身份识别"><a href="#身份识别" class="headerlink" title="身份识别"></a>身份识别</h2><p>要进行切换，首先得认识谁是谁。</p><p>为此，在网络侧对MME使用GUMMEI（Global Unique MME Identity）； Tracking Area使用TAC码（Tracking Area Code）和TAI码（Tracking Area Identity）；Cell使用ECI（E-UTRAN Cell Identity）、ECGI (E-UTRAN Cell Global Identifier) 、PCI (Physical Cell Identity) 。</p><p>在用户侧使用IMEI (International Mobile Equipment Identity)和IMSI (International Mobile Subscriber Identity)，以及根据此生成的GUTI（Global Unique Temporary ID）</p><p>下面将详细介绍。</p><h3 id="GUMMEI"><a href="#GUMMEI" class="headerlink" title="GUMMEI"></a>GUMMEI</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926030254876.png" alt="image-20240926030254876"></p><p>GUMMEI由48bit组成，其中：</p><ul><li>MCC（Mobile Country Code）：移动国家码，3位数字，常见的有 234 – UK; 310 – USA; 440 – Japan; 450 – Korea; 460 – China; 466 – CN_Taiwan</li><li>MNC（Mobile Network Code）：移动网络码，2位数字，中国移动根据业务不同使用00,02,07；中国联通使用01,06,09；中国电信使用03,05,11；中国铁通使用20</li><li>PLMN-ID（Public Land Mobile Network IDentity）： 公共陆地移动网络ID，其等于MCC+MNC</li><li>MMEGI（MME Group Identity)：MME组标识，在一个PLMN内它是唯一的。由运营商自行分配。</li><li>MMEC（MME Code)：MME编号，在一个MME组内它是唯一的，由运营商自行分配。</li></ul><p>在此处，某个国家（MCC区分）的一个运营商的某种业务（MNC区分）划分了一个基本的PLMN区域。</p><h3 id="TAC-amp-TAI"><a href="#TAC-amp-TAI" class="headerlink" title="TAC&amp;TAI"></a>TAC&amp;TAI</h3><ul><li>跟踪区域代码（TAC）是固定长度16bit（4位HEX码）码组，用于标识PLMN内的跟踪区域标识，在单个PLMN内唯一</li><li>TAI由跟踪区域所属的PLMN标识和跟踪区域的TAC（跟踪区域代码）构成。</li></ul><h3 id="ECI-amp-ECGI-amp-PCI"><a href="#ECI-amp-ECGI-amp-PCI" class="headerlink" title="ECI&amp;ECGI&amp;PCI"></a>ECI&amp;ECGI&amp;PCI</h3><ul><li>ECI：演进通用陆地无线接入网络小区标识，28位bit的固定长度，并使用十六进制表示进行编码。它有eNB ID和小区标识两部分组成，在一个PLMN中唯一</li><li>ECGI：PLMN-ID+ECI</li><li>PCI：物理小区标识，取值范围0-503（共504个），单一小区覆盖范围内及其毗邻小区内不能有重复PCI。LTE的小区搜索流程确定了采用小区ID分组的形式，首先通过SSCH（辅助同步码）确定小区组ID，再通过PSCH（基本同步码）确定具体的小区ID。PCI在LTE中的作用有点类似扰码在W中的作用，因此规划的目的也类似，就是必须保证复用距离；（这里面的同步码是具有不同扰码和时隙的物理层编码）</li></ul><h3 id="IMEI-amp-IMSI-amp-GUTI"><a href="#IMEI-amp-IMSI-amp-GUTI" class="headerlink" title="IMEI&amp;IMSI&amp;GUTI"></a>IMEI&amp;IMSI&amp;GUTI</h3><ul><li><p>IMEI：国际移动设备识别码，15位数字，一个手机一个标识（双卡双待的手机有俩）</p></li><li><p>IMSI：国际移动用户识别号，15位数字，全球唯一ID，用来区别每一位移动用户。与SIM卡是绑定关系。其由三部分构成：MCC+MNC+MSIN。最后一个MSIN是移动订阅用户识别代码（Mobile subscription identification number），用来这个国家（MCC）内的特定业务内（MNC）的用户用的。</p></li></ul><p>但是长期使用IMSI并不安全，因此需要一个东西来代替他们执行临时鉴权，避免长期通过无线传输IMSI。</p><ul><li>M-TMSI (M Temporary Mobile Subscriber Identity)：32bit，用于MME对用户进行临时鉴权，其是由网络随机分配的，区域内每个用户唯一。当用户离开时，其持有的M-TMSI被释放，可以分配给其他用户。</li></ul><p>结合M-TMSI和前面介绍的，即可生成GUTI（Global Unique Temporary ID），如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926033303386.png" alt="image-20240926033303386"></p><h2 id="三类移动性管理"><a href="#三类移动性管理" class="headerlink" title="三类移动性管理"></a>三类移动性管理</h2><p>EPS Mobility Management (EMM)指的是与 E-UTRAN 接入、身份验证和安全上的移动性相关的程序。3GPP将其分为三类：通用流程（common procedures）、特殊流程（specific procedures）、连接管理流程（connection management procedures）</p><ul><li>EMM 通用流程：指在 UE 和 MME 之间存在 NAS 信令连接时始终可以发起的流程。此流程可进一步分为五个流程：<ol><li>全局唯一临时标识符 (GUTI) 分配（GUTI (Global Unique Temporary ID) reallocation）</li><li>身份验证（Authentication）</li><li>安全模式控制 (Security mode control) </li><li>身份识别（Identification）</li><li>EMM 信息（EMM information）</li></ol></li><li>EMM 特定流程：指与用户移动性（注册和位置更新）相关的流程。<ol><li>它规定了在TA Update的机制：当UE发现自己进入了一个新的TA时，其发起TA Update流程</li><li>其还引入了TA List这个概念：当UE进入一个TAL中包含的了TA时，其无需发布TA Update流程，还可以通过向UE提供不同的TAL来避免信号峰值，例如当列车上的所有UE都跨越TA边界时。</li></ol></li><li>EMM 连接管理流程：指与建立 NAS 信令连接相关的流程。它可进一步分为三个流程：<ol><li>服务请求（Service request:）：由UE发起，开始建立NAS信令连接</li><li>寻呼（Paging）：在下行 NAS 信令的情况下由网络发起，以指示 UE 开始服务请求</li><li>NAS 消息传输（Transport of NAS messages）：其他NAS信令的传输。</li></ol></li></ul><h2 id="UE附着流程"><a href="#UE附着流程" class="headerlink" title="UE附着流程"></a>UE附着流程</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926122826134.png" alt="image-20240926122826134"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926122836433.png" alt="image-20240926122836433"></p><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><h3 id="切换类型"><a href="#切换类型" class="headerlink" title="切换类型"></a>切换类型</h3><p>LTE网内（即，不涉及4G切换到3G、2G）切换有4中：</p><ul><li>eNB扇区间切换</li><li>eNB间通过X2接口切换</li><li>同一MME下不同eNB通过S1接口切换</li><li>不同MME间经由S1接口切换</li></ul><h3 id="eNB间通过X2接口切换"><a href="#eNB间通过X2接口切换" class="headerlink" title="eNB间通过X2接口切换"></a>eNB间通过X2接口切换</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926125230524.png" alt="image-20240926125230524"></p><h3 id="同一MME下eNB间通过S1接口切换"><a href="#同一MME下eNB间通过S1接口切换" class="headerlink" title="同一MME下eNB间通过S1接口切换"></a>同一MME下eNB间通过S1接口切换</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926125213208.png" alt="image-20240926125213208"></p><h3 id="LTE内不同MME下通过S1接口切换"><a href="#LTE内不同MME下通过S1接口切换" class="headerlink" title="LTE内不同MME下通过S1接口切换"></a>LTE内不同MME下通过S1接口切换</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240926125158753.png" alt="image-20240926125158753"></p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 专业实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专业实训0-introduction</title>
      <link href="/posts/e799b05d.html"/>
      <url>/posts/e799b05d.html</url>
      
        <content type="html"><![CDATA[<h1 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h1><ul><li>UE：全称 User Equipment，代表无线的用户终端（radio user terminal）。就是手机之类的。</li><li>RAN：全称Radio Access Network，无线接入网，为UE提供无线连接。</li><li>CN：全称Core Network，核心网，将RAN与外部服务和基础设计连接在一起，并提供其他连接和移动性管理。</li><li>BS：全称Base Station，基站，这是RAN中的一环，旨在创建与UE的无线连接接口（Radio Interface）。基站后方通常需要连接一个控制器（Radio Controller）（如下图），这个控制器只在2G和3G时代存在，在4G、5G中基站直连核心网。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240918122905219.png" alt="image-20240918122905219" style="zoom: 33%;" /></p><ul><li>CS&amp;PS：电路交换和分组交换。在最开始的移动网络中，CN有两套网络系统：一套基于CS，服务于电信业务；一套基于PS，服务于数据业务；</li><li>Cell：中文名叫小区，就是蜂窝移动网络的一个蜂窝格子，由一个基站提供无线服务。</li><li>LA：全称Location Area，是多个基站构成的“位置区域”，每一个位置区域都会有自己的位置区域码。LA是用于定位并寻呼用户的，与此前移动通信中提及的簇（cluster）概念有所不同。</li></ul><h1 id="基本网络架构和工作流程"><a href="#基本网络架构和工作流程" class="headerlink" title="基本网络架构和工作流程"></a>基本网络架构和工作流程</h1><h2 id="业务角度的网络层级划分"><a href="#业务角度的网络层级划分" class="headerlink" title="业务角度的网络层级划分"></a>业务角度的网络层级划分</h2><p>从业务的角度来说，移动通信网络是接入网+核心网的组合，但是经常还能听到诸如传输网、承载网等等。其实他们是从其他角度对网络进行描述的。下图取自华为培训在知乎问题下的回答，很好的回答了这个问题。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/v2-a7a2f9fa922f8035c1c9ca867c323eb7_1440w.webp" alt="img" style="zoom: 67%;" /></p><p>对于业务角度的划分，接入网负责让用户可以接入，核心网负责连接万物。在业务层面仅仅只有这两个划分。</p><p>而在传输层面的划分比较多，有很多新名词：</p><ul><li><p>接入网：接入网执行是接入传输</p></li><li><p>承载网：接入网与核心网之间的传输渠道被称为承载网，进行汇聚传输</p></li><li><p>传输网：核心网内部的传输渠道被称为传输网，但核心网不仅仅局限于传输网，它还包含业务上的数据分发等任务。传输网只是其“基础设施”，执行“骨干传输”。</p></li><li><p>骨干网：个特指不同城市间传输（即，连接不同城域网）的传输网络。</p></li></ul><h2 id="移动网络中的切换"><a href="#移动网络中的切换" class="headerlink" title="移动网络中的切换"></a>移动网络中的切换</h2><p>移动网络区分于无线网络最重要的东西是切换。在不同Generation的网络中有不同的切换机制，总的来说，可以分为被动了主动两类。小区域内用主动，大区域下用被动。</p><h3 id="主动（Active）切换"><a href="#主动（Active）切换" class="headerlink" title="主动（Active）切换"></a>主动（Active）切换</h3><p>主动切换是由基站对用户的位置进行监听，整个切换过程完全由网络侧负责。当信号强度低于Handover门限时，基站会发送指令给UE让其切换到新的基站。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923110450062.png" alt="image-20240923110450062"></p><p>这样的切换发生在一个Cell内。在更大的区内，使用的Idle模式</p><h3 id="被动（Idle）切换"><a href="#被动（Idle）切换" class="headerlink" title="被动（Idle）切换"></a>被动（Idle）切换</h3><p>Idle切换是LA（Location Area，参考前面术语介绍）间的切换。在Idle模式下，用户的位置信息由其自己进行上报。当它移动到一个新的LA时，UE上传自己的信息，并存储在数据库中。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923110838737.png" alt="image-20240923110838737"></p><p>数据库中的信息将被用于寻呼。当你被呼叫时，呼叫信息会被路由到你所注册的LA中，然后让LA中的所有基站广播你的ID，你的手机收到之后会和当前连接的BS进行回复。随后便可以进行通话。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923114753528.png" alt="image-20240923114753528" style="zoom:67%;" /></p><h2 id="从移动通信的角度再看复用和多址"><a href="#从移动通信的角度再看复用和多址" class="headerlink" title="从移动通信的角度再看复用和多址"></a>从移动通信的角度再看复用和多址</h2><p>对多址和复用的区别，有这样一句话：复用是技术，多址是目的。</p><p>这句话的描述得其实非常准确，复用旨在将一个物理信道通过各种传输手段划分出不同的子信道，而多址是将这些子信道分配给不同的用户使用。</p><p>在这门课里面，对复用和多址给出了另一个角度的定义，其本质一样，但是更加形象：</p><ul><li>由基站到用户的下行是复用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923120433733.png" alt="image-20240923120433733"></p><ul><li>由用户到基站的上行是多址</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923120501500.png" alt="image-20240923120501500"></p><p>这个非常好理解，当下行时，不同的信号被复用到一个天线上进行发送，其内部结构就像是复用器外面连了一个天线。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923120622974.png" alt="image-20240923120622974" style="zoom:67%;" /></p><p>而上行则是每个用户都独立发一个子信道的消息，被一个天线接受，根据多址的方式对子信道切分来辨识用户。</p><h2 id="双工"><a href="#双工" class="headerlink" title="双工"></a>双工</h2><p>同时可以上行和下行，即为双工（Duplex）。在移动通信上广泛使用的有时分双工（Time Division Duplexing，TDD）和频分双工（Frequency Division Duplexing，FDD）。</p><p>TDD需要一个保护时隙，而FDD需要一个保护频带。FDD比TDD出现的时间更早。比较适合于类似语言这样的对称流量的应用，而TDD适合于诸如Internet或其他以数据为中心的突发性，非对称流量的应用。</p><p>在TDD中，发送器和接收器的工作频段相同，但分间工作。因此，TDD系统可共用滤波器，混频器，频率源和合成器，从而降低了隔离发射和接收天线之间的复杂性和成本。FDD系统使用一个双工器和/或两个需要空间分隔的天线，不能重复使用资源，导致FDD系统的硬件成本更高。</p><p>TDD比FDD更加灵活，可以满足动态地重新配置分配的上行和下行带宽以响应客户需求的需求。但是与FDD系统相比，TDD系统需要处理系统间精确的时间同步，从而导致MAC层相对复杂度更高。</p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 专业实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专业实训1-补充-2G&amp;3G</title>
      <link href="/posts/af006f89.html"/>
      <url>/posts/af006f89.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>这门课直接介绍了4G和5G的网络，2G和3G本来是在移动通信中介绍过。但是奈何本学院的移动通信课程太拉了，因此在这个地方补充一个间章，重点介绍2G和3G时代的网络架构及其使用的技术细节。</p><p>在各代通信中都有不同的标准，下图总览了1G-5G时代的标准和特性。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/v2-d29173ff9594ed034acda6ae369c9252_1440w.webp" alt="img"></p><h3 id="其中，2G时代："><a href="#其中，2G时代：" class="headerlink" title="其中，2G时代："></a>其中，2G时代：</h3><ul><li>GSM由欧洲电信标准组织ETSI（European Telecommunications Standards Institute）制定，是2G时代最具代表性的技术，自90年代中期投入商用以来，被全球超过100个国家采用。GSM逐渐成为了全球性的移动通信标准，在2004年已拥有了超过十亿的众多用户。当然，也有个别的例外：日本和韩国就从未采用过GSM。因此在后续的2G介绍中，将重点介绍GSM系统。</li><li>D-AMPS（或称IS-136）由美国电子工业联合会制定，在马来西亚、巴西、捷克共和国、俄罗斯和鸟克兰等国家有过部署或尝试部署。它在AMPS中增加了时分多址联接方式（TDMA）</li><li>IS-95A由美国高通制定（是的，就是生产你手机里面骁龙SoC的高通）。它基于CDMA，IS-95是最早的CDMA系统空中接口标准，而IS-95A是它的改进型。后续这个标准几经演变（包含TSB-74，IS-95B等）后，被CDMA2000取代了其位置。</li></ul><p>在2G时代，欧洲用GSM，北美用D-AMPS和IS-95A，日本有一个自己的PDC，未在上表。在GSM后期，还出现了GPRS和EDGE系统，它们自GMS演进而来并为3G的UMTS标准奠定了基础。</p><p>中国大力发展GSM，但也引进了CDMA系的标准，在2G，2.5G时代，我们有CDMA和GSM，俗称C网，G网。当时移动是G网，联通是C网和G网，电信只有小灵通，后来联通把C网卖给电信，于是电信也有了移动业务。</p><h3 id="3G时代："><a href="#3G时代：" class="headerlink" title="3G时代："></a>3G时代：</h3><ul><li>UMTS: 通用移动通讯系统（Universal Mobile Telecommunications System), 由3GPP制定标准，无线接口使用WCDMA。它是结合了3G技术和GSM标准的后续标准，故有时也称3GSM。除了WCDMA之外，后续还引入了<strong>TD-SCDMA</strong>（但是作为一枚油兵，这是不得不知道，且必须刻入DNA的东西！）。TD-SCDMA空口是以我国知识产权为主的、被国际上广泛接受和认可的无线通信国际标准，也被国际电信联盟ITU正式列为第三代移动通信空口技术规范之一。</li><li>CDMA2000：美国高通北美公司为主导的，摩托罗拉、朗讯科技公司和后来加入的韩国三星都有参与实现的一种3G通信标准。韩国是后续的主导者。CDMA2000出现较早，是介于2G到3G之间的一个标准，因此也被称为2.5G。</li></ul><div class="note danger flat"><p>2005年10月9日下午2:30，重庆市人民政府新闻办公室在重庆市新闻发布中心举行了新闻发布会。会议郑重发布了“世界第一颗0.13微米工艺的TD-SCDMA 3G手机核心芯片在重庆诞生”这一令国人自豪和骄傲的重大喜讯。重庆市人民政府新闻办和重庆邮电学院在此间联合宣布：具有我国自主知识产权的世界首枚“通芯一号”3G手机核心芯片已由重庆重邮信科股份有限公司（简称重邮信科）研发成功，并向媒体人士展示亮相。 　　这是世界上第一枚0.13微米工艺的TD-SCDMA 3G手机基带芯片。它的诞生，标志着我国3G通信核心芯片等关键技术已达到了世界领先水平。实现了从“中国制造”到“中国创造”的跨越。</p></div><p>到了3G，电信CDMA2000，移动是UMTS配合自主研发的TD-CDMA，联通是UMTS+WCDMA。</p><p>下图是2G标准到3G各标准间的演进</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240924210601417.png" alt="image-20240924210601417"></p><div class="note info flat"><p><strong>补充：网关的作用</strong></p><p>在下面的文章中会经常看到 网关（gateway）一词，网关的作用其实是协议转换，它有另外一个名字叫做网间连接器。</p><p>举一个形象一些的例子，在小米智能家居中，很多智能家居传感器搭载的蓝牙，使用BLE协议进行通信。但是这个数据会通过TCP/IP传到小米的服务器上去，这样我们才能在手机上访问诸如温湿度等等。</p><p>拿到智能家居的第一步就是给它配网，而对于搭载蓝牙的智能家居，就是将其连接到蓝牙网关上去。而这里的蓝牙网关就是指的能将蓝牙网络和家中的TCP/IP网络连接在一起的转换器。</p><p>在下面看到gateway时，其作用也脱不开这样的网间连接和网络协议转换。</p></div><h1 id="2G：GSM架构"><a href="#2G：GSM架构" class="headerlink" title="2G：GSM架构"></a>2G：GSM架构</h1><div class="note info flat"><p>参考文档：</p><p>[1] <a href="https://www.uky.edu/~jclark/mas355/GSM.PDF">Global System for Mobile Communication (GSM) (uky.edu)</a></p><p>[2] <a href="https://www.eff.org/files/filenode/global_system_for_mobile_communication_technology.pdf">global_system_for_mobile_communication_technology.pdf (eff.org)</a></p><p>[3] <a href="https://web.cs.ucla.edu/classes/fall03/cs218/slides/GSM.pdf">GSM.ppt (ucla.edu)</a></p></div><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>GSM：Global System for Mobile Communications，这种网络仅提供话音、文字短信等简单的功能，没有数据通信服务。2G的代表技术就是GSM，因此很多地方直接说2G就是GSM。纵然2G还有其他的标准，但是GSM是最通用的一个，对3G的UMTS也造就了深远影响。因此在2G这里仅介绍GSM。</p><p>说GSM影响深远可能有点抽象，这是它占领的国家和地区：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923183225465.png" alt="image-20240923183225465"></p><h2 id="GSM的网络架构"><a href="#GSM的网络架构" class="headerlink" title="GSM的网络架构"></a>GSM的网络架构</h2><p>GSM主要将网络分为三层：switching system (SS)，base station system （BSS）， Operation and support system （OOS）</p><ul><li>SS：负责寻呼、移动性管理等等</li><li>BSS：所有跟射频相关的工作都由BSS完成。</li><li>OOS：用于运营商监控和控制网络。提供本网络的概览，并对维护工作提供支持。</li></ul><p>下图是三层功能和它们包含的网元</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240923184212443.png" alt="image-20240923184212443"></p><h3 id="BSS内的网元"><a href="#BSS内的网元" class="headerlink" title="BSS内的网元"></a>BSS内的网元</h3><p>Base Station System由 Base Station Controllers （BSC） 和 Base Transceiver Stations （BTS）构成</p><h1 id="3G-UMTS"><a href="#3G-UMTS" class="headerlink" title="3G UMTS"></a>3G UMTS</h1><div class="note info flat"><p>参考文档：</p><p>[1] <a href="https://sites.pitt.edu/~dtipper/2700/2700_Slides11.pdf#:~:text=• ITU approved suite of four 3G">Compatibility Mode] (pitt.edu)</a></p><p>[2] <a href="https://www.3gpp.org/ftp/Specs/archive/33_series/33.102#:~:text=33102-870.zip: 2014/12/19 10:37 275,1 KB">Directory Listing /ftp/Specs/archive/33_series/33.102 (3gpp.org)</a></p><p>[3] <a href="https://www.infocomm-journal.com/cjnis/article/2018/2096-109x/2096-109x-4-12-00001.shtml#:~:text=简单来说，网络侧需要">移动通信网鉴权认证综述 (infocomm-journal.com)</a></p></div><h2 id="UMTS网络架构"><a href="#UMTS网络架构" class="headerlink" title="UMTS网络架构"></a>UMTS网络架构</h2><p>UMTS：Universal Mobile Telecommunication System</p><p>UMTS由GSM演变而来，因此保留了一些GSM的网元，例如GMSC、HLR。UMTS系统将网络分为四大部分：</p><ul><li>UE：User Equipment，用户终端域，内涵一些用户的身份验证、鉴权信息（例如SIM卡）</li><li>UTRAN：UMTS Terrestrial Radio Access Network，地面接入网，负责所有跟无线接入相关的工作。WCDMA就是在此使用的。</li><li>CN：Core Network，核心网，提供路由、交换、用户跟踪、寻呼等功能。</li></ul><p>网络的整体架构如下图所示，各域内含有不同的网元，下面将逐一介绍</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240924211912230.png" alt="image-20240924211912230"></p><h2 id="网元功能介绍"><a href="#网元功能介绍" class="headerlink" title="网元功能介绍"></a>网元功能介绍</h2><h3 id="UE"><a href="#UE" class="headerlink" title="UE"></a>UE</h3><ul><li>USIM： UMTS Subscriber Identity Module，UMTS用户身份识别模块。（是的常说的SIM卡就是subscriber identity module的意思）。这个卡内包含用户身份、订阅服务、身份验证和加密秘钥。</li><li>ME：Mobile Equipment，也就是你的手机了，更准确一点是你手机上的通信模块。</li></ul><h3 id="UTRAN"><a href="#UTRAN" class="headerlink" title="UTRAN"></a>UTRAN</h3><ul><li>NodeB：无线基站，也就是GSM中的BTS；提供“空中接口（air interface）”，负责信道编码、速率自适应、扩频、同步、功率控制等。每一个NodeB都支持时分双工（TDD）和频分双工（FDD）。</li><li>RNC：Radio Network Controller，在GSM中被称为BSC；对NodeB进行控制，并提供切换决策、拥塞控制、功率控制、加密、接纳控制、协议转换等。</li></ul><div class="note info flat"><p>Dr.LiangChengChao：NodeB这个名称只是因为3GPP内部最开始在2G时代管无线基站叫NodeA，3G时代就随便取了个NodeB想着以后再改吧。结果后面叫习惯了就不改了，因此官方名称就叫做NodeB了。到了4G时代就更省事儿了，直接叫E-NodeB（Evolution NodeB）。</p></div><p>由多个NodeB和一个RNC构成的一个区域叫做<strong>RNS（Radio Network Subsystem）</strong>，如下图所示。多个RNSs一起构成UTRAN。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240924215750239.png" alt="image-20240924215750239"></p><h3 id="CN"><a href="#CN" class="headerlink" title="CN"></a>CN</h3><div class="note info flat"><p>在下面会看到GPRS这一代标准，正如介绍中所言，UMTS有一部分根基就是来源于GPRS，其全称为General Packet Radio Service（通用分组无线服务技术）。顾名思义，它是面向分组交换的，它是GSM的延续但与GSM不同的地方就在于其以分组的方式传输。</p></div><p>3G的Core Network 在逻辑上被分为电路交换部分与分组交换部分，就是在本课程第一章节Introduction中出现的这张图：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240918122905219.png" alt="image-20240918122905219" style="zoom: 33%;" /></p><p>CS和PS间有不同的网元提供交换服务。详细如下：</p><ul><li>HLR：Home Location Register, 用户归属数据库，用于存储用户服务配置文件的主副本。HLR 还在 MSC 和 SGSN 级别存储 UE 位置，</li><li>3G MSC / VLR（这是一个网元，但是结合MSC和VLR为一体）：Mobile Switching Center &amp; Visiting Location Register。MSC为当前位置的 UE 提供<strong>电路交换 (CS)</strong> 服务，MSC还具有号码储存译码、呼叫处理、路由选择、回波抵消、超负荷控制等功能；MSC作为网路核心，能支持位置登记、越区切换和自动漫游等移动管理功能；MSC还应支持信道管理、数据传输，以及包括鉴权、信息加密、移动台设备识别等安全保密功能。VLR从该移动用户的归属用户位置寄存器(HLR)出获取并储存必要的数据。一旦移动用户离开该VLR的控制区域，则重新在另一个VLR登记，原VLR将取消临时记录的该移动用户数据。</li><li>3G GMSC：全称Gatewary MSC。与普通MSC功能一致，但是其是用于3G核心网与外部网络连接的。例如下图GMSC就连往了PSTN （Public Switched Telephone Network，公共交换电话网络），这两个网络间协议不一样，但是其通过网关可以接入于3G核心网。</li><li>3G SGSN：Serving GPRS Support Node, 与 MSC/VLR 类似，但用于<strong>分组交换 (PS)</strong> 服务。通过 SGSN 访问的网络部分通常称为 PS 域。</li><li>3G GGSN：Gateway GPRS Support Node，它起分组交换域这种的GMSC的作用，也是用来连接外部网络的。但是其连接的网络不像PSTN那样依赖于电路交换，而是分组交换。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240925160259390.png" alt="image-20240925160259390" style="zoom:80%;" /></p><p>上图就是3G中的网元合集，关键网元已经介绍。未介绍的AuC（AUthentication Center）用于配合HLR鉴权。EIR（Equipment Identity Register）用于区分设备合法性，其内部有白名单、黑名单、灰名单，白名单允许接入，黑名单不允许接入，灰名单由运营商决定（但接入后会被跟踪），其是通过手机IMEI进行比较的。</p><h2 id="UMTS下的鉴权流程"><a href="#UMTS下的鉴权流程" class="headerlink" title="UMTS下的鉴权流程"></a>UMTS下的鉴权流程</h2><p>在GSM网络中，仅存在单向鉴权（网络侧对用户侧鉴权），因此出现了诸如“伪基站”等假网络，套取用户IMEI等信息后伪装成真用户和网络进行交互，从而监听用户消息。在3G时代出现了双向鉴权，一定程度上改善了这个问题。3G的鉴权流程如下：</p><ol><li>首先拜访地网络发出接入请求给MSC，拜访地网络将该请求传送到归属地网络，归属地网络中的 HLR/AuC 生成鉴权向量。该向量由五元组（RAND，XRES，CK，IK， AUTN）构成。其中，RAND 是随机数，XRES是期望的响应，CK是机密性密钥，IK是完整性密钥，AUTN是鉴权令牌。</li><li>归属地网络将鉴权向量发送到用户设备所在的拜访地网络的VLR。</li><li>拜访地网络从收到的鉴权向量中选择一个，发送 RAND (i)、AUTN(i)到用户。</li><li>用户侧再检查AUTN (i)可否接受，随后计算消息认证码XMAC，并与AUTN中的消息认证码（MAC，message authentication code)比较，若不同则放弃认证过程。同时 MS 要核验 SQN 是否在有效的范围内，若不在则MS 放弃认证过程，这就是用户对网络的鉴权。</li><li>当以上验证步骤成功，终端产生响应RES(i)送回拜访地网络 VLR/SGSN，拜访地网络比较 RES(i)和 XRES(i)，若一致则鉴权通过，否则鉴权失败。在鉴权成功后终端USIM卡同时生成CK和IK，用于在空中接口加密和完整性保护。</li></ol><p>其完整流程和参与的网元如下图所示（RNS是前面介绍过的Radio Network Subsystem）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/img_2.jpg" alt="img"></p><p>在4G LTE下这个鉴权流程还进行了改进，在下一章节会详细介绍。</p><h2 id="UMTS下的Handover"><a href="#UMTS下的Handover" class="headerlink" title="UMTS下的Handover"></a>UMTS下的Handover</h2><h3 id="Handover的分类"><a href="#Handover的分类" class="headerlink" title="Handover的分类"></a>Handover的分类</h3><p>Handover主要有以下几类：</p><ol><li>RNC内部切换：同一RNC控制的NodeB间进行切换，由RNC进行控制。</li><li>RNC间切换：不同RNC，但同一服务器区内进行切换，RNC间有连接时，由RNA进行路由。RNA之间无连接时，由3GMSC或SGSN进行路由。</li><li>不同3GMSC/SGSN间切换：由3GMSC/SGSN进行路由。</li><li>NodeB与BTS间切换，即3G网与其兼容的2G网之间进行切换</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240925183916442.png" alt="image-20240925183916442"></p><h3 id="软切换和硬切换"><a href="#软切换和硬切换" class="headerlink" title="软切换和硬切换"></a>软切换和硬切换</h3><p>如果是先断开和原基站的连接，再建立和新基站的连接，则称为硬切换。软切换下第一个基站不会先断开连接，而是等第二个基站确认已经连接之后再断开。</p><p>在上述切换流程中，1、2都可以进行软切换或硬切换，而3、4只能进行硬切换。软切换不会有核心网参与，最多就是不同RNC之间协商。</p><p>有地方把同一RNC下的软切换称为“softer Handover”。</p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 专业实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part1-ANN</title>
      <link href="/posts/9d2f574.html"/>
      <url>/posts/9d2f574.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="看来您不属于攻略组,请等待笔记验证后发布" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="547d42be750777d10ba5c0c865170fce6bf0ea5e2778e6fc0df45eea4880a103"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">阿尔戈在迷宫区搜集到的零碎攻略信息,还在整理...</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part1-GeneticAlgorithm</title>
      <link href="/posts/1ed1a4c4.html"/>
      <url>/posts/1ed1a4c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="GA简介"><a href="#GA简介" class="headerlink" title="GA简介"></a>GA简介</h2><p>遗传算法（Geneic Algorithm, GA）是基于“物竞天择，适者生存”而提出的。它首先确定参数和优化目标，然后经历以下步骤来模拟这些参数的自然演化过程：</p><ol><li>随机地生成一些答案，称之为种群（Populaition）</li><li>对他们进行评价</li><li>选择较好的，作为parents（父母）</li><li>使得父母重新组合（交叉）</li><li>使得他们的孩子产生一些变异，随机地选择一些参数替代原有</li><li>对他们产生的孩子进行评价</li><li>剔除掉太差的，重复步骤3-7</li><li>直到满足优化目标，“物竞天择，适者生存”的优化结束。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240920150552537.png" alt="image-20240920150552537"></p><p>这整个步骤可以被简略概括为：选种-交叉-变异</p><p>基于GA的工作原理，以下方面都可以影响GA结果：</p><ul><li>Representation：对个体的表示，即，参数的选择（比如一个人，得有胳膊，有腿，有眼睛等等）</li><li>Evaluation function (fitness function)：评价函数，用于“天择”</li><li>Population: 种群</li><li>Parent Selection Machanism: 父母选择机制</li><li>Variation operators: 变异算子（包含交叉(crossover)和变异(mutation)）</li><li>survivor selection mechanism (replacement): 幸存者选择机制</li></ul><h2 id="初始化和终止条件"><a href="#初始化和终止条件" class="headerlink" title="初始化和终止条件"></a>初始化和终止条件</h2><p>在大多数遗传算法中，初始化只是简单的随机值。初始化是否值得额外的计算和算法在很大程度上取决于应用场景。</p><p>终止条件有很多种，但是其实他们大多数都无法保证结果达到最优，只有尽可能靠近。常用的终止方式有：</p><ul><li>运行超过允许的CPU时间后停止</li><li>适应度超过给定阈值</li><li>在一段时间内，改善不明显</li><li>种群多样性在阈值以下</li></ul><h1 id="GA概念及常用算法"><a href="#GA概念及常用算法" class="headerlink" title="GA概念及常用算法"></a>GA概念及常用算法</h1><h2 id="参数表达（Representation）"><a href="#参数表达（Representation）" class="headerlink" title="参数表达（Representation）"></a>参数表达（Representation）</h2><p><strong>表型（phenotypes）</strong>：表型是基因型通过解码和表达所产生的实际特征或行为。在遗传算法中，表型通常是基因型经过解码后得到的解。</p><p><strong>基因型（genotypes</strong>）：基因型是个体的遗传信息的编码表示。在遗传算法中，基因型通常表示为一个字符串或数组，其中每个元素代表一个基因，表型经过编码(encoding)即可得到基因型。</p><p><strong>表型空间（Phenotype Space）</strong>：表型空间是所有可能的表型的集合，也就是解空间。</p><p><strong>染色体（Chromosome）</strong>：染色体是基因型的一个<strong>具体实例</strong>。染色体通常表示为一个字符串或数组，其中每个元素代表一个基因（Gene）。</p><h2 id="父母选择机制（Parent-Selection-Mechaism）"><a href="#父母选择机制（Parent-Selection-Mechaism）" class="headerlink" title="父母选择机制（Parent Selection Mechaism）"></a>父母选择机制（Parent Selection Mechaism）</h2><p>在当前评价机制下，高质量的个体会被给予更大的几率成为父母。靠后的个体也会被给予机会，只是概率不如高质量个体，也不是完全没有。</p><p><strong>如果完全不给予靠后个体机会，则很容易陷入局部最优（local optimization）。</strong></p><p>父母选择机制常用的有如下几种：</p><h3 id="赌轮盘选择（Roulette-Wheel-Selection）"><a href="#赌轮盘选择（Roulette-Wheel-Selection）" class="headerlink" title="赌轮盘选择（Roulette Wheel Selection）"></a>赌轮盘选择（Roulette Wheel Selection）</h3><p>这种机制下，某一条染色体被选为父母的概率和它的评价函数的结果成正比。</p><ol><li>首先需要计算种群适应度的总和，下式中popsize为种群大小，$f$为评价函数<script type="math/tex; mode=display">F=\sum_{i=1}^{popsize}f(v_i)</script></li><li><p>然后用每个染色体自己的适应度/总适应度，得出该染色体被选中的概率</p><script type="math/tex; mode=display">p_i=f(v_i)/F</script></li><li><p>接着求他们的累计概率，表达式如下图。这么做的意义是要将各个染色体按照自身的概率，在一条数轴上划分各段。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/ca1b61a194edace1159c15bb4ba448c0.png" alt="在这里插入图片描述" style="zoom:50%;" /></p><ol><li>然后按照均匀分布，随机生成一个r数落在0-1之间，根据这个数落入的区间选择出对上应的染色体$q_i$，遵循$q_{i-1}&lt;r&lt;q_i$。因为适应度越好的染色体占的空间也越大，因此这样选择出来的染色体和自身适应度正相关。</li></ol><h3 id="排序选择（Rank-based-selection）"><a href="#排序选择（Rank-based-selection）" class="headerlink" title="排序选择（Rank-based selection）"></a>排序选择（Rank-based selection）</h3><p>当适应度值差别很大时，轮盘赌选择就会出现问题。例如最优染色体的适应度值极高，占了90%以上的数轴，那么其他染色体被选择到的概率就很低。因此有另外一种根据适应度进行排序，再分配选择概率的方法。</p><p>以线性排序为例，最差个体排在第1位，最优个体排在第N位，根据排位先后，线性地分派给染色体i的选择概率。假设规定的最差染色体被选择概率为$n^-$最好为$n^+$，则每个被分配的概率为：</p><script type="math/tex; mode=display">p(i)=\frac{1}{N}\bigg(n^-+(n^+-n^-)\frac{i-1}{N-1}\bigg)</script><p>除了线性排序之外，还有指数排序等。</p><h3 id="锦标赛选择（Tournament-based-selection）"><a href="#锦标赛选择（Tournament-based-selection）" class="headerlink" title="锦标赛选择（Tournament-based selection）"></a>锦标赛选择（Tournament-based selection）</h3><p>锦标赛选择从种群中有放回地随机采样s个个体，选择其中最优的一个充当下一代父母。</p><p>通过对采样个数s改变可以调整选择压力。在s较大时，弱者被选中的概率会缩小。</p><h2 id="交叉和变异（Crossover-and-Mutation）"><a href="#交叉和变异（Crossover-and-Mutation）" class="headerlink" title="交叉和变异（Crossover and Mutation）"></a>交叉和变异（Crossover and Mutation）</h2><p>相较于变异，交叉是一种更保险的优化。</p><h3 id="交叉算子（Crossover-Operator）"><a href="#交叉算子（Crossover-Operator）" class="headerlink" title="交叉算子（Crossover Operator）"></a>交叉算子（Crossover Operator）</h3><p>交叉算子有很多，这里只有PPT上提及的几种。</p><h4 id="单点交叉（One-point-Crossover）"><a href="#单点交叉（One-point-Crossover）" class="headerlink" title="单点交叉（One-point Crossover）"></a>单点交叉（One-point Crossover）</h4><p>这种交叉是随机产生一个数字（≤染色体长度）作为交叉位置。然后，保持该位置前基因不变，该位置后的基因换位。</p><p>举个例子，假设该随机位置为2：父母1：7 3 | 7 6 1 3；父母2: 1 7 | 4 5 2 2</p><p>单点交叉后：孩子1：7 3 | 4 5 2 2；孩子2：1 7 | 7 6 1 3</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/df1d0ebd5618a8b62e919b6d98f834e1.gif" alt="在这里插入图片描述"></p><h4 id="两点交叉（Two-point-Crossover）"><a href="#两点交叉（Two-point-Crossover）" class="headerlink" title="两点交叉（Two-point Crossover）"></a>两点交叉（Two-point Crossover）</h4><p>这种交叉与单点交叉类似，不同之处在于必须选择两个位置，并且只交换两个位置之间的基因。</p><p>举个例子，假设该随机位置为2，4：父母1：7 3 | 7 6 | 1 3；父母2: 1 7 | 4 5 | 2 2</p><p>两点交叉后：孩子1：7 3 | 4 5 | 1 3；孩子2：1 7 | 7 6 | 2 2</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/f8cb80376cbf75a3e61ef934ea3f36d8.gif" alt="在这里插入图片描述"></p><h4 id="均匀交叉"><a href="#均匀交叉" class="headerlink" title="均匀交叉"></a>均匀交叉</h4><p>遍历整个染色体，染色体中的每个基因都有一定概率与另一个染色体进行交叉。概率的代码实现可以是随机生成一个0-1之间的数，当该生成的数小于概率阈值时，不发生交叉，大于时，发生交叉。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/d4645beacbaa48faf436a716c598be8d.gif" alt="在这里插入图片描述"></p><h3 id="倒置算子（Inversion）"><a href="#倒置算子（Inversion）" class="headerlink" title="倒置算子（Inversion）"></a>倒置算子（Inversion）</h3><p>将某个染色体上随机选择的两个基因交换顺序。这种操作来源于真实的生物进化。</p><p>例如：染色体为：3 8 4 8 6 7； 选择第二个和第五个，变异后为：3 6 8 4 8 7</p><h3 id="变异算子（Mutation-operators）"><a href="#变异算子（Mutation-operators）" class="headerlink" title="变异算子（Mutation operators）"></a>变异算子（Mutation operators）</h3><p>变异算子和均匀交叉类似，但是它是对bit的操作，它让染色体上的某一位bit有一定概率翻转。</p><h2 id="淘汰机制（Survivor-Selection-Mechanism）"><a href="#淘汰机制（Survivor-Selection-Mechanism）" class="headerlink" title="淘汰机制（Survivor Selection Mechanism）"></a>淘汰机制（Survivor Selection Mechanism）</h2><p>淘汰机制是用来保证不会出现一些“非法答案”。也就是那些错得太离谱的答案，需要通过淘汰机制淘汰掉。与上面的亲本选择机制不一样，这种淘汰机制是决定性的，并不会给低于这种阈值的个体人体机会。</p><p>这一步属于繁殖（Reproduction）。繁殖可以分为两种：世代复制（Generational Reproduction）和稳态复制（Steady-state Reproduction）</p><p><strong>世代繁殖：</strong>在这种模式下，旧的种群会完全被新的种群顶替。根据当前的选择规则，会选出两个染色体为父母，经过交叉变异产生两个孩子，直到产生出N个孩子作为新的种群，<strong>新的种群将完全替代旧种群</strong>。因此如果共有N条染色体，该繁殖操作就会循环N/2次。</p><p><strong>稳态复制：</strong>这种方法根据当前选择机制来选择两个染色体作为父母，同样地对他们交叉-变异来获得一个或者两个后代。但后续会<strong>将孩子重新放入原种群中，替换掉原种群中适应度较低的个体（具体替换取决于替换算法）</strong>；</p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part1-Introduction</title>
      <link href="/posts/654e0eae.html"/>
      <url>/posts/654e0eae.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="看来您不属于攻略组,请等待笔记验证后发布" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e90a37883fe6b45ccf039fe71d4123e1f6fd86c7854a0b1f5c24cef8d77160b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">阿尔戈在迷宫区搜集到的零碎攻略信息,还在整理...</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> private </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part2.1-Introduction</title>
      <link href="/posts/d8f253d7.html"/>
      <url>/posts/d8f253d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="人类视觉系统"><a href="#人类视觉系统" class="headerlink" title="人类视觉系统"></a>人类视觉系统</h1><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230191926446.png" alt="image-20241230191926446" style="zoom: 67%;" /></p><p>在自然界中，可见光只在全谱段中的非常小一段。但是图像处理是针对于全光谱而言的。</p><h2 id="人眼系统"><a href="#人眼系统" class="headerlink" title="人眼系统"></a>人眼系统</h2><h3 id="感光细胞"><a href="#感光细胞" class="headerlink" title="感光细胞"></a>感光细胞</h3><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230192124732.png" alt="image-20241230192124732" style="zoom:50%;" /></p><p>人眼系统如上图所示，眼中视网膜上有视椎细胞（Cones）和视杆细胞（Rods）两种。视椎细胞对颜色和黑暗（Dark）敏感；视杆细胞对明光（Brightnes）敏感。</p><p>从上图可以看到，视椎细胞在中心分布较多，这就是为什么人眼在看东西时希望把东西放在眼中心，因为该处视椎细胞更多，可以更好地感知物体。视杆细胞在整个视网膜上都有分布，这就是为什么余光可以感知到周围的东西。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230193356371.png" alt="image-20241230193356371" style="zoom:67%;" /></p><p>这张图是Weber ratio，它说明人眼在低亮度条件下，需要更大的光强差异才能感知到差异（也就是上图左边的$\Delta I$）；但在亮光环境下，只需要很小的亮度差异就可以感知到（右侧的$\Delta I$）</p><h3 id="马赫带效应（Mach-band-effect）"><a href="#马赫带效应（Mach-band-effect）" class="headerlink" title="马赫带效应（Mach band effect）"></a>马赫带效应（Mach band effect）</h3><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230193645467.png" alt="image-20241230193645467"></p><p>人眼在观察两块亮度不同的区域时，边界处亮度对比加强，使轮廓表现得特别明显。如上图所示，当你观察上图时，会感觉每一个灰度小格子的左侧都比右侧亮。</p><h1 id="相机成像"><a href="#相机成像" class="headerlink" title="相机成像"></a>相机成像</h1><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230194531784.png" alt="image-20241230194531784" style="zoom:67%;" /></p><p>相机成像可以被看成两个过程：sampling 和 quantization。sampling过程发生在连续的图像被投影在有限的传感器矩阵上时，被使用有限的像素点表示了。而quantization发生在感光器件输出的值被ADC采集，转化为有限的数字比特时。例如一个8bit ADC就可以产生0-255种明度值。</p><p>数字图像的分辨率一般是像素x像素，例如500x500表示横轴500个像素纵向500个像素。但是这样表示无法将像素与现实的画面大小对应，就算分辨率再小，现实只显示很小一张图，你也会觉得是高清无码。因此有了DPI（Dois Per Inch）这个单位。DPI指指每一英寸长度中，取样、可显示或输出点的数目，DPI越高视觉清晰度越高。</p><h1 id="图像基本操作"><a href="#图像基本操作" class="headerlink" title="图像基本操作"></a>图像基本操作</h1><h2 id="邻接关系（adjacency）"><a href="#邻接关系（adjacency）" class="headerlink" title="邻接关系（adjacency）"></a>邻接关系（adjacency）</h2><p>当一个像素位于另一个像素的上下左右四个方向时，则成这两个像素满足4邻接关系</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230202950349.png" alt="image-20241230202950349"></p><p>当一个像素位于另一个像素斜上、下、左、右或正、下、左、右方向时，称其满足8邻接关系</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230203055925.png" alt="image-20241230203055925"></p><h2 id="多帧降噪"><a href="#多帧降噪" class="headerlink" title="多帧降噪"></a>多帧降噪</h2><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230203723471.png" alt="image-20241230203723471" style="zoom:50%;" /></p><p>上图这样的图片有很多高斯噪声，但是因为高斯噪声是平均分布于画面的，因此拍摄多张照片，然后求像素值的平均值，可以很好地消除噪声。</p><h2 id="仿射变换（Affine-Transformation）"><a href="#仿射变换（Affine-Transformation）" class="headerlink" title="仿射变换（Affine Transformation）"></a>仿射变换（Affine Transformation）</h2><p>仿射变换是线性变换和平移变换的叠加。仿射变换变化包括<strong>缩放</strong>、<strong>平移</strong>(transform)、<strong>旋转</strong>(rotate)、<strong>镜像</strong>（reflection）、<strong>错切</strong>(shear)等等。下图是仿射变换的各效果图</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230204338986.png" alt="image-20241230204338986" style="zoom:67%;" /></p><p>仿射变换有一个仿射矩阵(Affine Matrix) A，这是一个3x3的矩阵，只需要将某一像素点在空间中的坐标（如果是二维平面，则默认Z=1, 即输入矩阵为[x, y, 1]’）乘上A，即可得到这个点转换后的坐标。</p><p>使用上图的Scaling/Reflection矩阵做一个例子。假设需要将图像沿X轴镜像，并将Y轴压缩为原来0.5倍，则仿射矩阵应该填为：</p><script type="math/tex; mode=display">\left[\begin{array}{ccc}-1 & 0 & 0\\0 & 0.5 & 0\\0& 0 & 1\end{array}\right]</script><p>然后让坐标为(x,y)的乘以该仿射矩阵，得到变换后的坐标值（每一个像素都需要经过这个操作）</p><script type="math/tex; mode=display">\left[\begin{array}{ccc}-1 & 0 & 0\\0 & 0.5 & 0\\0& 0 & 1\end{array}\right]\times\left[\begin{array}{ccc}x\\y\\1\end{array}\right]</script><p>按照矩阵乘法规则可知：$x’=-x$，$y’=0.5y$，至此便实现了X轴镜像，Y轴压缩为0.5倍。</p><div class="note info flat"><p>这个视频用动画演示了各个变换的效果：<a href="https://www.bilibili.com/video/BV1254y1h7R7/?spm_id_from=333.337.search-card.all.click">【双语字幕】什么是仿射变换？_哔哩哔哩_bilibili</a></p></div><div class="note info flat"><p>如果需要连续变换，例如先缩放再旋转，直接将两个变换矩阵相乘即可</p></div>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part1-模糊系统</title>
      <link href="/posts/95a89a4e.html"/>
      <url>/posts/95a89a4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在前面的ANN中，机器可以自己通过学习来找到“机器认为”的答案。</p><p>但是在现实世界中也有一群专家，他们解决问题靠的是“已有知识”，他们先学习并储备了一些知识库，在遇到对应问题的时候就调用对应的知识库。</p><p>将这种解决问题的方式在计算机中进行描述和调用，就是所谓模糊系统（Fuzzy System）。</p><p>但是专家在判断是什么问题时，通常接受的是模糊的描述。例如这个人非常高，那么你大可能觉得这个人在一米八往上接近一米九。说这个天很热按你大可能觉得现在有30度往上。这些描述都是基于人类语言的模糊描述，指明的是大概率的一个区间。同样地，在解决问题上，专家也是靠着不精确的输入，去猜测套用什么方法解决的可能性最大，然后去尝试。</p><p>但是这样就出现问题了，计算机使用的是布尔逻辑，即非黑即白的逻辑，它可以以180为一个界限，认为180以上的人算作高，180以下的人算作矮，但是如果有一个人有179,它其实也是算高的，但是会被传统的布尔逻辑和160判到一桌上去。</p><h3 id="模糊逻辑，模糊集和隶属度"><a href="#模糊逻辑，模糊集和隶属度" class="headerlink" title="模糊逻辑，模糊集和隶属度"></a>模糊逻辑，模糊集和隶属度</h3><p>模糊系统就是为了来解决这个问题的，它提出了“模糊逻辑（fuzzy logic）”的概念，在模糊逻辑下，事情不是非黑即白，而是具有一定概率的。</p><p>在数学上，集合的定义是由一个或多个确定的元素所构成的整体。个子高的人就可以被视作一个集合，个子矮的就是另一个集合。在传统集合的定义下，一个人要么属于个子高这个集合，要么属于个子矮。但是模糊集允许它同时部分属于这两个集合（使用概率描述），例如下面这个里例子，179的人有0.78的概率属于高个子的人，而不是二值逻辑那样直接判定为和152坐一桌了。模糊系统相较于布尔系统，能提供更精确的分类。</p><p>与传统集有边界条件一样，模糊系统也有边界条件，即某一条件数值和隶属于这个集合的“度”的关系。例如下面这个例子：<strong>将这种隶属于身高的群体的概率，称为隶属度（degrees of membership）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224113438821.png" alt="image-20241224113438821" style="zoom: 67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240918161130002.png" alt="image-20240918161130002"></p><p>通常，为了方便，将某一元素针对某些模糊集的隶属度记为：</p><script type="math/tex; mode=display">A=\mu_A(x_i)/x_i+...+\mu_A(x_i)/x_i</script><p>其中，$\mu_A(x_i)$模糊集A在点$x_i$上的隶属度</p><h3 id="语言变量（linguistic-variables）"><a href="#语言变量（linguistic-variables）" class="headerlink" title="语言变量（linguistic variables）"></a>语言变量（linguistic variables）</h3><p>因为fuzzy system是专家系统，因此有一些使用人类语言描述的“经验主义”条件。例如“风浪越大，鱼越贵”就可以表示为：</p><p>IF wind is strong, THEN price is high</p><p>这样的表达式被称为语言变量（linguistic variables）。</p><h3 id="语言限定词-linguistic-Hedges"><a href="#语言限定词-linguistic-Hedges" class="headerlink" title="语言限定词(linguistic Hedges)"></a>语言限定词(linguistic Hedges)</h3><p>人类在自然语言描述东西时，还会加入一些修饰词，例如very, extremely, slightly这样的。这些词被称为hedges。</p><p>这些词可能让模糊集的边界变得非线性，例如说一个人extremely high，可能它是190+，从185+到190+就上升了5cm，但是能到190+的人却很少。下图就是这样的一个例子，被hedges修饰之后，每个模糊集合的边界不再是之前的线性边界。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224122454228.png" alt="image-20241224122454228" style="zoom: 50%;" /></p><p>下面是一些常用的修饰词和他们对应的边界函数：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224122705951.png" alt="image-20241224122705951" style="zoom: 67%;" /></p><h1 id="模糊集的基本计算和性质"><a href="#模糊集的基本计算和性质" class="headerlink" title="模糊集的基本计算和性质"></a>模糊集的基本计算和性质</h1><p>与传统的集合有交集、补集、并集等等计算，包含、不包含等关系一样，模糊集也有一套计算规则和自己的性质。</p><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><h3 id="补集（complement）"><a href="#补集（complement）" class="headerlink" title="补集（complement）"></a>补集（complement）</h3><p>传统的求补是求不属于集合A的元素。类似的，模糊集的求补是求不属于集合A的元素的概率，因此补的定义为：</p><script type="math/tex; mode=display">1-\mu_A(x)</script><p>图像上来看是：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224130142095.png" alt="image-20241224130142095"></p><p>可以看到，当属于集合A概率为1时，不属于集合A的概率为0。属于集合A的概率为0时，不属于集合A的概率为1。</p><h3 id="交集-Intersection"><a href="#交集-Intersection" class="headerlink" title="交集(Intersection)"></a>交集(Intersection)</h3><p>传统集合定义中，元素某一范围内既属于集合A，又属于集合B的部分被称为交集，其边界同时被A和B约束。类似地，如果一个元素在某一范围内可以部分属于A，又部分属于B，其隶属度同时被A和B约束，则该范围就是A与B的交集。图像上是下图：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224125712878.png" alt="image-20241224125712878"></p><p>从上图可以看到，交出来的部分被A和B中隶属度较小的一方所约束，因此计算表达式为：</p><script type="math/tex; mode=display">\mu A\cap B(x) = \mu A(x)\cap \mu B(x) = min[\mu A(x),\mu B(x)]</script><h3 id="并集-Union"><a href="#并集-Union" class="headerlink" title="并集(Union)"></a>并集(Union)</h3><p>传统集合定义中，并集是指某一元素在该范围内属于A或B任意一方或双方。类似的，在模糊集中，并集是指的在A或B任意一方隶属度范围之内。图像上看是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224130714467.png" alt="image-20241224130714467" style="zoom: 67%;" /></p><p>并出来的部分被A或B中拥有较大隶属度的一方所约束，因此其计算表达式为：</p><script type="math/tex; mode=display">\mu A\cup B(x) = \mu A(x)\cup \mu B(x) = max[\mu A(x),\mu B(x)]</script><h2 id="模糊集的特性定义"><a href="#模糊集的特性定义" class="headerlink" title="模糊集的特性定义"></a>模糊集的特性定义</h2><h3 id="等价-Equality"><a href="#等价-Equality" class="headerlink" title="等价(Equality)"></a>等价(Equality)</h3><p>传统集合中当A集合和B集合完全重叠时，说A和B集合等价。而在模糊集里面，当某一元素在集合A的各项元素中的隶属度完全等于集合B时，则集合AB等价。例如$A=0.3/1+0.5/2+1/3$，$B=0.3/1+0.5/2+1/3$</p><h3 id="包含-Inclusion-Containment"><a href="#包含-Inclusion-Containment" class="headerlink" title="包含(Inclusion/Containment)"></a>包含(Inclusion/Containment)</h3><p>传统集合的对包含的定义是A集合完全在B中。类似地，如果某一元素对A集合在定义区间内的所有元素的隶属度小于B集合，那么A集合就是B集合的子集。图像上看起来是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224124559102.png" alt="image-20241224124559102" style="zoom: 50%;" /></p><p>A和B两个大集合内可以有多个元素（也就是特定点的值），体现元素上就是某一元素在集合A下，对各个元素的隶属度均小于等于对B的。数学表达式为$\mu_A(x)\leq\mu_B$。例如$A={0.3/1+0.5/2+1/3},B={0.5/1+0.55/2+1/3},A\subseteq B$</p><h3 id="基数-cardinality"><a href="#基数-cardinality" class="headerlink" title="基数(cardinality)"></a>基数(cardinality)</h3><p>传统集合的基数指的是一个集合内有多少个元素，也称为势。在一个集合内有3个元素，那么该集合的基数就是3。模糊集的基数是指的某一模糊集内各元素隶属度的和。</p><p>例如$A={0.3/1+0.5/2+1/3}$，则A的基数$card_A=0.3+0.5+1=1.8$；$A={0.5/1+0.55/2+1/3}$，则B的基数$card_B=0.5+0.55+1=2.05$</p><h3 id="空模糊集-Empty-Fuzzy-Set"><a href="#空模糊集-Empty-Fuzzy-Set" class="headerlink" title="空模糊集(Empty Fuzzy Set)"></a>空模糊集(Empty Fuzzy Set)</h3><p>当某个集合不隶属于元素时，它是空模糊集，也就是$\mu_A(x)=0$，例如$A={0/1+0/2+0/3}$</p><h3 id="截集-alpha-cut"><a href="#截集-alpha-cut" class="headerlink" title="截集(alpha-cut)"></a>截集(alpha-cut)</h3><p>一个模糊集合的截集（alpha-cut）指的是这个集合内各元素隶属度大于某个阈值的部分，使用$集合_{阈值}$的格式来表达。模糊集存在半隶属的定义，而其截集却是一个经典集合，只存在隶属和不隶属的关系。下图展示了模糊集A的在阈值$\lambda$下的截集。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224151032100.png" alt="image-20241224151032100" style="zoom:67%;" /></p><p>例如假设有模糊集$X=\{1,2,3\}$，模糊集A是X的子集，$A=\{0.3/1+0.5/2+1/3\}$</p><p>则对A的alpha-cut是：</p><p>$A_{0.5}=\{2,3\}$</p><p>$A_{0.1}=\{1,2,3\}$</p><p>$A_{1}=\{3\}$</p><h3 id="模糊集的正规性-normality-和高度（height）"><a href="#模糊集的正规性-normality-和高度（height）" class="headerlink" title="模糊集的正规性(normality)和高度（height）"></a>模糊集的正规性(normality)和高度（height）</h3><p>如果在一个模糊集内，有一个元素的隶属度达到1（最大隶属度），则称该模糊集是正规的（normal），否则称为非正规（subnormal)。下图是正规模糊集（A）和非正规模糊集（B）的隶属函数图。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224145849315.png" alt="image-20241224145849315" style="zoom: 50%;" /></p><p>同时，在模糊集内拥有最高隶属度的元素被称为该模糊集的高度(height)，$height(A)=max_x(\mu_A(x))$</p><h3 id="支集（Support），核（Core）和边界（Bound）"><a href="#支集（Support），核（Core）和边界（Bound）" class="headerlink" title="支集（Support），核（Core）和边界（Bound）"></a>支集（Support），核（Core）和边界（Bound）</h3><p>支集(support)：模糊集内隶属度不为0的元素，中文又称支撑集。</p><p>核(Core)：模糊集内隶属度为1的元素</p><p>边界(Bound)：模糊集内隶属度位于0-1之间的元素</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224145636137.png" alt="image-20241224145636137" style="zoom:50%;" /></p><p>例如$A=\{1/a,0.3/b,0.2/c,0.8/d,0/e\}$</p><ul><li>支集：$supp(A)=\{a,b,c,d\}$</li><li>核心：$core(A)=\{a\}$</li><li>边界：$bound(A)=\{b,c,d\}$</li></ul><h2 id="模糊集的数学运算"><a href="#模糊集的数学运算" class="headerlink" title="模糊集的数学运算"></a>模糊集的数学运算</h2><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>假设系数为a，对于模糊集A，$aA=\{a\mu A(x)\}$。</p><p>例如a=0.5, $A=\{0.5/a,0.3/b,0.2/c,1/d\}$，$aA=\{0.25/a,0.15/b,0.1/c,0.5/d\}$</p><h3 id="平方"><a href="#平方" class="headerlink" title="平方"></a>平方</h3><p>假设指数为a，对于模糊集A，$A^a={\mu_A(x)^a}$</p><p>例如a=0.5, $A=\{0.5/a,0.3/b,0.2/c,1/d\}$，$A^a=\{0.25/a,0.09/b,0.04/c,1/d\}$</p><h3 id="逻辑运算：与或非"><a href="#逻辑运算：与或非" class="headerlink" title="逻辑运算：与或非"></a>逻辑运算：与或非</h3><p><strong>Max-Min逻辑组合法</strong></p><p>对于传统的集合，与运算等于求交集，或运算等于求并集，非运算等于求补集。同样的，对于模糊逻辑也是如此。</p><p>也就是说，按照前面的介绍的求交并补的规则：</p><ul><li>AND就是求A和B中隶属度较小的一个（min）</li><li>OR就是求A和B中隶属度较大的一个（max）</li><li>NOT就是求A的补集（$1-\mu A(x)$）</li></ul><p>这样的求法是max/min组合法，是最常用且简单，后续介绍的<strong>Max-Min inference</strong>就是基于该种组合。除了这个之外，还有其他的逻辑算法。例如集合取交集的算法（统称T-norm）就有minimum T-norm(也就是上面提到的取最小值)，product T-norm（也就是交集是两个集合实数的点乘），Lukasiewicz T-norm（$max\{0,a+b-1\}$）。</p><h1 id="模糊系统设计"><a href="#模糊系统设计" class="headerlink" title="模糊系统设计"></a>模糊系统设计</h1><p>一个模糊系统的需要将数据数据根据模糊规则分析之后，得到一个输出；其中根据模糊规则分析这一步可以拆分为两个部分：将输入的模糊逻辑根据逻辑规则库组合，再将其的结果映射到输出的模糊逻辑。这意味着模糊系统需要以下四个步骤：</p><ol><li>输入模糊化（Fuzzification）</li><li>套用规则库（Rule evaluation）</li><li>模糊输出逻辑聚合（Aggregation/composition）</li><li>去模糊化（Defuzzification）</li></ol><h2 id="模糊推理流程（以Mamdani-style推理为例）"><a href="#模糊推理流程（以Mamdani-style推理为例）" class="headerlink" title="模糊推理流程（以Mamdani-style推理为例）"></a>模糊推理流程（以Mamdani-style推理为例）</h2><p>理论比较抽象。MATLAB的fuzzy system 给出了一个例子，非常形象：由餐厅的服务质量和食物质量来推算将获得多少比例的小费。在这个例子中，认为小费和有两个输入有关：食物和服务质量。</p><h3 id="输入模糊化"><a href="#输入模糊化" class="headerlink" title="输入模糊化"></a>输入模糊化</h3><p>这个过程是对输入数据进行量化，一般由统计学得到或专家/经验主义给出。</p><p>在这个例子中，对食物量化为<code>delicious</code>,<code>fine</code>,<code>rencid</code>三种品质；对服务量化<code>excellient</code>,<code>good</code>,<code>poor</code>三种品质。然后通过统计学去统计某一等级的食物有多少百分比的人认为好吃，多少百分比认为还行，多少百分比认为不好吃；服务同理。将统计学得到的数据拟合为连续的函数，即可得到下图的隶属度函数。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224162859098.png" alt="image-20241224162859098"></p><p>现在有一个质量等级为7的食物在服务等级为8的餐厅。根据上述隶属度函数，则各项隶属度为：</p><ul><li>delicious: 0.45;  fine: 0.55;  rancid: 0;</li><li>excellent: 0.38;  good: 0.15;  poor: 0;</li></ul><h3 id="套用规则库"><a href="#套用规则库" class="headerlink" title="套用规则库"></a>套用规则库</h3><p>根据经验主义假设的规则库有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IF service IS poor OR food IS rancid   THEN   tip IS low</span><br><span class="line">IF service IS good  THEN   tip IS avergae</span><br><span class="line">IF service IS excellent OR food IS delicious  THEN  tip IS high</span><br></pre></td></tr></table></figure><p>按照前面逻辑组合运算章节的介绍，对上述规则使用Max-Min inference来转化为输出模糊逻辑：</p><ul><li>low = max(poor, rancid) = max(0,0) = 0</li><li>average = good = 0.15</li><li>high = max(0.38, 0.45) = 0.45</li></ul><p>因此，输出low的隶属度为0，属于average的隶属度为0.15，属于high的隶属度为0.45。</p><h3 id="输出逻辑的与聚合"><a href="#输出逻辑的与聚合" class="headerlink" title="输出逻辑的与聚合"></a>输出逻辑的与聚合</h3><p>输出模糊集Z有三个元素：low，average，high。根据经验/统计学，认为小费最最低是0元，最高为30元，模糊集的隶属度函数如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224175710229.png" alt="image-20241224175710229" style="zoom: 50%;" /></p><p>此时这个输入对这三个元素的隶属度分别为0, 0.15, 0.45。现在需要将这三个隶属度聚合为一个完整的图像。</p><p>有两种常用的方法，一种是clipping, 一种是scaling。clipping就是指直接填充原隶属度函数，例如对C2的隶属度是0.2，那么就直接把C2填充的0.2的位置。scaling是将原有隶属度函数等比例缩放，在0.2这个例子下，就是将原来的高度缩减为0.2倍。如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224172655076.png" alt="image-20241224172655076"></p><p>裁剪的计算更简单（特别是在去模糊化的时候），但会导致一部分信息丢失。缩放可以更好的保留原始形状，丢失信息较少，在模糊专家系统中非常有用。</p><p>这里以裁剪为例继续。</p><p>在将每一个元素的隶属度图像求出来后，将他们拼合在一起，就完成了输出逻辑聚合。如下图所示，给low填充0%，average填充15%，high填充45%，然后拼合在一起得到右侧图像。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224173237897.png" alt="image-20241224173237897"></p><h3 id="去模糊化"><a href="#去模糊化" class="headerlink" title="去模糊化"></a>去模糊化</h3><p>我们得到了输出的模糊逻辑图像，但是最后的输出需要是一个精确的数字，例如这次小费将会达到前80%的水平这样的数字。因此还需要将该图像去模糊化为一个精确数字。</p><p>同前面一样，去模糊化也有很多方式，最常用的是求质心点(centre of gravity)的方法。在上图这样的二维图像中，求质心点的通式为：</p><script type="math/tex; mode=display">COG=\frac{\int_a^b\mu_A(x)xdx}{\int_a^b\mu_A(x)dx}</script><p>其中隶属度$\mu_A(x)$被抽象为了密度，可以想象图像是一条具有不同密度的线。</p><p>用一个离散的例子可以更好地观察这个公式：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224174935063.png" alt="image-20241224174935063" style="zoom: 50%;" /></p><p>最后可以计算得出，得到的小费将可能会是20.2%</p><h2 id="Sugeno推理"><a href="#Sugeno推理" class="headerlink" title="Sugeno推理"></a>Sugeno推理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>上述这种输出模糊集同输入一样，使用隶属函数描述的被称为Mamdani推理。与之相对的还有一种Sugeno推理方式。在Sugeno的定义中，输出逻辑不再是一个函数，而是一个常数。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF x IS A AND y IS B  THEN  z IS k</span><br></pre></td></tr></table></figure><p>其中k是常数。</p><p>在Sugeno推理下，输出逻辑的聚合完全遵照clipping法则，如下图所示。</p><p>条件1：A3 OR B1 = max (0.0, 0.1) = 0.1，则将THEN的常数k1填充到0.1；其余条件同理</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224180135644.png" alt="image-20241224180135644"></p><p>在去模糊化时，直接将他们加权求平均（Weighted Average, WA）即可，其中k1,2k,k3的值就是该点的权重，隶属度是该点的量，如下所示：</p><script type="math/tex; mode=display">WA=\frac{\mu(k1)\times k1+\mu(k2)\times k2+\mu(k3)\times k3}{\mu(k1)+\mu(k2)+\mu(k3)}</script><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224180418519.png" alt="image-20241224180418519"></p><h3 id="与Mamdani的差异"><a href="#与Mamdani的差异" class="headerlink" title="与Mamdani的差异"></a>与Mamdani的差异</h3><p>相较于Sugeno，mandani可以能够以更直观、更人性化的方式描述专业知识。然而，Mamdani型模糊推理需要大量的计算负担。</p><p>Sugeno方法在计算上效率很高，并且可以很好地嵌入优化和自适应技术，这使得它在控制问题中非常有吸引力，特别是对于动态非线性系统。</p><h1 id="自适应神经模糊推理系统"><a href="#自适应神经模糊推理系统" class="headerlink" title="自适应神经模糊推理系统"></a>自适应神经模糊推理系统</h1><p>在前面提到，NN可以根据自我学习进化。而fuzzy system依托于fuzzy rules则是统计或经验模型，这使得其是一个不可改变的系统。而自适应神经模糊推理系统(Adaptive Neuro-Fuzzy Inference System, ANFIS)则结合了二者优点，又可以接受模糊的输入，又可以自我学习进化。</p><p>回顾一下fuzzy system, 它的输入又统计学或经验模型进行模糊化，然后使用Min-Max或T-norms之类的逻辑运算规则，依照rules将输入映射至模糊输出，最后聚合输出并去模糊化求出数值。</p><p>ANFIS与传统模糊系统有差异，它的模糊化操作并不是根据统计学或经验模型直接得出的，而是使用训练数据集自我习得的。rules也并非人为指定，而是具备所有输入rules的两两组合，例如有x和y两个输入，x 和 y分别有(A1 A2) 和 (B1 B2)两个元素，则rules就有A1 AND B1, A1 AND B2, A2 AND B1, A2 AND B2四种。输入到输出模糊集的映射，也就是THEN后面的东西也并非人类指定，而是自我学习完成。下面将会详细介绍。</p><p>下图是一个经典的2输入2 rules ANFIS模型。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224202304376.png" alt="image-20241224202304376"></p><p><strong>layer1（自适应层）：</strong>输入模糊化层。该层会预设一个贝尔函数(Bell function)作为隶属函数，其通式为</p><script type="math/tex; mode=display">\frac{1}{1+\bigg|\frac{x-c_i}{a_i}\bigg|^{2b_i}}</script><p>图像如下所示。其中$a_i,c_i,b_i$被称为”Premise Parameters”会根据训练数据使用在后向传输使用梯度下降法（Gradient Descent）自我学习，以改变隶属函数形状。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241224202610029.png" alt="image-20241224202610029"></p><p><strong>layer2（固定层）:</strong>触发强度层。该层会计算layger1中所有rule的两两AND组合，输出其“强度”。其AND运算并非之前介绍的minimum T-norm 法则，而是product T-norm法则，product T-norm直接计算两个集合值的实数乘机。例如上图$w1=A1\cdot B1$，如此计算得到的便是强度</p><p><strong>layer3（固定层）:</strong>触发强度归一化层。该层旨在将第二层得到的强度数据归一化。以上图举例，归一化的公式为：</p><script type="math/tex; mode=display">O_{3,i}=\overline w_i=\frac{w_i}{w_1+w_2}, i =1,2</script><p>其中$O_{3,i}$表示第三层的第i个output，例如$O_{3,1}=\frac{w_1}{w_1+w_2}$</p><p><strong>layer4（自适应层）：</strong>计算规则输出层，该层使用上一层输出的$w_i$乘上函数$f_i$。$f_i$是一个自学习的函数，其通式为</p><script type="math/tex; mode=display">f_i=c_0+c_1x_1+c_2x_2+...c_nx_n</script><p>对于上面合格例子，其式子就是$f_i=p_ix+q_iy+r_i$。其中$p_i,q_i,r_i$被称为consequent parameters，是训练优化的对象；x和y是输入的数据的值,。该层在前向传输时，使用LSE进行训练。</p><p><strong>layer5（固定层）：</strong>去模糊化层，该层将4层的结果加起来，直接输出。</p><script type="math/tex; mode=display">O_{5,i}=\sum_i\overline w_if_i</script><div class="note info flat"><p>这里的梯度下降法和LSE还可以换成其他的优化算法</p></div><h1 id="模糊关系"><a href="#模糊关系" class="headerlink" title="模糊关系"></a>模糊关系</h1><h2 id="模糊关系矩阵"><a href="#模糊关系矩阵" class="headerlink" title="模糊关系矩阵"></a>模糊关系矩阵</h2><h3 id="模糊关系矩阵的求法"><a href="#模糊关系矩阵的求法" class="headerlink" title="模糊关系矩阵的求法"></a>模糊关系矩阵的求法</h3><h3 id="多层模糊关系矩阵压缩"><a href="#多层模糊关系矩阵压缩" class="headerlink" title="多层模糊关系矩阵压缩"></a>多层模糊关系矩阵压缩</h3><p>试想一下，已知“逆天”和“玩原神”之间存在一层模糊关系1，“玩原神”和“米孝子”之间存在一层模糊关系2。那么是否可以将关系1和关系2合起来表达，使得可以通过输入“逆天”的成分推断“米孝子”的成分？</p><p>这样合二为一的矩阵被称为模糊关系矩阵。在没有模糊关系矩阵时，“逆天”作为输入，需要先和模糊关系1进行模糊推理，得到输出1，再将输出1输入到模糊关系2，得到最终输出。而有了模糊关系矩阵，直接将“逆天”输入模糊关系矩阵，即可得到最终输出。</p><p>模糊关系矩阵压缩的操作类似于矩阵乘法，只不过原本的乘和加的操作变成了模糊集逻辑操作。在max-min规则中，就是将矩阵乘法的乘号换成min，加号换成max。在max-product规则中，乘号不变，加号换成max。举个例子：</p><p><em>现有模糊关系矩阵A和B，如下：</em></p><script type="math/tex; mode=display"></script><h2 id="模糊拓展定理"><a href="#模糊拓展定理" class="headerlink" title="模糊拓展定理"></a>模糊拓展定理</h2><h2 id="模糊四则运算"><a href="#模糊四则运算" class="headerlink" title="模糊四则运算"></a>模糊四则运算</h2>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part2.2-图像压缩</title>
      <link href="/posts/62d3d37e.html"/>
      <url>/posts/62d3d37e.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="图像的冗余信息"><a href="#图像的冗余信息" class="headerlink" title="图像的冗余信息"></a>图像的冗余信息</h2><p><strong>编码冗余（encoding redundancy）</strong>:下图这个图像中，只有4种颜色，如果采用8bit色深编码，则会有252种值从未被使用。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230215117278.png" alt="image-20241230215117278" style="zoom:67%;" /></p><p><strong>空间冗余（spatial redundancy）</strong>：下图每一行都是一样的像素点，如果每一个像素都独立记录值，则会浪费很多空间。如果能记录256个像素的一条线，再记录这条线重复256次，那么将会剩下很多的空间。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230215324223.png" alt="image-20241230215324223" style="zoom:67%;" /></p><p><strong>无关信息（irrelevant information）</strong>：下图的灰度值差异很小很小，肉眼不可查（下图左）。除非使用直方图均衡等算法（下图右），否则图像信息不可见。因此其为可压缩信息。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230215606169.png" alt="image-20241230215606169"></p><h2 id="主流音视频压缩格式"><a href="#主流音视频压缩格式" class="headerlink" title="主流音视频压缩格式"></a>主流音视频压缩格式</h2><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230215714690.png" alt="image-20241230215714690"></p><h2 id="图像编码的总体流程"><a href="#图像编码的总体流程" class="headerlink" title="图像编码的总体流程"></a>图像编码的总体流程</h2><p>图像存储在设备上，可以总地分为如下几个步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230171316080.png" alt="image-20241230171316080" style="zoom: 80%;" /></p><ul><li><p>映射器（Mapper）：将原图像的$f(x,…)$变换为减少空间和时间冗余的格式，这一操作是可逆的，但并不会减少数据量。在后续介绍JPEG压缩时会介绍DCT变换。</p></li><li><p>量化器（Quantizer）：上一步中，mapper将图像转化到变换域，量化就是将变换域中的数根据存储的比特要求量化成特定值。这一过程会损失信息，如果是无损压缩，则需要舍弃这一步。</p></li><li><p>符号编码器（Symbol coder）：根据图像变换域的特性，可能会出现一些特殊的数据规则，例如内含很多个0。此时对这些数据采用特殊的编码方式，即可无损地节省很多存储空间。例如后面介绍的霍夫曼编码。</p></li></ul><h1 id="JPEG图像压缩过程"><a href="#JPEG图像压缩过程" class="headerlink" title="JPEG图像压缩过程"></a>JPEG图像压缩过程</h1><div class="note info flat"><p>可参考视频：</p><p><a href="https://www.bilibili.com/video/BV17M4y1u7Ek/?spm_id_from=333.337.search-card.all.click&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">JPEG 有损压缩 离散余弦变换 DCT 一条视频讲清楚_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1bc411q7YG?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">离散余弦变换可视化讲解_哔哩哔哩_bilibili</a></p></div><h2 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h2><p>JPEG图像是有损压缩，其利用了人眼的两个性质：对色彩不如对明度信息敏感；对细节（高频变换的图像）不敏感。</p><p><strong>色彩敏感性</strong></p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241230192124732.png" alt="image-20241230192124732" style="zoom:50%;" /></p><p>回顾前面的人眼视觉系统，人眼内有视椎细胞和视杆细胞，而根据上图的细胞分布情况，视椎细胞比视杆细胞少的多。由于视椎细胞对颜色敏感，视杆细胞对明度敏感，因此人类对颜色的察觉能力比对敏感信息的察觉能力小得多。</p><p>利用这个特性，JPEG规定RGB色彩不再使用三个RGB图层，而是分为明度（Luminance）蓝色和红色偏移量成分三个图层。<strong>这一步是独立于之前介绍的步骤之外的，这些知识与本节课内容无关，只是介绍。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/daa99295-8161-4711-bacb-c57258c93197.png" alt="daa99295-8161-4711-bacb-c57258c93197"></p><p>在这三个图层的基础上，规定明度图层全采样，剩下两个图层间隔采样。即可实现初次压缩。初次压缩后，就需要将三个图层逐次放入映射器、量化器、符号编码器。</p><p>值得一提的是，在映射器进行变换之前，图像是被切割成$n\times n$的小图进行处理的（通常是8x8）。这是由于它是用的变换（DCT算法）的特性决定的。后续将详细介绍。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231101939055.png" alt="image-20241231101939055"></p><h2 id="DCT"><a href="#DCT" class="headerlink" title="DCT"></a>DCT</h2><p>JPEG的映射器使用离散余弦变换（Discrete Cosine Transform，DCT）。</p><p>对于MxN大小的图像变换而言，其通式可以写为：</p><p>正变换：</p><script type="math/tex; mode=display">T(u,v)=\sum^{M-1}_{x=0}\sum^{N-1}_{y=0}f(x,y)r(x,y,u,v)</script><p>逆变换：</p><script type="math/tex; mode=display">f(x,y)=\sum^{M-1}_{x=0}\sum^{N-1}_{y=0}T(u,v)s(x,y,u,v)</script><p>其中$f(x,y)$为图像某一点的像素信息，$r(x,y,u,v)$和$s(x,y,u,v)$为变换矩阵。除了DCT之外，还有一种变换算法交KLT（Kahunen-Loeve Transform），KLT变换损失的信息很少，但是有这些缺点：变换矩阵与图像有关，因此不同图像就需要计算不同的变换矩阵</p><p>但是DCT的变换矩阵却是定值，而且逆变换和正变换的变换矩阵一样。因此虽然DCT会造成更多信息损失，但是JPEG还是采用DCT。</p><h3 id="图像的频率"><a href="#图像的频率" class="headerlink" title="图像的频率"></a>图像的频率</h3><p>为了更好理解现在我们只考虑明度图层，且将8x8的图像简化为一个1x8的图像，按照图像的灰度值将这一行像素绘制在坐标轴上，即可得到这样的一个“信号”</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231102644272.png" alt="image-20241231102644272" style="zoom: 67%;" /></p><p>从这里可以看出，如果明暗交替越快，信号频率就越高。我们学过离散傅里叶变换，知道任何信号都可以使用正余弦叠加来还原，那么有没有可能能用各种余弦信号拟合出这个信号呢？是可以的，这就是DCT在干的事情。和DFT一样，在DCT中，变换后的$X_0$位置存放直流信号强度，$X_7$位置存放最高频信号强度，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231102933498.png" alt="image-20241231102933498" style="zoom:67%;" /></p><p>这一部分可以参看<a href="https://www.bilibili.com/video/BV1bc411q7YG?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">离散余弦变换可视化讲解_哔哩哔哩_bilibili</a>，非常清晰。</p><h3 id="DCT原始图像"><a href="#DCT原始图像" class="headerlink" title="DCT原始图像"></a>DCT原始图像</h3><p>如果现在恢复到8x8的图像呢？那么除了横向频率之外，还有一个纵向频率。他们组合起来就得到了DCT变换域图像：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231105034665.png" alt="image-20241231105034665" style="zoom:67%;" /></p><p>从上图可以看到，左上角为直流，右下角为横向、纵向频率都最高的点。</p><h3 id="从定义式到原始图像"><a href="#从定义式到原始图像" class="headerlink" title="从定义式到原始图像"></a>从定义式到原始图像</h3><p>DCT的变换式子为：</p><script type="math/tex; mode=display">r(x,y,u,v)=\alpha(u)\alpha)(v)cos\bigg[\frac{(2x+1)u\pi}{2N}\bigg]cos\bigg[\frac{(2y+1)v\pi}{2N}\bigg]</script><p>其中$\alpha$为归一化函数，定义为：</p><script type="math/tex; mode=display">\alpha(x)=\sqrt{\frac{1}{N}}\ when \ x=0</script><script type="math/tex; mode=display">\alpha(x)=\sqrt{\frac{2}{N}}\ when \ x=1,2,...N-1</script><p>不妨带入u和v计算一下值，发现当u，v均等于0时，这是一个没有频率的直流分量。而增大u或者v，带有参数x或y的cos频率也会相应地增加。这就得到了是DCT原始图像。这也就是为什么下图横轴与v的值有关，纵轴与u的值有关。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231105034665.png" alt="image-20241231105034665" style="zoom:67%;" /></p><p>DCT式子变换的结果，就是用上面这个8x8图像去拟合输入8x8图像的参数，类似于傅里叶变换。DCT变换得到的就是DCT原始图像的强度，类似于傅里叶变换中每个频率分量的强度。原有的图像矩阵就可以变成这样一个矩阵：</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231105427858.png" alt="image-20241231105427858" style="zoom: 67%;" /></p><p>观察上面的矩阵，可以看到左上角数值偏大，而右下角数值偏低，换句话说，也就是低频信号多，高频信号低。回顾前面，我们提到选择8x8的子图像挨个变换，就是因为在8x8的图像内，像素信息不会发生太大的变化，可以确保低频信息占主导。下图是DCT后，直接逆变换回来的RMSE与其他变换算法的对比。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231105842419.png" alt="image-20241231105842419"></p><p>在前面提到，人眼对细节（即高频变换的图像）不敏感，因此在这个地方如果舍弃部分高频信息，人眼也不会察觉。至此就要进入下一步量化。</p><h2 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h2><h3 id="几种裁切遮罩"><a href="#几种裁切遮罩" class="headerlink" title="几种裁切遮罩"></a>几种裁切遮罩</h3><p>JPEG在进行量化时，会使用遮罩矩阵（mask）对DCT得到的结果进行裁切，以在量化部分剔除部分不敏感的信息（以高频分量为主）。下图的a、b、c展示了三种裁切矩阵。</p><p>a. 分区裁切（zonal mask）：保留左上角一定区域的低频信息，将右下方的高频信息剔除。</p><p>b. 分区比特分配（zonal bit allocation）：左上角低频信息用8个bit存储，越往高频比特数量越低，指导最高频不使用bit存储。</p><p>c. 阈值裁切（threshold mask）：如果某一频率信号超过某种强度，则将其保留，若小于则使其乘以0消除。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231110532163.png" alt="image-20241231110532163"></p><h3 id="量化过程实现"><a href="#量化过程实现" class="headerlink" title="量化过程实现"></a>量化过程实现</h3><p>在上面介绍的几种裁切方式中，可以发现都有效地隐去了高频分量。但是在如何在量化过程中实现裁切呢？这里给出一种使用量化表实现的例子</p><p>首先定义一个量化表（normalization matrix/ quatization table），如下图所示。各频率信号有不同的参数，低频信号参数偏小，高频信号参数偏大。下表的数值与JPEG的质量参数有关，质量越低，量化步长就越大，量化表是由JPEG标准给出的。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231111902313.png" alt="image-20241231111902313" style="zoom: 67%;" /></p><p>在量化时，使用下式：</p><script type="math/tex; mode=display">\hat T(u,v)=round\bigg[\frac{T(u,v)}{Z(u,v)}\bigg]</script><p>其中round表示四舍五入，T是变换后的原始强度值，Z是上述量化表。</p><p>举个例子，假设有一个图像变换后直流强度$T(0,0)=161$。那么按照上述量化表：</p><script type="math/tex; mode=display">\hat T(0,0)=round\bigg[\frac{T(0,0)}{Z(0,0)}\bigg]=round\bigg[\frac{161}{16}\bigg]=10</script><p>下面给出了一个真实图像经过JPEG标准量化表后得到的结果，可以看到高频几乎全为0。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/4f95807ea8cef63aef7be28be32a3944.gif" alt="img"></p><p>接下来就需要把这个矩阵存储起来。我们希望把0连续地放在一起，这样在数据结尾直接放有多少个0的标识以节省空间。因此规定量化后数组的存储顺序为下图这样的蛇形</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/c9c42a3829c9c71d4cba0f990d3ab173.gif" alt="img"></p><p>因此最后得到的数组就是：-26,-3,0,-3,-2,-6,2,-4,1,-3,0,1,5,,1,2,-1,1,-1,2,0,0,0,0,0,-1,-1,EOB</p><p>其中EOB表示这个之后全是0了。这个数组里面的一堆0可以通过霍夫曼编码有效地再次无损压缩</p><h2 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h2><p>霍夫曼编码是一种可变长编码（variable length）。它压缩数据的理念是将出现次数多的值用短长度的编码表示，出现次数少的值用长长度的编码表示。例如上面JPEG压缩后0很多，那么0就可以用单个bit的0或者1表示。例如245这个值出现次数很少，那就用诸如10011110101等等的一长串编码表示。这样就可以巧妙地减少存储空间。</p><h3 id="霍夫曼树"><a href="#霍夫曼树" class="headerlink" title="霍夫曼树"></a>霍夫曼树</h3><p>霍夫曼编码可以由霍夫曼树写出来，这里会给一个详细的例子。</p><p>假设有6个值，值分别为$a_1,a_2…a_6$，其对应的出现概率如下表</p><div class="table-container"><table><thead><tr><th style="text-align:center">a1</th><th style="text-align:center">a2</th><th style="text-align:center">a3</th><th style="text-align:center">a4</th><th style="text-align:center">a5</th><th style="text-align:center">a6</th></tr></thead><tbody><tr><td style="text-align:center">0.1</td><td style="text-align:center">0.4</td><td style="text-align:center">0.06</td><td style="text-align:center">0.1</td><td style="text-align:center">0.04</td><td style="text-align:center">0.3</td></tr></tbody></table></div><p><strong>Step1:</strong>选出出现概率最小的两个，按照左大右小放置，将他们的概率加起来作为父节点</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231125813584.png" alt="image-20241231125813584"></p><p><strong>Step2.1:</strong>将概率1的父节点概率放回原来的数组，再次挑出概率最低的两个，此时Step1 父节点、a1、a4都是0.1可以随意选2个。这里以选择Step1 父节点和a4为例。父节点和a4还是按照左高右低放置，因为这里是等于，因此可以随意左右。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231130208290.png" alt="image-20241231130208290" style="zoom:50%;" /></p><p><strong>Step2.2:</strong>将这两个组合的父节点0.2再次放回，重复上一个步骤，会选出a1=0.1和父节点=0.2。还是按照左高右低放置，父节点和它的叶在左边。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231130353819.png" alt="image-20241231130353819" style="zoom:50%;" /></p><p><strong>Step2.X:</strong>重复这个步骤，直到列表被选完。就可以得到霍夫曼树</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231130537742.png" alt="image-20241231130537742"></p><p><strong>Step3:</strong>如上图，将每个父节点的左边标记0，右边标记为1；或者左边标记为1，右边标记为0。由父节点到最后的元素挨个顺下去，从左到右挨个记录01，就是该元素的霍夫曼编码值。</p><p>例如a1这个元素，首先从最大父节点顺下来：</p><p>1 这里靠左是0；</p><p>0.6这里靠右，是1；</p><p>0.3这里靠右，是1；</p><p>因此a1的霍夫曼编码值就是011。</p><h3 id="另一种写法的霍夫曼树"><a href="#另一种写法的霍夫曼树" class="headerlink" title="另一种写法的霍夫曼树"></a>另一种写法的霍夫曼树</h3><p>下图是另一种写法的霍夫曼树：</p><ol><li>先将各个元素按照概率排列。然后将末尾2个最小概率相加得到下一列，重复这个步骤直到只剩2个概率。</li><li>然后按照靠上分配0靠上分配1（下图例子靠上分配0），挨个把加起来的概率进行展开。</li><li>当展开时，展开出的2个概率的编码前缀和其父节点（即被展开的概率）一致，并在其末尾再次分配上0下1。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231131049899.png" alt="image-20241231131049899"></p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-Part2.3-图像增强和滤波</title>
      <link href="/posts/1b10c210.html"/>
      <url>/posts/1b10c210.html</url>
      
        <content type="html"><![CDATA[<h1 id="灰度变换-像素处理"><a href="#灰度变换-像素处理" class="headerlink" title="灰度变换-像素处理"></a>灰度变换-像素处理</h1><p>像素处理是最简单、理解最直观的。是对每个像素点的值直接进行变换。像素处理可以只对图像的一部分执行。</p><p>在像素处理中，变换函数被记为T，某个像素点变换前的值为r，后的值为S，$S=T(r)$。</p><p>熟悉PS的小伙伴会知道PS里面有个曲线，这个曲线其实就是变换函数的函数图像。当曲线是下图这样时，会增强对比度。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231135958966.png" alt="image-20241231135958966" style="zoom:67%;" /></p><p>如果拖着曲线的中点朝左上或者右下移动（变成指数函数），则可以调整整体的曝光值（$s=r^\gamma$）。这里的指数参数$\gamma$就是曝光值。</p><p>如果将曲线两头反向，则图片就会反相。</p><table>    <tr>        <td><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231140041930.png"></td>        <td><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231140547438.png"></td>    </tr></table><p>当然，你也可以只对一部分亮度的图像进行增强，其变换函数图像如下</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231145610347.png" alt="image-20241231145610347"></p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231145641854.png" alt="image-20241231145641854" style="zoom:67%;" /></p><h1 id="灰度变换-直方图处理"><a href="#灰度变换-直方图处理" class="headerlink" title="灰度变换-直方图处理"></a>灰度变换-直方图处理</h1><p>直方图用于统计一张图片中各值的像素点数量。其横轴为值，纵轴为数量。可以通过直方图看出来图像的整体亮度，直方图偏高代表图像中高亮度像素较多，偏低代表低亮度像素较多。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/OIP.TzPDwwJ9QxM9sHAi_88RhwHaD1" alt="直方图 图片 的图像结果"></p><h2 id="直方图均衡"><a href="#直方图均衡" class="headerlink" title="直方图均衡"></a>直方图均衡</h2><p>从上面可以知道，直方图偏高或者偏低都有问题，能让它均匀分布才能创造不死黑，不过曝，对比度正常的图像，如下图。因此需要进行直方图均衡。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231141110915.png" alt="image-20241231141110915" style="zoom: 67%;" /></p><h3 id="归一化的直方图"><a href="#归一化的直方图" class="headerlink" title="归一化的直方图"></a>归一化的直方图</h3><p>对于一个分辨率为MxN的图像，其值为$r_k$的像素个数为$n_k=h(r_k)$，则每个值出现的概率为</p><script type="math/tex; mode=display">p(r_k)=\frac{h(r_k)}{MN}=\frac{n_k}{MN}</script><p>其中k为k个值，例如8bit图像k就位0-255。</p><p>这样就可以求到归一化的直方图，其实就是求到了图像像素值的概率分布函数，用连续函数的话来说就是概率密度函数（PDF）。</p><h3 id="直方图均衡函数及其证明"><a href="#直方图均衡函数及其证明" class="headerlink" title="直方图均衡函数及其证明"></a>直方图均衡函数及其证明</h3><p>那么有没有一种变换函数T，在对所有像素执行了$S=T(r)$之后，可以把左边这样的PDF转化为右边这样的均匀分布PDF呢？</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231150901874.png" alt="image-20241231150901874" style="zoom: 67%;" /></p><p>要想让它均匀，形象一点地理解就是分布得少的地方少动一点，把分布地多的地方往两边匀。如果使用概率分布函数（CDF）的值作为调整的系数，好像恰好就可以实现这一点。在分布较多的区域内，较低值CDF值较小，像素值会往小了调整；但是较高值的CDF值会陡然增大，此时像素值经过变换函数就会往大了调整。这样就实现了分布相似值的像素朝两边匀开。</p><p>因此有了下面这个函数：</p><script type="math/tex; mode=display">s=T(r)=(L-1)\int^r_0p_r(w)dw</script><p>其中$\int^r_0p_r(w)dw$就是求了当前像素值的概率分布函数。这个函数能使直方图均匀分布的数学证明如下：</p><p>首先，根据概率论有结论：如果$p_r(r)$和$T(r)$已知，$S=T(r)$，$T(r)$连续且可导，则有：</p><script type="math/tex; mode=display">p_s(s)=p_r(r)\bigg|\frac{dr}{ds}\bigg|</script><p>将$s=T(r)$对r求导：</p><script type="math/tex; mode=display">\frac{ds}{dr}=\frac{d}{dr}(L-1)\int^r_0p_r(w)dw=(L-1)p_r(r)</script><p>上式写成倒数：</p><script type="math/tex; mode=display">\frac{dr}{ds}=\frac{1}{(L-1)p_r(r)}</script><p>带入前面概率论得出的已知结论，因为值为r的像素点出现概率肯定大于0，即$p_r(r)&gt;0$，所以$\frac{dr}{ds}$必然&gt;0。因此下方绝对值可以直接去掉：</p><script type="math/tex; mode=display">p_s(s)=p_r(r)\bigg|\frac{dr}{ds}\bigg|=p_r\frac{1}{(L-1)p_r(r)}=\frac{1}{L-1}</script><p>至此，证明了变换后的直方图各值分布密度$p_s(s)$是为$\frac{1}{L-1}$的常数。</p><h3 id="直方图均衡函数和离散形式"><a href="#直方图均衡函数和离散形式" class="headerlink" title="直方图均衡函数和离散形式"></a>直方图均衡函数和离散形式</h3><p>连续形式：</p><script type="math/tex; mode=display">s=T(r)=(L-1)\int^r_0p_r(w)dw</script><p>离散形式：</p><script type="math/tex; mode=display">s_k=T(r_k)=(L-1)\sum^k_{j=0}p_r(r_j),\ k=0,1,2,...,L-1</script><p>在离散的情况下，求出来的理想$s_k$不一定有匹配的值，因此需要约成最接近的数。</p><h3 id="离散直方图均衡计算例子"><a href="#离散直方图均衡计算例子" class="headerlink" title="离散直方图均衡计算例子"></a>离散直方图均衡计算例子</h3><p>如下图，一张有8种灰度值，64x64分辨率的灰度图，其各值像素出现次数分别为$n_k$，将其直方图均衡。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231155353903.png" alt="image-20241231155353903"></p><p><strong>Step1:</strong>计算各值概率。该图共有$64\times 64=4096$个像素点。因此$p(r_0)=\frac{790}{4096}\approx0.19287$，以此类推。结果在上图。</p><p><strong>Step2:</strong>根据公式，将原有的值映射到新的值。例如值$r_1$被映射到$s_1$计算方式为：</p><script type="math/tex; mode=display">s_1=(8-1)\times[p_r(r_0)+p_r(r_1)]=7\times(0.19+0.25)=3.08\approx3</script><p>以此类推，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231155907393.png" alt="image-20241231155907393"></p><p>可以看到，原先分布薄弱的7被填充了多个数值。均衡化前后的直方图如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231160022264.png" alt="image-20241231160022264" style="zoom:67%;" /></p><h2 id="直方图匹配"><a href="#直方图匹配" class="headerlink" title="直方图匹配"></a>直方图匹配</h2><p>有些时候，并不希望将直方图完全变成均匀分布，而是有一个预设好的直方图“模板”，希望将任意一张照片的直方图变成这个模板这样的分布。这被称为直方图匹配。</p><h3 id="直方图匹配函数"><a href="#直方图匹配函数" class="headerlink" title="直方图匹配函数"></a>直方图匹配函数</h3><p>直方图匹配的原理是以均衡化的直方图作媒介，求得两直方图分布函数间的函数关系。</p><p>假设考虑灰度图像值$r$的PDF为$p_r(r)$，其被匹配后的输出为$z$，PDF为$p_z(z)$。如果我们将$p_r(r)$和$p_z(z)$套用前面提到的均衡化，并将$p_z(z)$的均衡化函数记为函数G，会得到：</p><script type="math/tex; mode=display">s=T(r)=(L-1)\int_0^rp_r(w)dw</script><script type="math/tex; mode=display">G(z)=s=(L-1)\int_0^rp_z(w)dw</script><p>因为他们均衡化后求到的s一致，因此有：$G(z)=s=T(r)$。把$G(z)$写成逆函数，有：</p><script type="math/tex; mode=display">z=G^{-1}(s)=G^{-1}[T(r)]</script><p>至此就拿到了直方图匹配函数。但是这一步逆函数，对于连续地解析表达式是非常非常难求的。但是所幸的是图像几乎都是离散值，对于离散量而言，将$r_k$计算为$s_k$，再将$z_q$计算为$s_q$，寻找$s_k$和$s_q$中最接近的，将$r_k$映射到$z_q$即可。</p><p>因此整个直方匹配函数离散操作为：</p><p><strong>Step1：</strong>计算原始直方图和目标直方图的均匀化结果</p><script type="math/tex; mode=display">s_k=T(r_k)=(L-1)\sum^k_{j=0}p_r(r_j)</script><script type="math/tex; mode=display">G(z_q)=s_q=(L-1)\sum^k_{i=0}p_z(z_i)</script><p><strong>Step2：</strong>建立一个look up table，将$s_k$和$s_q$中最接近的连在一起，可能存在多个映射到一个的情况。</p><p><strong>Step3：</strong>根据上面得到的映射关系，将对应的$r_k$变成$z_q$。</p><h3 id="直方图匹配例子"><a href="#直方图匹配例子" class="headerlink" title="直方图匹配例子"></a>直方图匹配例子</h3><p>考虑直方图均衡化示例中的64 x 64的图像，$r_k$各值如下图左。目标直方图$z_q$各值在下图右。计算直方图匹配结果。</p><table>    <tr>        <td><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231155353903.png"></td>         <td><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231171727743.png"></td>    </tr></table><p>经过计算，这二者均衡化后的值如下表所示</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20241231171921611.png" alt="image-20241231171921611"></p><p>可以看到，上图中$s_k$和$s_q$值相等的都使用了相同颜色标注，他们是一一对应的关系。下一步就是：</p><ul><li>将原先值为0（$r_0=0$）的像素调整为值为3</li><li>将原先值为1的像素调整为值为4</li><li>…</li><li>将原先值为3和4的像素都调整为6</li><li>将原先值为5,6,7的像素都调整为7</li></ul><p>至此，便完成了直方图匹配。</p><h1 id="空间滤波"><a href="#空间滤波" class="headerlink" title="空间滤波"></a>空间滤波</h1><p>图像处理的滤波也有空间滤波和频率域滤波。空间滤波通过把每个像素的值替换为该像素及其邻域的函数值来修改图像。空间滤波器可以实现图像的平滑、锐化、边缘增强等等。</p><h2 id="空间滤波原理"><a href="#空间滤波原理" class="headerlink" title="空间滤波原理"></a>空间滤波原理</h2><p>空间滤波中有一个核（Kernel），这个核是一个矩阵。核矩阵在原始图像上滑动，将原始图像上对应的值挨个相乘，再把乘出来的结果加起来，得到新像素的值。如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/6c3432fe5d1e11273c5c5bfa29fdf69b.gif" alt="img" style="zoom:67%;" /></p><p>因为这个过程不涉及频域变换，因此被称为空间滤波，它是滤波器核与图像的卷积。空间滤波的数学表达式如下：</p><script type="math/tex; mode=display">s(x,y)=C\sum w(u,v)r(x+u,y+v)</script><p>其中w为核矩阵，r为原始图像。</p><h2 id="平滑（低通）空间滤波器"><a href="#平滑（低通）空间滤波器" class="headerlink" title="平滑（低通）空间滤波器"></a>平滑（低通）空间滤波器</h2><p>在前面DCT引入过一个概念：图像内邻接像素值变换速度越快，称为图像频率越高。而平滑滤波器会降低这样的急剧过渡，因此它是低通滤波器。</p><p>由于随机噪声通常表现为灰度的急剧过渡，因此平滑滤波器可以很好地消除随机噪声。同时平滑滤波器也会模糊图像，模糊的程度取决于滤波器核的大小和系数的值。</p><h3 id="均值滤波（average-filtering）"><a href="#均值滤波（average-filtering）" class="headerlink" title="均值滤波（average filtering）"></a>均值滤波（average filtering）</h3><p>均值滤波就是求滤波器核内像素的均值。例如一个3x3的滤波器，那么该核每个元素的值就是1/9，这也称为盒式核</p><script type="math/tex; mode=display">\left[\begin{array}{ccc}1/9 & 1/9& 1/9\\1/9 & 1/9& 1/9\\1/9 & 1/9& 1/9\\\end{array}\right]</script><p>这样的结果就是，每个新像素的值都是周围8个像素的值和它的值的平均。平均之后原来的边界会变得不清晰，图像看起来会糊一层。因此它又叫均值模糊。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20250101144136128.png" alt="image-20250101144136128" style="zoom:67%;" /></p><p>因为每个新像素都是原始一群像素的平均值，因此滤波后的新图像和原始图像各像素的均方差是最小的，即有：</p><script type="math/tex; mode=display">min[\sum(a-a_i)^2]</script><p>其中a是原始图像像素值，$a_i$是变换后。</p><h3 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h3><p>盒式核对透镜产生的模糊特性（例如相机失焦）的模拟特性较差。但是高斯滤波器弥补了这一部分，可以产生很好的毛玻璃质感（win7用了都说好。</p><p>和之前讲的一样，高斯滤波的核函数来源于对二维高斯函数的采样，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/image-20250101144447357.png" alt="image-20250101144447357"></p><p>高斯模糊可以移除高斯噪声。与均值滤波相比，高斯模糊的边缘也更“柔和”。</p><h2 id="统计排序滤波器（非线性）"><a href="#统计排序滤波器（非线性）" class="headerlink" title="统计排序滤波器（非线性）"></a>统计排序滤波器（非线性）</h2><h3 id="中值滤波（median-filtering）"><a href="#中值滤波（median-filtering）" class="headerlink" title="中值滤波（median filtering）"></a>中值滤波（median filtering）</h3><p>中值滤波是将滤波核内所有像素的值顺序排列，然后选择中位数作为新的像素值。中值滤波只使用图像中原始存在的像素值，因此图像处理后会更接近于原图，而且因为边缘不会使用介于原始边缘差异之间的值的像素过度（例如黑白相交的边缘不适用灰过度，而是依旧从黑白里面选），因此中值滤波的模糊程度很小。</p><p><strong>对于偶数个像素值，中值是最中间的两个取平均。</strong></p><div class="note info flat"><p>椒盐噪声(salt-and-pepper noise)又称脉冲噪声，它随机改变一些像素值，在二值图像上表现为使一些像素点变白，一些像素点变黑。 是由图像传感器，传输信道等产生的黑白相间的亮暗点噪声，也就是所谓“雪花”。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/ea6ba6688feb5ede9f3d6279fca15ba6.jpeg" alt="在这里插入图片描述"></p></div><p>同时，由于中值滤波选中间值，而椒盐噪声一般是极大值或极小值，因此中值滤波对椒盐噪声可以很好地消除。下图从左到右是原始图像、均值滤波、中值滤波之后的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/KaysonZ/BlogPicHost/imgs/20221220153348.png" alt="img"></p><p>中值滤波会让两图像像素值的绝对值差异最小，即</p><script type="math/tex; mode=display">min[\sum|a-a_i|]</script><h2 id="锐化（高通）滤波器"><a href="#锐化（高通）滤波器" class="headerlink" title="锐化（高通）滤波器"></a>锐化（高通）滤波器</h2><p>高通滤波器会强调图像变换较大的地方，对应的也就是边缘。因此高通滤波器会产生锐化的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能系统设计-罐装知识</title>
      <link href="/posts/5ed0526b.html"/>
      <url>/posts/5ed0526b.html</url>
      
        <content type="html"><![CDATA[<h1 id="ANN"><a href="#ANN" class="headerlink" title="ANN"></a>ANN</h1><h2 id="ANN停止的标准"><a href="#ANN停止的标准" class="headerlink" title="ANN停止的标准"></a>ANN停止的标准</h2><ul><li>特定次数的迭代(iteration)之后</li><li>输出的误差低于阈值（threshold）</li><li>独立验证集（separate validation set）上的错误小于某些标准(criteria)。</li></ul><h2 id="ANN各项参数的影响"><a href="#ANN各项参数的影响" class="headerlink" title="ANN各项参数的影响"></a>ANN各项参数的影响</h2><p><strong>学习率</strong>：过小，迭代（iteration）过多；过大，可能错过最优解，在损失函数（lossfunction）最低点震荡（oscillate）</p><p><strong>动量（momentum）</strong>：过小，陷入局部最优解(local minima)；过大，造成下降方向与梯度方向差异较大，产生震荡。</p><p><strong>*附：动量的作用：</strong> 1.使得训练时穿过（rolling through）局部最优（local minima）*</p><p>​                  <em>2.加大梯度不变时的步长（step size），提升收敛速率</em></p><p><strong>迭代次数（learning iterations）</strong>：过小，欠拟合，无法捕捉数据集的通用特征（characteristic）。过多，浪费计算资源，导致过拟合(overfitting)。</p><p><strong>*附：防止过拟合的方法：</strong>1. 使用验证数据集（validation data set），当误差增加时，则立即停止训练*</p><p>​                    <em>2.使用预定义的迭代次数停止训练</em></p><p>​                    <em>3.使用预定义的误差阈值（threshold）停止训练</em></p><p><strong>数据集：</strong>越大越好，大的good for training</p><p><strong>超参数（hyperparameter）</strong>：手动(manually)设置的参数，用于优化训练算法。</p><h2 id="神经网络类型的数种概念"><a href="#神经网络类型的数种概念" class="headerlink" title="神经网络类型的数种概念"></a>神经网络类型的数种概念</h2><p><strong>深度学习：</strong>使用多层非线性处理单元的级联进行特征提取和转换(feature extraction and transformation)。每一层都使用前一层的输出作为输入。<strong>隐藏层的作用：</strong>可以为模型引入其他影响因子（introducing extra factors）,为网络提供了对数据中的非线性进行建模的能力。</p><p><strong>迁移学习：</strong>使用其他数据进行预训练（pretrained）后的模型进行再次训练，以处理新数据。可以有效节省数据集（节省监督学习的数据标注量）。</p><p><strong>单层感知机网络的局限性：</strong>单层感知机只能分类线性边界，因此XOR这样的需要多条线进行分割（requires more than one line to it），无法使用单层感知机进行建模。</p><p><strong>循环神经网络(Recurrent Neutral Network)：</strong>一种常用于处理时间序列数据的深度学习网络。隐藏层包含自反馈，序列的当前输出也与前一个输出相关，因此有内部记忆（internal memory）。<strong>擅长：</strong>处理未分割的手写识别或语音识别等（unsegmented connected  handwriting recognition or speech recognition）<strong>缺点：</strong>1. 大多数RNN都存在缩放问题(scaling issue)。2. 在有大量输入数据集时，RNN不易训练。</p><p><strong>*附：使用feedforward网络处理时间序列数据：</strong>需要将时间序列作为输入，例如以x(t), x(t-1), x(t-2)作为输入。训练同最正常神经网络*</p><p><strong>卷积神经网络（Convolutional neural networks）：</strong>常用于图像识别的神经网络。由多层卷积层-池化层还有一个全连接层（full connected layer）构成。<strong>卷积层：</strong>提取输入数据的特征。<strong>池化层：</strong>提取卷积结果的显著特征，减少计算量。<strong>被用于：</strong>手写识别、图像分类、人脸识别（face recognition）</p><h2 id="训练方式"><a href="#训练方式" class="headerlink" title="训练方式"></a>训练方式</h2><p><strong>监督学习(supervised)：</strong>需要使用被标注的数据（labeled data）进行学习。监督学习算法分析训练数据并产生一个推断函数，该函数可用于映射新样本。前馈神经网络就是一种有监督学习系统。</p><p><strong>无监督学习(unsupervised)：</strong>无需使用被标注的数据，在无标签数据中寻找隐藏结构（hidden structure），只是将现有的数据进行聚类（clustering）和分类（classifying）。SOM就是典型的无监督学习。</p><p><strong>常用训练算法-梯度下降（Gradient descent）：</strong>计算损失函数在当前点的梯度，并沿着梯度的相反（opposite）方向更新参数，直到找到损失函数的最小值，即朝着上升率最快的反方向行走。</p><p><strong>验证数据集的意义（validation set）：</strong>验证集是用于在训练时测试网络的数据，通常用于防止过拟合（overfitting）。</p><hr><h1 id="Fuzzy-System"><a href="#Fuzzy-System" class="headerlink" title="Fuzzy System"></a>Fuzzy System</h1><h2 id="推理模型差异"><a href="#推理模型差异" class="headerlink" title="推理模型差异"></a>推理模型差异</h2><p><strong>Mamdani：</strong>使用连续的输出模糊集，可以能够以更直观、更人性化的方式描述专业知识。但需要更大的计算负担。</p><p><strong>Sugeno：</strong>输出模糊集使用离散的特定数字。在计算上效率很高，并且可以很好地嵌入优化和自适应技术，这使得它在控制问题中非常有吸引力，特别是对于动态非线性系统。</p><h2 id="归一化模糊变量的优点"><a href="#归一化模糊变量的优点" class="headerlink" title="归一化模糊变量的优点"></a>归一化模糊变量的优点</h2><ul><li>更有效地利用论域（universe of discourse）的间隔</li><li>将规则库推广到更大范围的模糊化（To generalize the rule base for a wide range of fuzzification）</li><li>为调教(tuning)提供了更多灵活性(flexibility)</li></ul><hr><h1 id="Genetic-Algorithm"><a href="#Genetic-Algorithm" class="headerlink" title="Genetic Algorithm"></a>Genetic Algorithm</h1><h2 id="GA的一个世代的步骤及其意义"><a href="#GA的一个世代的步骤及其意义" class="headerlink" title="GA的一个世代的步骤及其意义"></a>GA的一个世代的步骤及其意义</h2><p><strong>编码（Encoding）：</strong>将问题的可能解决方案视为种群中的个体（individuals）。如果解决方案可以分为一系列小步骤（构建块 Building blocks），那么这些步骤由基因表示，而一系列基因（染色体 chromosome）将编码整个解决方案。这样，问题的不同解决方案在遗传算法中表示为个体的染色体。</p><p><strong>适应度函数（fitness function）:</strong>代表一个问题的期望解的主要要求（即最便宜的价格，最短的路线，最紧凑的安排等）。该函数计算并返回单个解决方案的适应度。</p><p><strong>选择算子（Selection operator）:</strong>定义当前种群中个体被选择繁殖的方式。有许多策略（例如轮盘赌，排名，锦标赛选择等）,，选择最适合当前算法的。</p><p><strong>交叉（Crossover）：</strong>定义了父母的染色体如何混合，以获得其后代的遗传密码（例如，一点，两点，均匀交叉等）。这个运算符实现了继承属性（inheritance property）（子代继承（inherit ）父代的基因）。</p><p><strong>变异（Mutation）：</strong>算子会对后代的遗传密码（genetic codes）产生随机变化。这种操作符需要为遗传密码<strong>带来一些随机多样性（random diversity）</strong>。在某些情况下，如果不使用变异算子，遗传算法就无法找到全局最优解。<br><strong>下面给出算法的流程图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20250103102623368.png" alt="image-20250103102623368"></p><h2 id="表型和基因型的差异"><a href="#表型和基因型的差异" class="headerlink" title="表型和基因型的差异"></a>表型和基因型的差异</h2><p><strong>表型（phenotypes）</strong>：表型是基因型通过解码和表达所产生的实际特征或行为（actual characteristic or behaviour）。在遗传算法中，表型通常是基因型经过解码后得到的解。</p><p><strong>基因型（genotypes</strong>）：基因型是个体的遗传信息（individual’s genetic information）的编码表示。在遗传算法中，基因型通常表示为一个字符串或数组，其中每个元素代表一个基因，表型经过编码(encoding)即可得到基因型。</p><h2 id="GA训练停止条件："><a href="#GA训练停止条件：" class="headerlink" title="GA训练停止条件："></a>GA训练停止条件：</h2><ul><li>超出允许的CPU时间（CPU time）后停止</li><li>适应度超过给定阈值</li><li>在一段时间内，改善不明显</li><li>种群多样性（population diversity）在阈值以下</li></ul><h2 id="GA参数的影响"><a href="#GA参数的影响" class="headerlink" title="GA参数的影响"></a>GA参数的影响</h2><p><strong>种群大小过大：</strong>可以找到解决方案，但是计算量提高</p><p><strong>交叉率过大：</strong>可能产生震荡，不收敛</p><p><strong>变异率过小：</strong>激励不足(not enough excitation)，可能陷入局部最优解</p><h2 id="GA是全局优化算法的原因"><a href="#GA是全局优化算法的原因" class="headerlink" title="GA是全局优化算法的原因"></a>GA是全局优化算法的原因</h2><p>GA是一种随机算法( stochastic algorithm)，它从分布在整个解空间(solution space)范围内的随机数开始，从而在整个解空间范围内寻找可行解，使算法成为一种全局优化搜索引擎。</p><hr><h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><h2 id="图像压缩的流程"><a href="#图像压缩的流程" class="headerlink" title="图像压缩的流程"></a>图像压缩的流程</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20250103103405493.png" alt="image-20250103103405493"></p><p><strong>mapper:</strong>将数据变换(transform)到对压缩有友好的域上。其中一些mapper与傅里叶有关，例如DCT。</p><p><strong>Quantization:</strong>引入误差的主要步骤。That introduces something that helps the compression, but limits us from being able to reconstruct exactly the image.  </p><p><strong>Symbol encoder：</strong>将图像使用更高效的编码（例如可变长的霍夫曼编码）进行存储。</p><h2 id="JPEG使用DCT的原因"><a href="#JPEG使用DCT的原因" class="headerlink" title="JPEG使用DCT的原因"></a>JPEG使用DCT的原因</h2><p>相较于DFT，DCT的边界拓展更加连续</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20250103104836562.png" alt="image-20250103104836562"></p><h2 id="直方图均衡化的已知条件"><a href="#直方图均衡化的已知条件" class="headerlink" title="直方图均衡化的已知条件"></a>直方图均衡化的已知条件</h2><script type="math/tex; mode=display">p_s(s)=p_r(r)|\frac{dr}{ds}|</script><h2 id="图像复原的步骤"><a href="#图像复原的步骤" class="headerlink" title="图像复原的步骤"></a>图像复原的步骤</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20250103104458118.png" alt="image-20250103104458118"></p><h3 id="逆滤波"><a href="#逆滤波" class="headerlink" title="逆滤波"></a>逆滤波</h3><p>在拍摄图像时，由于相机系统、运动干扰等引入噪声$h(x,y)$</p><script type="math/tex; mode=display">g(x,y)=f(x,y)*h(x,y)</script><p>那么在频域上，通过除$H(u,v)$即可</p><script type="math/tex; mode=display">F(u,v)=\frac{G(u,v)}{H(u,v)}</script><p>逆滤波的难点是如何估计退化函数H，<strong>通常情况是根据经验预测图像所经受的退化类型</strong>。</p><h3 id="维纳滤波"><a href="#维纳滤波" class="headerlink" title="维纳滤波"></a>维纳滤波</h3><p>基本思想：将原图和复原图的均方差表达式最小化</p><script type="math/tex; mode=display">MSE=E[(\hat f-f)^2]</script><p>如果将上述期望式子展开，用DCT变化到频率，则有</p><script type="math/tex; mode=display">\hat F(u,v)=G(u,v)\frac{H^*(u,v)}{H^2(u,v)+\frac{p_\eta}{p_f}}</script><p>由于$\frac{p_\eta}{p_f}$通常是个常数，因此记为$K$。通过尝试不同的K值后，对上式进行IDFT观察图像复原的情况，从而复原图像。</p>]]></content>
      
      
      <categories>
          
          <category> 大四上 </category>
          
          <category> 智能系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从C到CPP的迁移</title>
      <link href="/posts/995182.html"/>
      <url>/posts/995182.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><h2 id="为什么会有这篇笔记"><a href="#为什么会有这篇笔记" class="headerlink" title="为什么会有这篇笔记"></a>为什么会有这篇笔记</h2><h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><hr><h1 id="基本语法内的新特性"><a href="#基本语法内的新特性" class="headerlink" title="基本语法内的新特性"></a>基本语法内的新特性</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在C语言中仅有值传递和地址传递，而C++除此之外还可以进行引用传递。</p><hr><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>C语言中若要使用默认参数，仅能通过宏实现。</p><hr><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><h3 id="函数重载基本用法"><a href="#函数重载基本用法" class="headerlink" title="函数重载基本用法"></a>函数重载基本用法</h3><p>函数重载是为了提高函数名复用性或是使得函数兼容更多数据类型诞生的。它允许两个函数使用同样的名称，通过<strong>传入的参数不同</strong>来进行区分。C++编程中支持函数重载，而C不支持。</p><p>所谓传入的参数不同，可以是参数的类型不同，例如<code>func(int a)</code>和<code>func(double a)</code>；也可以是参数的个数不同，例如<code>func(int a)</code>和<code>func(int a, int b)</code>；还可以是顺序不同，例如<code>func(int a, double b)</code>和<code>func(double b, int a)</code>。</p><p>例如如下示例。下面两个函数，虽说它们的名字相同，但是由于一个参数类型是int，一个参数类型是double。在调用<code>func</code>函数时，若传入<code>func(1)</code>，则调用第一个；若传入<code>func(3.14)</code>，则调用第二个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载-默认参数"><a href="#函数重载-默认参数" class="headerlink" title="函数重载+默认参数"></a>函数重载+默认参数</h3><p>当函数中使用了默认参数时，需要注意在忽略默认参数后函数参数有差异。例如如下示例。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>此时，在传入诸如<code>func(233)</code>的时候，编译器无法区分是调用默认b=0的<code>func</code>还是仅传入a的<code>func</code>，因此会报错。</p><h3 id="const修饰参数的重载"><a href="#const修饰参数的重载" class="headerlink" title="const修饰参数的重载"></a>const修饰参数的重载</h3><p>有时会通过在传入函数时用<code>const</code>修饰来避免值在函数内被修改。例如<code>string.h</code>库内的<code>strcmp(const char* str1, const char* str2)</code>。普通<code>char</code>类型也可以传入<code>const char*</code>（部分编译器会给个警告，有些编译器连警告都没有），但是如果用<code>const</code>区分了函数重载,优先使用最匹配的类型。例如如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">char</span>* a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* a)</span></span></span><br></pre></td></tr></table></figure><p>那么，在<code>char a = &#39;H&#39;;</code>后，调用<code>func(a)</code>，会优先调用<code>func(char* a)</code>。因为他们参数类型匹配。如果要调用<code>func(const char* a)</code>，则需要进行强制类型转换<code>func((const char*) a)</code>。</p><p>当然，在传入<code>func(&#39;H&#39;)</code>时，也是调用第二个，因为<code>&#39;H&#39;</code>在编译器中时默认申领了一个<code>const</code>类型的变量再进行传递。</p><hr><h2 id="用new在堆区开辟内存"><a href="#用new在堆区开辟内存" class="headerlink" title="用new在堆区开辟内存"></a>用new在堆区开辟内存</h2><hr><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><h3 id="类和对象是什么"><a href="#类和对象是什么" class="headerlink" title="类和对象是什么"></a>类和对象是什么</h3><ul><li>类由 成员变量 和 成员函数 构成</li><li>成员变量被称为该类的 属性</li><li>成员函数被称为该类的 方法</li><li>类中所囊括的东西（包含属性和行为）被称为类的成员。</li></ul><h3 id="类的权限"><a href="#类的权限" class="headerlink" title="类的权限"></a>类的权限</h3><p>类的访问权限有三种：</p><ul><li>public：成员在 类内、类外均可访问。</li><li>protected：成员在 类内可访问，类外不可访问。在继承时，子类可以访问父类该权限下的成员。</li><li>private：成员在 类内可访问，类外不可访问。在继承时，子类无权访问父类该权限下的成员。</li></ul><h4 id="通过属性私有、方法公开的方式，实现C中的断言机制"><a href="#通过属性私有、方法公开的方式，实现C中的断言机制" class="headerlink" title="通过属性私有、方法公开的方式，实现C中的断言机制"></a>通过属性私有、方法公开的方式，实现C中的断言机制</h4><p>熟悉STM32 HAL库的同学可能经常见到<code>assert</code>断言宏，几乎在HAL库的每一个库函数内都会调用断言宏来判断输入的参数是否合理。在C++中，可以通过将属性放在private，操作该属性的函数放在public来实现这一点。</p><p>举个例子，现在有一个重庆邮电大学的类。该类内有一个属性是重庆邮电大学的title，将其定义为private，并在public内设<code>getTitle()</code>和<code>setTitle()</code>函数去操作它。在<code>setTitle()</code>内写当发现这个title = 985或者title = 211的时候，都认为它是非法的，不予赋值。因为title处于私有，因此不可外部直接赋值，必须通过<code>setTitle()</code>进行赋值，而<code>setTitle()</code>又避免了211或者985这样的非法参数。此时就对输入参数的合法性做出了断言。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQUPT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTitle</span><span class="params">(<span class="type">int</span> i_title)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i_title == <span class="number">985</span> &amp;&amp; i_title== <span class="number">211</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            title = i_title;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> title;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="类中的this指针"><a href="#类中的this指针" class="headerlink" title="类中的this指针"></a>类中的this指针</h3><p>在上文的示例代码中可以看到，为了将外部传入的title和类内自己的<code>title</code>区分开，外部传入的被定义为了<code>i_title</code>。但是有没有什么更方便的解决方法呢？答案就是this指针。在类内使用this指针可以指向自己的<strong>成员变量</strong>。下面是修改后的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQUPT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTitle</span><span class="params">(<span class="type">int</span> title)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (title == <span class="number">985</span> &amp;&amp; title== <span class="number">211</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;title = title;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> title;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到以上代码在<code>gitTitle()</code>处是没有写成<code>this-&gt;title</code>的，这是因为这里不存在命名冲突，编译器会自动给<code>title</code>它理解为<code>this-&gt;title</code>。</p><p>this指针其实是一个指向基于该类创建的对象的内存空间的<strong>指针常量</strong>，编译会自动给他一个定义是<code>CQUPT* const this</code>。<strong>这个指针会在类的某个成员函数被创建时进行定义</strong>。例如上述代码中，setTitle中的this指针和getTitle的类指针其实是独立定义的，都定义在他们函数各自的开头。</p><h3 id="this指针与常函数"><a href="#this指针与常函数" class="headerlink" title="this指针与常函数"></a>this指针与常函数</h3><p>在类中如果要避免成员函数修改成员变量的值，在函数名称后加一个const将其声明为常函数即可。在成员函数屁股后面加了const之后，this指针会被创建为<code>const CQUPT* const this</code>，此时this指向的所有值都不可能更改了。例如下面代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQUPT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTitle</span><span class="params">(<span class="type">int</span> title)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">            <span class="comment">//此时创建this的语句会从const CQUPT* const this</span></span><br><span class="line">            <span class="comment">//变成const CQUPT* const this</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;title = title;<span class="comment">//这个地方就会报错了，因为常量不可更改</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> title;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果创建的对象是一个常量，例如<code>const CQUPT lese</code>，那么<code>lese</code>对象中就只允许存在常函数，不允许普通函数存在。</p><h3 id="对象下的链式编程"><a href="#对象下的链式编程" class="headerlink" title="对象下的链式编程"></a>对象下的链式编程</h3><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><h3 id="类的6大基本构成"><a href="#类的6大基本构成" class="headerlink" title="类的6大基本构成"></a>类的6大基本构成</h3><p>在C++中，就算创造一个空类，也会默认包含这六个成员——构造函数、拷贝构造函数、析构函数、赋值操作重载、取地址操作符重载、const修饰的取地址操作符重载。</p><p><strong>引入：对象的初始化和清理——（拷贝）构造函数和析构函数</strong></p><p>C++的对象同变量是<strong>一样</strong>的。如果在某个函数内创建则创建在栈区；如果在函数外创建则创建在全局区（在部分单片机上认为全局区就是堆区）；如果使用new创建则创建在堆区。</p><p>若是栈区对象，同变量一样，当调用某个函数时，这个对象会在栈区被创建，当函数return在回收这一帧栈帧时，对象也会被回收。</p><p>在创建对象时，会自动调用构造函数将其成员初始化。在这个对象被释放时，会自动调用析构函数对其进行清理。构造函数和析构函数可以人为定义，如果人为定义留空，则编译器自动补充一个空函数（对于拷贝构造函数而言是全属性赋值函数，下面会详细介绍）。</p><h4 id="1-初始化类属性——构造函数"><a href="#1-初始化类属性——构造函数" class="headerlink" title="1. 初始化类属性——构造函数"></a>1. 初始化类属性——构造函数</h4><p><strong>直接使用构造函数内进行赋值，来初始化属性：</strong></p><p>构造函数是与类同名的函数，函数无返回值，定义也无需加返回类型。例如下例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">example</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">example</span>()&#123;</span><br><span class="line">            <span class="comment">/*构造函数内容...*/</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    example obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<code>example obj;</code>创建对象时，就会自动调用<code>example()</code>函数。构造</p><p>构造函数是支持传入参数的，可以在创建对象时利用括号传入，例如下面代码就传入了10：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">example</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">example</span>(<span class="type">int</span> a)&#123;</span><br><span class="line">            <span class="comment">/*构造函数内容...*/</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">example <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//加个括号传入参数，这种方法用的最多。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>有部分教程会给出其他的赋值方法，利用显式、隐式转换等等，那些方法在部分编译器上是可用的（例如VC++）。但是部分编译器不！支！持！</p><p>例如DevCpp IDE就会对 <code>example test = example(10)</code>和 <code>example test = 10</code>这种写法报错，仅允许<code>example test = test0</code>（test0是另一个同类对象）。更何况，在嵌入式系统下编译器都是经过魔改的（例如Arduino）<strong>因此强烈建议不要使用</strong>。</p></div><p>举一个实际应用的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="type">char</span>* school;<span class="comment">//学生的学校</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age,<span class="type">char</span>* school)&#123;<span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age; <span class="keyword">this</span>-&gt;shcool = school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">student <span class="title">GaoXinBo</span><span class="params">(<span class="number">18</span>,<span class="string">&quot;CQUPT&quot;</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用初始化列表来初始化属性：</strong></p><p>除了像上面那么写之外，还可以使用初始化列表的语法来写构造函数。语法是：<code>构造函数(传入参数):属性(值),属性(值),属性(值)...&#123;其他语句&#125;</code>。<strong>值得注意的是，初始化列表无需使用this指针。</strong></p><p>举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="type">char</span>* school;<span class="comment">//学生的学校</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age,<span class="type">char</span>* school):<span class="built_in">age</span>(age),<span class="built_in">school</span>(school)&#123;</span><br><span class="line">        <span class="comment">/*其他语句*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-特殊的构造函数——拷贝构造函数"><a href="#2-特殊的构造函数——拷贝构造函数" class="headerlink" title="2. 特殊的构造函数——拷贝构造函数"></a>2. 特殊的构造函数——拷贝构造函数</h4><p>同时，构造函数也支持函数重载，即可以定义多个构造函数，根据创建对象时传入的参数来判定调用哪个进行初始化。那么定义多个构造函数有啥用呢？<strong>一方面它可以允许不同的初始化方式；另一方面构造函数可以被看成普通构造函数和拷贝构造函数两个大类，拷贝构造函数将在该对象值被传递时调用。下面将详细演示</strong></p><p>普通构造函数就是直接传入属性初始化参数或甚至不传入参数，来对属性进行赋值和初始化的。<strong>而拷贝构造函数的参数是这个对象本身</strong>，其是传入一个同类型的对象，然后将这个对象内的属性“拷贝”到这个新创建的对象上去。下面的代码就展示了一个普通构造函数和一个拷贝构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="type">char</span>* school;<span class="comment">//学生的学校</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age,<span class="type">char</span>* school)&#123;<span class="comment">//普通构造函数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age; <span class="keyword">this</span>-&gt;shcool = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">const</span> student &amp;stu)&#123;<span class="comment">//拷贝构造函数</span></span><br><span class="line">        age = stu.age; school = stu.school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不难发现，其实所谓拷贝构造函数和普通构造函数并无差异，无非就一个特殊一点的，以传入一个同类对象为参数的函数罢了。那拷贝构造函数有什么意义呢？在下面这些场景中，就可以用拷贝构造函数进行初始化：</p><ul><li>已经构建出一个对象，需要创建这个对象当前状态的一个副本</li><li>对象在函数间被传递的时候</li></ul><p>第一个很好理解，有些时候需要创建xxx对象的副本xxx_old，此时如果用普通构造函数传参进去来初始化，则需要<code>xxx.属性1</code>，<code>xxx.属性2</code>这样一个一个地访问。而拷贝构造函数可以直接传入xxx对象，在函数内逐个访问进行赋值。例如下面这段代码，就创建了一个<code>stu_old</code>做为<code>stu1</code>的副本。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="type">char</span>* shcool;<span class="comment">//学生的学校</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age,<span class="type">char</span>* school)&#123;<span class="comment">//普通构造函数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age; <span class="keyword">this</span>-&gt;shcool = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">const</span> student &amp;stu)&#123;<span class="comment">//拷贝构造函数</span></span><br><span class="line">        age = stu.age; shcool = stu.shcool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;   </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">student <span class="title">stu1</span><span class="params">(<span class="number">20</span>,<span class="string">&quot;CQUPT&quot;</span>)</span></span>;<span class="comment">//调用普通构造函数初始化对象stu1</span></span><br><span class="line">    <span class="function">student <span class="title">stu_old</span><span class="params">(stu1)</span></span>;<span class="comment">//调用拷贝构造函数将stu1拷贝至stu_old</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象在函数间被传递调用拷贝构造函数是指的如下这种情况，在下面的代码中，函数<code>func</code>接受的参数是stu对象，在调用时传入了<code>stu1</code>；此时这个函数内的stu对象就会调用拷贝构造函数拷贝<code>stu1</code>对它进行初始化。在return时，使用<code>stu2</code>对象接住了函数return的<code>stu</code>，此时<code>stu2</code>也是调用拷贝构造函数将<code>stu</code>内的状态拷贝至<code>stu2</code>内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="type">char</span>* shcool;<span class="comment">//学生的学校</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age,<span class="type">char</span>* shcool)&#123;<span class="comment">//普通的构造函数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age; <span class="keyword">this</span>-&gt;shcool = shcool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">const</span> student &amp;stu)&#123;<span class="comment">//拷贝构造函数</span></span><br><span class="line">        age = stu.age; shcool = stu.shcool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">student <span class="title">func</span><span class="params">(student stu)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*函数内容...*/</span></span><br><span class="line">    <span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">student <span class="title">stu1</span><span class="params">(<span class="number">20</span>,<span class="string">&quot;CQUPT&quot;</span>)</span></span>;<span class="comment">//调用普通构造函数初始化对象stu1</span></span><br><span class="line">    <span class="function">student <span class="title">stu2</span><span class="params">(func(stu1))</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>当用户未定义普通构造函数或拷贝构造函数时，编译器默认提供一个空函数；</li><li>当用户未定义拷贝构造函数时，编译器默认提供一个全属性拷贝的拷贝构造函数；</li><li>一旦用户提供了拷贝构造函数，编译器也不会提供普通构造函数</li></ul><h4 id="3-清理类属性——析构函数"><a href="#3-清理类属性——析构函数" class="headerlink" title="3. 清理类属性——析构函数"></a>3. 清理类属性——析构函数</h4><p>前面提到，析构函数是在编译器在释放对象内存时调用的。回想一下，在C系语言中，在栈区开辟的内存由操作系统回收，在堆区开辟的内存由程序员自行管理。对象内可能含有即存在于栈区的变量，又含有存在于堆区的变量，在释放对象时，堆区变量就需要程序员自行清理了。在析构函数中写入释放堆区变量，就可以实现对象被释放时手动管理堆区变量了。</p><p>在类中定义一个与类同名，但前面加<code>~</code>符号的函数，就是析构函数。例如类A，析构函数就是<code>~A()</code>。析构函数不具有输入和输出，也无需声明return数据类型。</p><p>例如如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> *age = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    ~<span class="built_in">student</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-赋值操作重载"><a href="#4-赋值操作重载" class="headerlink" title="4.赋值操作重载"></a>4.赋值操作重载</h4><h4 id="5-取地址操作符重载"><a href="#5-取地址操作符重载" class="headerlink" title="5.取地址操作符重载"></a>5.取地址操作符重载</h4><h4 id="6-const修饰的取地址操作符重载。"><a href="#6-const修饰的取地址操作符重载。" class="headerlink" title="6.const修饰的取地址操作符重载。"></a>6.const修饰的取地址操作符重载。</h4><h3 id="堆区内存的深拷贝和浅拷贝"><a href="#堆区内存的深拷贝和浅拷贝" class="headerlink" title="堆区内存的深拷贝和浅拷贝"></a>堆区内存的深拷贝和浅拷贝</h3><p>在前面提到可以用析构函数来释放堆区内存，但是这存在一个问题：在对该对象进行拷贝之后，可能会导致内存重复释放。参考下面示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> *age = <span class="keyword">new</span> <span class="type">int</span>;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age)&#123;</span><br><span class="line">    *<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">const</span> student &amp;stu)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="built_in">int</span>(*stu.age);<span class="comment">//深拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">student</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">student <span class="title">stu1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//此时stu1被创建</span></span><br><span class="line">    student stu2 = stu1;<span class="comment">//此时stu2被创建</span></span><br><span class="line">    <span class="keyword">return</span>;<span class="comment">//此时stu1和stu2被回收</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行会发现这个程序会崩溃，这是为啥？原因就出在<code>int* age</code>这个指针。new在堆区开辟内存空间之后，将其地址赋给了指针age。在<code>student stu2 = stu1</code>进行拷贝时，拷贝的是age指针中的地址值，即，<strong>stu2和stu1中的age指针指向同一个堆区地址</strong>。</p><p>这就带来了free的问题。在return时，首先delete了stu1的age指向的地址。然后又想delete stu2的age指向的地址，然而这两个指向的却是同一个已被删除的地址，因此程序崩溃。<strong>拷贝对象时，将指针地址值拷贝走，而没有开辟新的内存的问题，就被称为浅拷贝</strong></p><p>要解决这个问题，<strong>就需要使用深拷贝</strong>，深拷贝旨在自定义拷贝构造函数，在拷贝构造函数内遇到堆区变量的拷贝，使用<code>new</code>创建新的空间后，再传递原堆区变量值。如下是深拷贝的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> *age = <span class="keyword">new</span> <span class="type">int</span>;<span class="comment">//学生的年龄</span></span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> age)&#123;</span><br><span class="line">    *<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">student</span>(student stu)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="built_in">int</span>(*stu.age);<span class="comment">//深拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">student</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前面介绍一个类里面默认含一个赋值操作符重载函数。只需要在重载赋值运算符的函数内和拷贝构造函数内，写入深拷贝的函数，就可以避免采用 = 赋值操作时产生浅拷贝问题。</p><hr><h2 id="类的内存布局"><a href="#类的内存布局" class="headerlink" title="类的内存布局"></a>类的内存布局</h2><h3 id="类中成员被static修饰"><a href="#类中成员被static修饰" class="headerlink" title="类中成员被static修饰"></a>类中成员被static修饰</h3><p><code>static</code>关键字在C中也有所使用，其会申领存在于全局区内的静态变量，而且只初始化一次，在不改变作用域的前提下（例如在某个函数内定义的，这个变量依旧只能在这个函数内调用），有较长的生命周期（函数return的时候该变量并不会被释放，而是一直存在）。</p><p>在C++中，如果类内存在被static修饰的成员变量或成员函数，则其也是被存放在全局区的，而且也不会重复初始化。<strong>无论这个类创建了多少个对象，所有对象都共享同一个内存。</strong>同时，静态变量也可以使用类名进行访问，例如<code>student</code>类内有静态<code>age</code>变量，则可以通过<code>student::age</code>进行访问。</p><p>在C++中，需要在类内声明静态变量，在全局变量的位置再次声明和初始化（如果在诸如main函数等函数内再次声明和初始化，是会报错的），例如如下代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> age;<span class="comment">//类内声明</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> student::age = <span class="number">0</span>;<span class="comment">//再次定义和初始化</span></span><br></pre></td></tr></table></figure><p>如果用static修饰成员函数，则该成员函数只能访问静态成员变量，因为不同对象调用的函数内存都是同一份，无法区分是要访问哪个对象内的成员。</p><h3 id="类中成员被const修饰"><a href="#类中成员被const修饰" class="headerlink" title="类中成员被const修饰"></a>类中成员被const修饰</h3><p>类中的成员变量同类外面一样，const修饰不影响其地址。例如一个变量在全局变量的位置，且被const修饰，那它就被放在全局变量的位置。如果一个变量在函数中声明，且被const修饰，那它就是被放在栈中的，且函数return自动回收。</p><p>在类里面也是一样的，const声明的变量会存在于由这个类创建的实例对象的内存内，不同的示例访问的都是各自不同的内存。不存在static修饰后那样的共享情况。</p><h3 id="类中内存布局"><a href="#类中内存布局" class="headerlink" title="类中内存布局"></a>类中内存布局</h3><p>现在我们知道，类中会存在成员变量和成员函数。前面又介绍如果成员变量被<code>static</code>修饰，则会放在全局变量区。对于类内的函数，其也是放在代码区的。类自己的内存区（也就是实例，类创建出的对象占用的内存空间）只会存放非静态成员函数和虚函数指针。</p><p>归纳一下就是：</p><ul><li>类的成员函数被放在代码区。</li><li>类的静态成员变量在全局数据区。</li><li>非静态成员变量在类的实例（对象）内，随实例创建在栈还是堆决定。</li><li>虚函数指针、虚基类指针在类的实例内，随实例创建在栈还是堆决定。</li></ul><hr><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>在类的封装中，介绍了类有三种不同的权限。私有权限是仅有自己能访问的，保护最好的。但是私密的东西也不一定只能自己看，就比如说地球OL中存在一个名为集美的特殊类，它有别于常见生物的类型，它的private生怕含money属性的对象不能访问，又生怕不含money属性的对象访问了。此时我们就需要用到友元了。</p><p>友元旨在给予一个函数或类权限，使其可以访问自己的private内的函数或变量。其中这个函数可以是某个类中的成员函数。</p><ul><li>若将函数设置为友元，则可以在函数内访问和操作该类的私有成员。</li><li>若将类设置为友元，则可以在友元类的所有成员函数内访问和操作该类的私有成员。</li><li>若将函数设置为友元，则可以在函数内访问和操作该类的私有成员。</li></ul><p>友元的关键字为<code>firend</code>，要将某个东西设置为友元，只需要在类的最前面使用<code>friend &lt;函数/类声明&gt;</code>进行声明就可以了。举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jiMei</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">spurtMoney</span><span class="params">()</span></span>;<span class="comment">//设置爆金币函数为jiMei类的友元</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> nanGuiMi;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">jiMei a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spurtMoney</span><span class="params">()</span></span>&#123;<span class="comment">//爆金币函数</span></span><br><span class="line">    a.nanGuiMi++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个例子中，因为爆金币函数在jiMei类中被设置为了friend，因此可以访问jiMei类中的私有成员，也就是可以访问根据jiMei类创建的对象a中私有的nanGuiMi变量了。</p><ul><li>函数的友元声明方式为：<code>friend &lt;函数声明&gt;</code>，例如<code>friend void spurtMoney();</code></li><li>类的友元声明方式为：<code>friend &lt;类声明&gt;</code>，例如<code>friend class a;</code></li><li>类中某个函数的友元声明方式为：<code>firend &lt;函数返回类型 类::函数&gt;</code>，例如将类a中的<code>void test()</code>函数声明为友元，就是<code>friend void a::test();</code></li></ul><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h1 id="STL库"><a href="#STL库" class="headerlink" title="STL库"></a>STL库</h1><p>（Standard Template Library，STL，C++标准模板库）</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-罐装知识</title>
      <link href="/posts/53f688fc.html"/>
      <url>/posts/53f688fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="电路交换和分组交换"><a href="#电路交换和分组交换" class="headerlink" title="电路交换和分组交换"></a>电路交换和分组交换</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/Screenshot_2024-04-19-15-14-43-656_com.miui.notes.jpg" alt="Screenshot_2024-04-19-15-14-43-656_com.miui.notes" style="zoom:50%;" /></p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p><strong>描述：</strong>连接建立开始时，通信系统分配给它的资源（通道、带宽、时隙、码字等等），通信活动的整个过程中，这个连接将始终占用着。电路交换总体可以分为这三步：1. 建立（establish）连接；2. 通话；3.释放连接</p><p><strong>电路交换的优点：</strong></p><ul><li>无需额外资源开销：业务数据不含有Header，透明传输（Transparent transmission）</li><li>通信延迟小</li><li>有序传输</li><li>控制简单</li></ul><p><strong>电路交换的缺点：</strong></p><ul><li>资源利用率较低：尽管没有数据传输资源也被占用</li><li>鲁棒性差：只要所建立的物理通路中有一点出现故障，就必须拨号重新建立连接</li><li>一旦无法建立连接，通信就无法进行。</li></ul><p>在要求数据按先后顺序且以恒定速率快速传输的情况下或实时性要求较高时，使用电路交换是较为理想的选择。最典型的应用是传统电信网络。</p><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p><strong>描述：</strong>分组交换（packet switching）是将数据打包成分组（Packets）进行传输、交换。数据包包含标头(Header)，和负载(Payload)。标头包含分组的基本信息，例如地址信息，管理信息等。分组通过最优路径（取决于 路由算法）路由到目标。分组交换可细分为虚电路和数据报。分组交换的颗粒度（granularity）越小，花在header上的开销就越多。</p><p><strong>分组交换的优点：</strong></p><ul><li>线路利用率高：不同用户共享线路容量</li></ul><p><strong>分组交换的缺点：</strong></p><ul><li>更高的转发时延</li><li>可能出现拥塞问题</li></ul><p><strong>虚电路：</strong>一旦路由建立，路径便不会再做更改。它中间路由的节点只需要查看数据包从哪来，然后换上新的要到哪去的标签。转发时延小：不需要每次建立路由。帧时序确定：路径不可变换，因此链路保证时序。鲁棒性不如数据报：一旦路径中节点断开，则需重新建立连接</p><p><strong>数据报：</strong>datagram不一定会让各个数据走同样的路由。每一个packet都独自路由。因此可能出现帧乱序。但是原先路径在通信过程中不可达，也可以走其他路径，鲁棒性更高，更灵活。</p><p>典型的应用是计算机网络（internet），因为其要求来去自由的灵活性。</p><h1 id="MAC帧结构"><a href="#MAC帧结构" class="headerlink" title="MAC帧结构"></a>MAC帧结构</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240522165158941.png" alt="image-20240522165158941"></p><h1 id="传输时延和传播时延"><a href="#传输时延和传播时延" class="headerlink" title="传输时延和传播时延"></a>传输时延和传播时延</h1><h2 id="传输时延"><a href="#传输时延" class="headerlink" title="传输时延"></a>传输时延</h2><p>如果收发机传输速率为R(bps)，传输大小为B（bits），则完成发送所需的传输时延为</p><script type="math/tex; mode=display">T=\frac{B}{R}</script><p>在CSMA/CD下需要传输时延大于2倍传播时延，才可以在发送时发现碰撞</p><h2 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h2><script type="math/tex; mode=display">B=R\times \frac{d}{V}</script><p>其中：</p><ul><li>B：链路长度（单位：bit），这个链路的物理长度能容纳多长的比特流</li><li>R：数据传输速率 (单位：bps)</li><li>d：收发机间物理距离 （单位：m）</li><li>V：介质中信号传播速度（单位：m/s）</li></ul><h1 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h1><h2 id="Stop-Wait-ARQ"><a href="#Stop-Wait-ARQ" class="headerlink" title="Stop-Wait ARQ"></a>Stop-Wait ARQ</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410163738106.png" alt="image-20240410163738106"></p><ol><li>数据正常传输：接收机接收数据后，ACK下一帧的label</li><li>发送数据丢失：接收机不ACK，发送机在等待超时后重发数据</li><li>ACK信号丢失：发送机重传同一label的帧，接收机发现其和上一个为同一label，再次发送下一帧的ACK</li></ol><h2 id="Go-back-N-ARQ"><a href="#Go-back-N-ARQ" class="headerlink" title="Go back N ARQ"></a>Go back N ARQ</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417170821082.png" alt="image-20240417170821082"></p><ol><li>A-&gt;B帧损坏：<ul><li>在损坏帧出现后A持续发送，B发现帧label不连续，B会丢弃损坏帧之后的所有帧。并返回REJ(帧i)，来告知A从帧i开始重发后续所有。</li><li>在损耗帧出现后A无数据发送，B此时会认为A没有数据发送。待A的timer超时后，A向B发送 P bit = 1的RR frame，B收到后立马应答一个期望的帧。</li></ul></li><li>B-&gt;A RR损坏<ul><li>B后续还有RR发送：A可以通过后续B发送RR更新自己的窗</li><li>后续无RR发送：A的timer超时后，A向B发送 P bit = 1的RR frame，B收到后立马应答一个RR.</li></ul></li><li>REJ损坏<ul><li>A的timer超时后，A向B发送 P bit = 1的RR frame，B收到后立马应答一个想要的帧。</li></ul></li></ol><h2 id="Select-Rejective-ARQ"><a href="#Select-Rejective-ARQ" class="headerlink" title="Select Rejective ARQ"></a>Select Rejective ARQ</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417174743653.png" alt="image-20240417174743653"></p><ol><li>A-&gt;B帧损坏：<ul><li>在损坏帧出现后A持续发送，B发现帧label不连续，B会丢弃损坏帧,但接收之后的帧。并返回SREJ(帧i)，来告知A从帧i开始重发后续所有。</li><li>在损耗帧出现后A无数据发送，B此时会认为A没有数据发送。待A的timer超时后，A向B发送 P bit = 1的RR frame，B收到后立马应答一个期望的帧。</li></ul></li><li>B-&gt;A RR损坏<ul><li>B后续还有RR发送：A可以通过后续B发送RR更新自己的窗</li><li>后续无RR发送：A的timer超时后，A向B发送 P bit = 1的RR frame，B收到后立马应答一个RR.</li></ul></li><li>SREJ损坏<ul><li>A的timer超时后，A向B发送 P bit = 1的RR frame，B收到后立马应答一个想要的帧。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control-Systems-Part2-Lectrue5-PID调谐和数字补偿器设计</title>
      <link href="/posts/8220cd2.html"/>
      <url>/posts/8220cd2.html</url>
      
        <content type="html"><![CDATA[<h1 id="PID控制器调谐"><a href="#PID控制器调谐" class="headerlink" title="PID控制器调谐"></a>PID控制器调谐</h1><h2 id="PID三个部分对系统响应的贡献"><a href="#PID三个部分对系统响应的贡献" class="headerlink" title="PID三个部分对系统响应的贡献"></a>PID三个部分对系统响应的贡献</h2><p>在Part1中详细介绍和分析过PID控制器，这里主要介绍一个调谐原则。回顾一下，PID的通式是：</p><script type="math/tex; mode=display">u(t)=K_pe(t)+K_i\int e(t)dt+K_d\frac{de(t)}{dt}</script><p>写成并联形式是：</p><script type="math/tex; mode=display">C(s)=K_p+\frac{K_i}{s}+K_ds</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622151311788.png" alt="image-20240622151311788"></p><p>写成标准形式是：</p><script type="math/tex; mode=display">K_p(1+\frac{1}{sT_i}+sTd)</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622151351644.png" alt="image-20240622151351644"></p><script type="math/tex; mode=display">C(s)=\frac{U(s)}{E(s)}=K_p+\frac{K_i}{s}+K_ds=\frac{K_ps+K_i+K_ds^2}{s}</script><p>PID控制器会给系统引入一个位于原点的极点，和2个零点。由前面介绍的零极点分析系统响应的法则，可以导出其各个部分对系统瞬态响应的贡献：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240617202208031.png" alt="image-20240617202208031"></p><p>$K_p$的贡献是：</p><ul><li>减少rise time $t_r$</li><li>但是无法消除稳态误差</li></ul><p><strong>决定响应速度和力度，过小响应慢，过大会产生振荡，是I和D的基础。</strong></p><p>$K_i$的贡献是：</p><ul><li>消除稳态误差</li><li>但是会削减瞬态响应</li><li>会削减系统稳定性</li></ul><p><strong>在有系统误差和外力作用时消除偏差、提高精度，同时也会增加响应速度，产生过冲，过大会产生振荡。</strong></p><p>$K_d$的贡献是：</p><ul><li>增加稳定性（包含减少过冲 overshoot $M_p$ 和 改善瞬态响应）</li><li>但是会导致系统对高频噪声更敏感</li></ul><p><strong>抑制过冲和振荡，过小系统会过冲，过大会减慢响应速度。另外一个作用是抵抗外界的突发干扰，阻止系统的突变</strong></p><p>总结为下表：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622151052112.png" alt="image-20240622151052112"></p><h2 id="PID调谐"><a href="#PID调谐" class="headerlink" title="PID调谐"></a>PID调谐</h2><h3 id="广泛流传的经验法整定"><a href="#广泛流传的经验法整定" class="headerlink" title="广泛流传的经验法整定"></a>广泛流传的经验法整定</h3><p>所谓PID调谐，就是在系统的过冲、上升时间、下降时间、稳态误差之间取一个可以接受的平衡。</p><p>有一些广泛流传的PID调谐的口诀，例如《化工自动化》一书中的参数整定口诀：</p><p>参数整定寻最佳，从大到小顺次查。先是比例后积分，最后再把微分加。曲线振荡很频繁，比例度盘要放大。曲线漂浮绕大弯，比例度盘往小扳。曲线偏离回复慢，积分时间往下降。曲线波动周期长，积分时间再加长。 理想曲线两个波，调节过程高质量。</p><h3 id="齐格勒－尼科尔斯方法（Ziegler-Nichols-method）"><a href="#齐格勒－尼科尔斯方法（Ziegler-Nichols-method）" class="headerlink" title="齐格勒－尼科尔斯方法（Ziegler-Nichols method）"></a>齐格勒－尼科尔斯方法（Ziegler-Nichols method）</h3><p>齐格勒－尼科尔斯方法的调试方式为：</p><ol><li>首先将积分和微分增益设置为0，然后比例增益从零开始逐渐增加，直到到系统临界稳定条件（marginal stability）,此时控制器输出值以恒定值振荡。拿到临界震荡的下critical gain $K_c$和critical frequency $\omega_c$，$T_c=\frac{2\pi}{\omega_c}$</li><li>根据不同系统的要求，遵照下表找一个合适的经验值</li></ol><div class="table-container"><table><thead><tr><th>控制类型</th><th>$K_p$</th><th>$K_i$</th><th>$K_d$</th></tr></thead><tbody><tr><td>P</td><td>$0.5K_c$</td><td>-</td><td>-</td></tr><tr><td>PI</td><td>$0.45K_c$</td><td>$0.54K_c/T_c$</td><td></td></tr><tr><td>PD</td><td>$0.8K_c$</td><td>-</td><td>$0.1K_cT_c$</td></tr><tr><td>经典PID</td><td>$0.6K_c$</td><td>$1.2K_c/T_c$</td><td>$0.075K_cT_c$</td></tr><tr><td>Pessen Integral Rule</td><td>$0.7K_c$</td><td>$1.75K_c/T_c$</td><td>$0.105K_cT_c$</td></tr><tr><td>部分过冲</td><td>$0.2K_c$</td><td>$0.4K_c/T_c$</td><td>$0.066K_cT_c$</td></tr></tbody></table></div><p>这个表上面的值都是经验值，不同地方可能不一样。上表是简中互联网广泛流传的表。</p><p><strong>Dr.Huda PPT上的法则是这样</strong>：（注：$T_i=\frac{K_p}{K_i}$，$T_d=\frac{K_d}{K_p}$）</p><div class="table-container"><table><thead><tr><th>控制类型</th><th>$K_p$</th><th>$T_i$</th><th>$T_d$</th></tr></thead><tbody><tr><td>P</td><td>$0.5K_c$</td><td>-</td><td>-</td></tr><tr><td>PI</td><td>$0.4K_c$</td><td>$0.8T_c$</td><td>-</td></tr><tr><td>PID</td><td>$0.6K_c$</td><td>$0.5T_c$</td><td>$0.125T_c$</td></tr></tbody></table></div><div class="note info flat"><p><del>实操PID只需要套公式就行了，但是考试要考虑的事情就很多了</del></p><p>实际操作时调PID依照积分、微分、比例三个部分对系统瞬态响应的影响来调即可，不一定会完全遵照这些经验表格。</p></div><h1 id="模拟补偿器数字化"><a href="#模拟补偿器数字化" class="headerlink" title="模拟补偿器数字化"></a>模拟补偿器数字化</h1><p>模拟补偿器数字化法设计可以概括为如下三步：</p><ol><li>按照系统要求设计模拟补偿器</li><li>通过下面介绍的映射规则将它数字化</li><li>代入数字控制系统的采样周期，检查系统响应是否满足要求。如果不满足，重复步骤1和2。</li></ol><h2 id="模拟系统离散化的映射方法："><a href="#模拟系统离散化的映射方法：" class="headerlink" title="模拟系统离散化的映射方法："></a>模拟系统离散化的映射方法：</h2><ul><li>前向欧拉法（Euler’s forward method）：$s\approx\frac{z-1}{T}$</li><li>后向欧拉法（Euler’s backward method）：$s\approx\frac{z-1}{Tz}$</li><li>双线性法/塔斯汀法(Tustin’s method/bilinear transformation)：$s\approx\frac{2}{T}\frac{z-1}{z+1}$</li><li>零阶保持器（Zero-Order hold）:$C(z)=(\frac{z-1}{z})Z[\frac{C(s)}{s}]$</li></ul><h3 id="举个例子：Tustin’s-method离散化Ziegler-Nichols-method调谐的PI控制器"><a href="#举个例子：Tustin’s-method离散化Ziegler-Nichols-method调谐的PI控制器" class="headerlink" title="举个例子：Tustin’s method离散化Ziegler-Nichols method调谐的PI控制器"></a>举个例子：Tustin’s method离散化Ziegler-Nichols method调谐的PI控制器</h3><p><em>已知：系统的传输函数和框图为，其$K_c=201,\omega_c=14.2$：</em></p><script type="math/tex; mode=display">G(s)=\frac{30}{s(s^2+30s+200)}</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622161042296.png" alt="image-20240622161042296"></p><p><em>要求：使用Ziegler-Nichols method设计PI控制器，采样间隔为0.1s,并使用(i)Tustin method (ii)ZOH将其数字化</em></p><p><strong>step1：使用Ziegler-Nichols method为系统调谐PI控制器</strong></p><script type="math/tex; mode=display">K_p=0.4K_c=80.4,T_i=0.8\times\frac{2\pi}{\omega_c}=0.35398</script><script type="math/tex; mode=display">\frac{K_p}{K_i}=T_i\to K_i=\frac{K_p}{T_i}=227.25</script><p>因此：</p><script type="math/tex; mode=display">C(s)=80.4+\frac{227.25}{s}</script><p><strong>step2-(i)：使用Tustin method 将系统离散化</strong></p><p>将$s\approx\frac{2}{T}\frac{z-1}{z+1}$代入$C(s)$</p><script type="math/tex; mode=display">C(z)=K_p+K_i\times\frac{T}{2}\frac{z+1}{z-1}=\frac{zK_pz-2K_p+K_iTz+K_iT}{2(z-1)}</script><p>代入$T=0.1$</p><script type="math/tex; mode=display">C(s)=\frac{91.76z-69.04}{(z-1)}</script><p><strong>step2-(ii)：使用ZOH将系统离散化</strong></p><script type="math/tex; mode=display">C(z)=\frac{z-1}{z}Z[\frac{C(s)}{s}]=(\frac{z-1}{z})Z[\frac{80.4}{s}+\frac{227.25}{s^2}]</script><script type="math/tex; mode=display">=(\frac{z-1}{z})(80.4\frac{z}{z-1}+227.25T\frac{z}{(z-1)^2})</script><script type="math/tex; mode=display">=\frac{80.4(z-1)+227.254T}{z-1}</script><p>代入$T=0.1$</p><script type="math/tex; mode=display">C(z)=\frac{80.4z-57.68}{z-1}</script><h1 id="根轨迹设计法"><a href="#根轨迹设计法" class="headerlink" title="根轨迹设计法"></a>根轨迹设计法</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>$F(z)$的模长和角度可以表示为多个复数贡献的形式，例如下面这个：</p><script type="math/tex; mode=display">F(z)=\frac{a_3+ib_3}{(a_1+ib_1)(a_2+ib_2)}=\frac{r_3\angle\theta_3}{r_1\angle\theta_1r_2\angle\theta_2}</script><script type="math/tex; mode=display">|F(z)|=\frac{r_3}{r_2r_1}</script><script type="math/tex; mode=display">\angle F(z)=\angle(\theta_3-\theta_1-\theta_2)</script><p>假设现在有一个系统函数，它在$F(z)=(z+3)$。那么当$z=2+2j$时，系统函数的向量值为$(5+2j)$。</p><p>这里有一个很巧的事情：$(z+3)$的零点是$z=-3$。当$z=2+2j$时，系统函数的向量$(5+2j)$就等于从它贡献的零点连到$z+zj$的向量，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622182445261.png" alt="image-20240622182445261"></p><p>假设一个系统函数有好几个零极点，例如$F(s)=\frac{s+2}{s(s+1)}$，那么当s为某一个特定值时，系统函数内每一个复数分量就可以表示为他们贡献到零极点到这个特定s的连线，叠加在一起就是系统函数的值。例如当$s=-1+\sqrt{3}j$时</p><p>系统有零点s=-2，有极点s=0，-1。从-2，-1，0连接三条线到s，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622183316326.png" alt="image-20240622183316326"></p><p>可以分别求得其长度为$l_1=2,l_2=\sqrt{3},l_3=2$；其角度为$\theta_1=\frac{\pi}{3},\theta_1=\frac{\pi}{2},\theta_1=\frac{2\pi}{3}$</p><p>按照上面介绍的系统函数内各个复数叠加的理论，可以求得这个系统函数$|F(s)|=\frac{2}{2\times\sqrt{3}}=\frac{\sqrt{3}}{3}$，$\angle F(s)=\theta_3-\theta_2-\theta_1=-\frac{5}{6}\pi$</p><p>在前一章节<em>从特征函数的角度理解根</em>小节中提到过，如果要使得某种情况（z或者s等于某个定值时）的特征函数成立，其CLTF$F(z)$必须满足：</p><ul><li>$|F(z)|=1$</li><li>$\angle F(z)=\pm180^\circ(2k+1),k=0,1,2..$</li></ul><p>那么，理论上来说，我们可以给系统安插一个通式如下的补偿器，来使得$s$或$z$为某个人为指定的定值时，特征方程成立，即，满足上面的条件。此时系统的特征方程有一个根就会出现在这个人为指定的位置。</p><script type="math/tex; mode=display">G_D(z)=K\frac{z+\alpha}{z+\beta}=\frac{Kr_n\angle\theta_n}{r_d\angle\theta_d}</script><p>由于系统的特征方程根位置和系统当前的响应有直接关系，因此可以通过将对系统响应的需求转化为对根出现在某个点的需求。然后根据需求按照上面的法则设计补偿器。这就是根轨迹补设计法。</p><p>常用的转化公式为：（其中$\omega_d$为受阻震荡频率，$\omega_s$为采样频率，$\omega_n$为自然频率，$\zeta$为阻尼率）</p><script type="math/tex; mode=display">|z|=e^{T\sigma}=e^{-T\zeta\omega_n}=exp(-\frac{2\pi\zeta}{\sqrt{1-\zeta^2}}\frac{\omega_d}{\omega_s})</script><script type="math/tex; mode=display">\angle z=T\omega_d=\frac{2\pi\omega_d}{\omega_s}(rad/s)</script><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>现有如下系统，要求其阻尼比$\zeta=0.5$，setting time $t_s=2s$</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622172012219.png" alt="image-20240622172012219"></p><p><strong>Step1：将响应需求转化为根需求</strong></p><script type="math/tex; mode=display">t_s=\frac{4}{\zeta\omega_n}=2=\frac{4}{0.5\omega_n}\to\omega_n=4</script><script type="math/tex; mode=display">\omega_d=\omega_n\sqrt{1-\zeta^2}=3.464</script><p>假设采样周期$T=0.2$验证一下它符不符合采样的经验法则（在笔记ch4内介绍）：</p><script type="math/tex; mode=display">\omega_s=\frac{2\pi}{T}=31.42,\frac{\omega_s}{\omega_d}=9.07>8</script><p>因此符合经验法则的要求。套用前面的转化公式：</p><script type="math/tex; mode=display">|z|=exp(-\frac{2\pi\times0.5}{\sqrt{1-0.5^2}}\frac{3.464}{31.42})=0.6703</script><script type="math/tex; mode=display">\angle z=T\omega_d=0.2\times3.464=0.6928rad/s=36.69451605^\circ</script><p>这就是我们补偿后的人为确定的z，我们希望当z等于这个值时，特征方程成立。将其写为复数形式：</p><script type="math/tex; mode=display">Real=0.6703\times cos(36.69451605)=0.5158;Img=0.6703\times cos(36.69)=0.4281</script><script type="math/tex; mode=display">P=0.5158+j0.4281</script><p><strong>step2：将ZOH和模拟系统构成的新传输函数解出</strong></p><p>这里直接套用前面介绍的ZOH输入模拟系统的转化公式：</p><script type="math/tex; mode=display">G_{ZA}(z)=\frac{z-1}{z}Z[\frac{G(s)}{s}]=\frac{z-1}{z}Z[\frac{1}{s^2(s+2)}]=\frac{z-1}{z}Z[\frac{1}{2}(\frac{1}{s^2}-\frac{1}{s(s+2)})]</script><script type="math/tex; mode=display">=\frac{1}{2}\frac{z-1}{z}(T\frac{z}{(z-1)^2}-\frac{z(1-e^{-2T})}{2(z-1)(z-e^{-2T})})</script><p>代入$T=0.2$</p><script type="math/tex; mode=display">G_{ZA}(z)=\frac{0.01758(z+0.8760)}{(z-1)(z-0.6703)}</script><p><strong>Step3：计算系统现有零极点的角度贡献</strong></p><p>那么这个系统现在有：</p><ul><li>zeros：-0.8760</li><li>poles：1，0.6703</li></ul><p>我们希望系统达到这个状态：（$P=0.5158+j0.4281$）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622175921165.png" alt="image-20240622175921165" style="zoom:50%;" /></p><p>先计算系统自带的零极点的角度贡献：</p><p>z=1的极点贡献了：（这里变成正数是因为它转过180度了，由复数角度的定义得来的。详见复变函数）</p><script type="math/tex; mode=display">arctan(\frac{0.4281-0}{0.5158-1})=-41.48^\circ=138.52^\circ</script><p>z=0.6703的极点贡献了：</p><script type="math/tex; mode=display">arctan(\frac{0.4281-0}{0.5158-0.6703})=-70.16^\circ=109.84^\circ</script><p>z=-0.8760的零点贡献了：</p><script type="math/tex; mode=display">arctan(\frac{0.4281-0}{0.5158-(-0.8760)})=17.10^\circ</script><p><strong>Step4：计算系统还需要的角度(补偿器提供的)</strong></p><p>要使得特征方程的根出现在我们想要的这个地方，需要让当z=P时，特征方程成立。也就是说OLTF的角度要满足$\angle F(z)=\pm180^\circ(2k+1),k=0,1,2..$，也就是系统自带的这些角度贡献+补偿器的角度贡献要满足$\pm180$度</p><p>补偿器通式为$K\frac{z+\alpha}{z+\beta}$，会引入一个极点和一个零点。为了简化计算，我们让它的零点贡献和系统自带的一个极点贡献抵消掉。这里取$z+\alpha=(z-0.6703)$来抵消，即$\alpha=0.6703$（$-70.16^\circ$极点贡献被抵消了）</p><script type="math/tex; mode=display">C(z)G(z)=\frac{(z-0.6703)}{z+\beta}\frac{0.01758(z+0.8760)}{(z-1)(z-0.6703)}</script><p>现在我们只需要计算$C(z)$中的这个极点，让系统角度满足即可</p><script type="math/tex; mode=display">\angle C(z)G(z)=(z=-0.8760的零点贡献)-(z=1的极点贡献)-(补偿器极点贡献)=\pm180^\circ</script><script type="math/tex; mode=display">=17.10^\circ-138.52^\circ-(补偿器极点)=\pm180^\circ</script><p>如果取$-180$，那么补偿器极点就需要贡献$-180+138.52+17.10=58.58^\circ$</p><script type="math/tex; mode=display">tan(58.58)=\frac{0.4281}{0.5158-\beta}</script><script type="math/tex; mode=display">\beta=0.2543</script><p>至此我们得到了补偿器的$\alpha$和$\beta$参数：</p><script type="math/tex; mode=display">C(z)=K\frac{z-0.6703}{z-0.2543}</script><p><strong>Step3：计算系统现有零极点的模长贡献</strong></p><script type="math/tex; mode=display">C(z)G_{ZA}(z)=K\frac{z-0.6703}{z-0.2543}\frac{0.01758(z+0.8760)}{(z-1)(z-0.6703)}=K\frac{0.01758(z+0.8760)}{(z-0.2543)(z-1)}</script><p>系统现有的模长贡献有：（目标点：$P=0.5158+j0.4281$）</p><ul><li><p>分子(z+0.8760)贡献了：$\sqrt{(0.5158-(-0.8760))^2+(-0.4281)^2}=\sqrt{(1.3918)^2+(0.4281)^2}$</p></li><li><p>分母(z-0.2543)贡献了：$\sqrt{(0.5158-0.2543)^2+(-0.4281)^2}=\sqrt{(0.2615)^2+(0.4281)^2}$</p></li><li>分母(z-1)贡献了：$\sqrt{(0.5158-1)^2+(-0.4281)^2}=\sqrt{(0.4842)^2+(0.4281)^2}$</li></ul><p>$|F(z)|=1$，即：</p><script type="math/tex; mode=display">0.01758K\times\frac{\sqrt{(1.3918)^2+(0.4281)^2}}{\sqrt{(0.2615)^2+(0.4281)^2}\times\sqrt{(0.4842)^2+(0.4281)^2}}=1</script><script type="math/tex; mode=display">0.01758K\times4.491218756=1</script><script type="math/tex; mode=display">K=\frac{1}{0.01758\times4.491218756}=12.67</script><p>至此，我们得到了补偿器的表达式：</p><script type="math/tex; mode=display">C(z)=12.67\frac{z-0.6703}{z-0.2543}</script>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control-Systems-Part2-Lectrue4-根轨迹</title>
      <link href="/posts/b7f662c5.html"/>
      <url>/posts/b7f662c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们在研究系统极点的路径时，都是对闭环传递函数而言的。因为闭环传递函数的零极点可以直接反应系统的一些特性，例如稳定性，收敛速度，是否存在过冲等等。</p><p>考虑下图这样的一个系统，其系统闭环传递函数为$\frac{KG(s)}{1+KG(s)H(s)}$。我们研究的就是$1+KG(s)H(s)=0$时产生的极点。但是，我们的分析对象其实是$G(s)H(s)$这个开环传递函数，我们是通过分析OLTF，来研究CLTF的根。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621195148094.png" alt="image-20240621195148094"></p><p>而所谓根轨迹，就是随着增益K的变换，CLTF极点的移动路径。而这个轨迹可以通过CLTF，即$G(s)H(s)$的极点和零点绘制出来。</p><h1 id="根轨迹的基本特性"><a href="#根轨迹的基本特性" class="headerlink" title="根轨迹的基本特性"></a>根轨迹的基本特性</h1><div class="note info flat"><p>Dr.Huda PPT上的规则比较基础，但下一章会用到超出这个范围外的知识。这个视频讲了更普适的规则<a href="https://www.bilibili.com/video/BV19E411a7jk/?spm_id_from=333.788&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">【自动控制原理】8_根轨迹_Part2_根轨迹手绘技巧_哔哩哔哩_bilibili</a>。下面的笔记是结合二者写的</p></div><h2 id="根轨迹的数种规则"><a href="#根轨迹的数种规则" class="headerlink" title="根轨迹的数种规则"></a>根轨迹的数种规则</h2><h3 id="规则1：系统的根轨迹条数等于系统极点个数或零点个数（取最大的那个）"><a href="#规则1：系统的根轨迹条数等于系统极点个数或零点个数（取最大的那个）" class="headerlink" title="规则1：系统的根轨迹条数等于系统极点个数或零点个数（取最大的那个）"></a>规则1：系统的根轨迹条数等于系统极点个数或零点个数（取最大的那个）</h3><p>例如$G(s)=\frac{(s+4)(s+1)}{(s+3)(s+0.5)}$，系统有2个零点2个极点，Max(2,2)=2，因此系统有两条根轨迹</p><h3 id="规则2：根轨迹总是从OLTF的极点移动到OLTF的零点"><a href="#规则2：根轨迹总是从OLTF的极点移动到OLTF的零点" class="headerlink" title="规则2：根轨迹总是从OLTF的极点移动到OLTF的零点"></a>规则2：根轨迹总是从OLTF的极点移动到OLTF的零点</h3><p>我们先来研究一下系统的特征方程。为了简化举例，这里考虑单位反馈系统，其传递函数是：</p><script type="math/tex; mode=display">\frac{1}{1+KG(s)}</script><p>其特征方程是：</p><script type="math/tex; mode=display">1+KG(s)=0</script><p>其中，$G(s)$称为Loop gain（$KG(s)$才是OLTF），其可以拆分为分子和分母部分：$G(s)=\frac{M(s)}{D(s)}$，特征方程为</p><script type="math/tex; mode=display">1+K\frac{M(s)}{D(s)}=0</script><p>改写一下就是：</p><script type="math/tex; mode=display">D(s)+KN(s)=0</script><p>前面提到，根轨迹是$K=0\to\infty$。当$K=0$时，特征方程的是$D(s)=0$，因此是OLTF的极点；当$K=\infty$时，特征方程是$N(s)=0$，因此是OLTF的零点。</p><h3 id="规则3：实轴上的根轨迹存在于从右向左数，OLTF的奇数个极点或零点的左侧。"><a href="#规则3：实轴上的根轨迹存在于从右向左数，OLTF的奇数个极点或零点的左侧。" class="headerlink" title="规则3：实轴上的根轨迹存在于从右向左数，OLTF的奇数个极点或零点的左侧。"></a>规则3：实轴上的根轨迹存在于从右向左数，OLTF的奇数个极点或零点的左侧。</h3><p>如下图所示。<strong>需要注意的是，只在实轴上有这个规则</strong>。</p><p><img src="C:\Users\17997\AppData\Roaming\Typora\typora-user-images\image-20240621203817692.png" alt="image-20240621203817692"></p><h3 id="规则4：如果复数根存在，则其一定是共轭的，即沿着实轴对称"><a href="#规则4：如果复数根存在，则其一定是共轭的，即沿着实轴对称" class="headerlink" title="规则4：如果复数根存在，则其一定是共轭的，即沿着实轴对称"></a>规则4：如果复数根存在，则其一定是共轭的，即沿着实轴对称</h3><h3 id="规则5：若极点和零点的个数不足以让它们成对，则会孤立的根轨迹会指向无穷或从无穷来"><a href="#规则5：若极点和零点的个数不足以让它们成对，则会孤立的根轨迹会指向无穷或从无穷来" class="headerlink" title="规则5：若极点和零点的个数不足以让它们成对，则会孤立的根轨迹会指向无穷或从无穷来"></a>规则5：若极点和零点的个数不足以让它们成对，则会孤立的根轨迹会指向无穷或从无穷来</h3><ul><li>对极点而言，它将指向无穷。如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621204526101.png" alt="image-20240621204526101"></p><ul><li>对零点而言，将从无穷指向它。如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621204542325.png" alt="image-20240621204542325"></p><h3 id="规则6：根轨迹沿渐近线移动。渐近线求法如下"><a href="#规则6：根轨迹沿渐近线移动。渐近线求法如下" class="headerlink" title="规则6：根轨迹沿渐近线移动。渐近线求法如下"></a>规则6：根轨迹沿渐近线移动。渐近线求法如下</h3><p>记极点个数为n，零点个数为m。渐近线与实轴的交点是：</p><script type="math/tex; mode=display">\sigma=\frac{极点的和-零点的和}{n-m}</script><p>渐近线与实轴的夹角是：</p><script type="math/tex; mode=display">\theta=\frac{2q+1}{n-m}\pi,q=0,1,...,n-m-1</script><p><em>举个例子：对于$\frac{1}{(s+1)(s+2)}$</em></p><script type="math/tex; mode=display">\sigma=\frac{-1-2+0}{2}=-1.5</script><script type="math/tex; mode=display">\theta_1=\frac{1}{2}\pi,\theta_2=\frac{3}{2}\pi</script><p>如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621205304651.png" alt="image-20240621205304651"></p><h3 id="规则7：两条根轨迹永不相交"><a href="#规则7：两条根轨迹永不相交" class="headerlink" title="规则7：两条根轨迹永不相交"></a>规则7：两条根轨迹永不相交</h3><h3 id="规则8：如果至少有两条根轨迹指向无穷，则所有根的合是一个常数"><a href="#规则8：如果至少有两条根轨迹指向无穷，则所有根的合是一个常数" class="headerlink" title="规则8：如果至少有两条根轨迹指向无穷，则所有根的合是一个常数"></a>规则8：如果至少有两条根轨迹指向无穷，则所有根的合是一个常数</h3><h3 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h3><ul><li><p>规则1：系统的根轨迹条数等于系统极点个数或零点个数（取最大的那个）</p></li><li><p>规则2：根轨迹总是从OLTF的极点移动到OLTF的零点</p></li><li><p>规则3：实轴上的根轨迹存在于从右向左数，OLTF的奇数个极点或零点的左侧。</p></li><li><p>规则4：如果复数根存在，则其一定是共轭的，即沿着实轴对称</p></li><li><p>规则5：若极点和零点的个数不足以让它们成对，则会孤立的根轨迹会指向无穷或从无穷来（极点无穷去，零点无穷来）</p></li><li><p>规则6：根轨迹沿渐近线移动，渐近线与实轴交点：$\sigma=\frac{极点的和-零点的和}{n-m}$，与实轴角度：$\theta=\frac{2q+1}{n-m}\pi,q=0,1,…,n-m-1$。（其中n为极点个数，m为零点个数）</p></li><li><p>规则7：两条根轨迹永不相交</p></li><li><p>规则8：如果至少有两条根轨迹指向无穷，则所有根的合是一个常数</p></li></ul><h2 id="从特征函数的角度理解根"><a href="#从特征函数的角度理解根" class="headerlink" title="从特征函数的角度理解根"></a>从特征函数的角度理解根</h2><div class="note info flat"><p>这里的东西会在下一章设计补偿器用到</p></div><h3 id="特征方程对OLTF提出的要求"><a href="#特征方程对OLTF提出的要求" class="headerlink" title="特征方程对OLTF提出的要求"></a>特征方程对OLTF提出的要求</h3><p>回看特征方程：</p><script type="math/tex; mode=display">1+KG(z)=0</script><p>$KG(z)$为系统OLTF，如果将其记为$F(Z)$，则有：</p><script type="math/tex; mode=display">1+F(z)=0,F(z)=-1</script><p>这就要求复数$F(z)$满足：</p><script type="math/tex; mode=display">|F(z)|=1</script><script type="math/tex; mode=display">\angle F(z)=\pm180^\circ(2k+1),k=0,1,2,...</script><h3 id="F-z-的模长和角度"><a href="#F-z-的模长和角度" class="headerlink" title="$F(z)$的模长和角度"></a>$F(z)$的模长和角度</h3><p>对于任意的$F(z)$，其可以被拆分为多个复数相乘，例如如下例子</p><script type="math/tex; mode=display">F(z)=\frac{a_3+ib_3}{(a_1+ib_1)(a_2+ib_2)}=\frac{r_3\angle\theta_3}{r_1\angle\theta_1r_2\angle\theta_2}</script><p>此时$|F(z)|$和$\angle F(z)$可以表示为：</p><script type="math/tex; mode=display">|F(z)|=\frac{r_3}{r_2r_1}</script><script type="math/tex; mode=display">\angle F(z)=\angle(\theta_3-\theta_1-\theta_2)</script><h2 id="Breakaway-和-Breakin-ponit-的计算"><a href="#Breakaway-和-Breakin-ponit-的计算" class="headerlink" title="Breakaway 和 Breakin ponit 的计算"></a>Breakaway 和 Breakin ponit 的计算</h2><p>根轨迹相离的地方叫做Breakaway Point, 重新相交的地方叫做Breakin Point。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621221733986.png" alt="image-20240621221733986" style="zoom:50%;" /></p><p>如果将OLTF$F(z)$拆分为分子分母的形式，特征方程可以写为：</p><script type="math/tex; mode=display">1+\frac{KN(z)}{D(z)}=0</script><script type="math/tex; mode=display">K=-\frac{D(z)}{N(z)}</script><p>对k求导：($上导下不导-下导上不不导/分母^2$)</p><script type="math/tex; mode=display">\frac{dK}{dz}=-\frac{D'(z)N-N'(z)D(z)}{N^2(z)}</script><p>让$-\frac{D’(z)N-N’(z)D(z)}{N^2(z)}=0$，解出来的z就是breakout 和 breakin point</p><p><em>举个例子，对于系统函数$G(z)=\frac{(z+0.5)}{(z-1)(z-0.1)}$</em></p><script type="math/tex; mode=display">K=-\frac{(z-1)(z-0.1)}{(z+0.5)}</script><script type="math/tex; mode=display">\frac{dK}{dz}=-\frac{[(z-1)+(z-0.1)](z+0.5)-(z-1)(z-0.1)}{(z+0.5)^2}=-\frac{z^2+z-0.65}{(z+0.5)^2}</script><p>令$-\frac{z^2+z-0.65}{(z+0.5)^2}=0$，即$z^2+z-0.65=0$，解出来$z_1=0.4487,z_2=-1.4487$。由于原loop gain的极点分别在1和0.1，而零点在-0.5，因此靠左的$z_2$是Break in point，$z_1$是Break out。它对应的图像就是这一小节开头的那张图。</p><h1 id="从根的角度研究采样周期T对系统的影响"><a href="#从根的角度研究采样周期T对系统的影响" class="headerlink" title="从根的角度研究采样周期T对系统的影响"></a>从根的角度研究采样周期T对系统的影响</h1><h2 id="T对系统稳定性的影响"><a href="#T对系统稳定性的影响" class="headerlink" title="T对系统稳定性的影响"></a>T对系统稳定性的影响</h2><p>考虑下图含ZOH的系统</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622111617739.png" alt="image-20240622111617739"></p><script type="math/tex; mode=display">G_{ZA}(z)=(\frac{z-1}{z})Z[\frac{G(s)}{s}]=(\frac{z-1}{z})Z[\frac{K}{s^2(s+1)}]</script><script type="math/tex; mode=display">=K(\frac{z-1}{z})Z[\frac{1}{s^2}-\frac{1}{s(s+1)}]=K\bigg(\frac{z-1}{z}\bigg)\bigg(T\frac{z}{(z-1)^2}-\frac{z(1-e^{-T})}{(z-1)(z-e^{-T})}\bigg)</script><script type="math/tex; mode=display">=K\frac{z(T-1+e^{-T})-Te^{-T}+1-e^{-T}}{(z-1)(z-e^{-T})}</script><ul><li>T=1s时，解出poles:1，0.3678；zeros：-0.7181</li><li>T=2s时，解出poles:1，0.1353；zeros：0</li><li>T=2s时，解出poles:1，0.0183；zeros：0.301</li></ul><p>分别代入三个T，使用$\frac{dK}{dz}=-\frac{D’(z)N-N’(z)D(z)}{N^2(z)}=0$解出三个T下的break in 和 Break out point。画出根轨迹，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622112551170.png" alt="image-20240622112551170"></p><p>可以看到，T=1时根轨迹出单位圆的K=2.3925；T=2时出单位圆的K=1.4557；T=4时出单位圆的K=0.9653。<strong>因此，采样周期大，系统稳定性越差。</strong></p><p>经验法则是：</p><ul><li><strong>如果闭环系统欠阻尼，则单位震荡周期内进行 8 到 10 次采样</strong>。</li><li><strong>如果闭环系统过阻尼，在阶跃响应的上升时间内采样 8 到 10 次</strong></li></ul><h2 id="T对系统瞬态响应的影响"><a href="#T对系统瞬态响应的影响" class="headerlink" title="T对系统瞬态响应的影响"></a>T对系统瞬态响应的影响</h2><p>我们在前面介绍过，在z域下，根越靠近$\pm 180^\circ$，单位阶跃响应的震荡频率越；根越靠近单位圆，瞬态响应收敛越慢。</p><p><strong>观察下图的根轨迹，对于更大的T，break in point会来得更快，走出单位圆的K也会更小，即根会越快到180度，同时收敛也更慢。体现在瞬态响应上就如下图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622114032346.png" alt="image-20240622114032346"></p><h2 id="T对系统稳态误差的影响"><a href="#T对系统稳态误差的影响" class="headerlink" title="T对系统稳态误差的影响"></a>T对系统稳态误差的影响</h2><p>考虑下图系统</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240622114320047.png" alt="image-20240622114320047"></p><p>$G_{ZA}$的求法前面已经演示很多，这里不再赘述。系统特征方程为：</p><script type="math/tex; mode=display">1+K\frac{z}{z-1}\frac{(1-e^{-T})}{(z-e^{-T})}=0</script><p>考虑unit ramp input下的稳态误差$k_v$。代入前面介绍的公式：</p><script type="math/tex; mode=display">K_v=\lim_{t\to1}\frac{(1-z^{-1})GH(z)}{T}</script><ul><li>T=0.5s时，$GH(z)=\frac{0.3935Kz}{(z-1(z-0.6065))}$</li></ul><p>代入算出$K_v=4$，$e_{ss}=\frac{1}{K_v}=0.25$</p><ul><li>T=1s时，$GH(z)=\frac{0.6321Kz}{(z-1(z-0.3679))}$</li></ul><p>代入算出$K_v=2$，$e_{ss}=\frac{1}{K_v}=0.5$</p><ul><li>T=2s时，$GH(z)=\frac{0.8647Kz}{(z-1(z-0.1353))}$</li></ul><p>代入算出$K_v=1$，$e_{ss}=\frac{1}{K_v}=1$</p><p><strong>由此可见，T越大，系统的稳态误差越大</strong></p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control-Systems-Part2-Lectrue1~3-数字控制系统基础</title>
      <link href="/posts/eb15a674.html"/>
      <url>/posts/eb15a674.html</url>
      
        <content type="html"><![CDATA[<h1 id="数字控制系统简介"><a href="#数字控制系统简介" class="headerlink" title="数字控制系统简介"></a>数字控制系统简介</h1><p>数字控制系统的核心是使用MCU、电脑之类的控制器通过软件的形式对数据进行处理。而不是模拟信号那样通过模拟器件来构成积分器微分器等等。</p><p>数字控制系统具有如下优点：</p><ul><li>对噪声的鲁棒性好：数字信号可以无损传输，只要不超过门限值，数字信号读取出来都是无损的。</li><li>灵活性高：数字控制系统主要通过软件编程来实现对数据的处理，这样的系统灵活性高，重新刷写程序即可设计新的系统</li><li>成本：数字系统的可靠性在升高而成本在下降</li><li>易用性：大规模集成电路可以更轻易地集成数字IC，这对数字信号处理更加友好</li></ul><h1 id="数字控制系统的基础-ADC和DAC"><a href="#数字控制系统的基础-ADC和DAC" class="headerlink" title="数字控制系统的基础-ADC和DAC"></a>数字控制系统的基础-ADC和DAC</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620225053422.png" alt="image-20240620225053422" style="zoom:80%;" /></p><p>一个基本的数字系统如上图所示，其模拟输出的数字信号必须经过DAC转化为模拟信号交给模拟系统去执行，而反馈回来的模拟信号又必须通过ADC转化为数字信号以作为参考计算值。</p><h2 id="DAC"><a href="#DAC" class="headerlink" title="DAC"></a>DAC</h2><p>有两种常用的DAC电路：</p><ul><li>R-2R 梯子（R-2R ladder）网络。</li><li>加权电阻器</li></ul><h3 id="R-2R-ladder"><a href="#R-2R-ladder" class="headerlink" title="R-2R ladder"></a>R-2R ladder</h3><p>下图是一个3bits R-2R DAC的电路图。$b_1$是LSB，$b_2$是MSB。让我们分析一下这个电路。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620234426288.png" alt="image-20240620234426288" style="zoom:50%;" /></p><p><strong>（1）上图这样$b_2$接通的状态，</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620234916817.png" alt="image-20240620234916817" style="zoom: 50%;" /></p><ol><li>将电阻器件编为3组。如上图1，2，3三个环。</li><li>从最左侧第一组（环1）看起，水平的$2R$左侧接地，垂直的$2R$下面接地，因此以连接这两个$2R$的节点的视角来看，相当于两个等值对地并联电阻，因此在对节点来说它的等效电阻是$R$</li><li>现在看到中间这个环2，它的水平方向有个$R$连接到（2）中的节点，然后再经过（2）中等效的$R$地，因此其水平方向对地阻值是$2R$。其竖直方向又是$2R$接地，因此站在它的节点的视角来看，它也是2个$2R$并联接地，可以等效为$R$。</li><li>此时来到最后一组，水平方向的$R$和（3）中等效出来的$R$串联，阻值是$2R$。至此，电路等效成了这样：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620235520619.png" alt="image-20240620235520619" style="zoom:67%;" /></p><ol><li>上图中A点因为虚短电压为0V，因此水平方向的左右两个$2R$又可以等效为$R$。</li><li>那么总电流就是$i_2=\frac{V_{ref}}{3R}$。同时水平方向的两个电阻均匀分流，因此流经运算放大器的电流是$\frac{1}{2}i_2=\frac{V_{ref}}{6R}$</li><li>运算放大器的放大电阻为$3R$，因此输出电压$V_0=3R\times\frac{V_{ref}}{6R}=\frac{1}{2}V_{ref}$</li></ol><p>回顾一下将DAC的映射规则：MSB贡献最大值的一半，剩下的bit是距离MSB有n位就贡献$(\frac{1}{2})^{n+1}V_{ref}$。例如$010$就是$1/4\times V_{ref}$。$111$就是$\frac{1}{8}V_{ref}+\frac{1}{4}V_{ref}+\frac{1}{2}V_{ref}$</p><p>现在是MSB为$V_{ref}$，其他bit接地的情况。即$100_{B}$的情况，$V_0$应当等于$\frac{1}{2}V_{ref}$，分析出来的电压和DAC的映射规则符合。</p><p>（2）让我们来试想一下LSB（$b_0$）接通，其他接地的状态。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620234916817.png" alt="image-20240620234916817" style="zoom: 50%;" /></p><ol><li>从环3开始看起，环3节点右侧水平的$2R$和竖直的$2R$都位于接地的状态，因此等效为$R$</li><li>环$2$右侧水平的$R$和环3等效的$R$串联构成$2R$，并与竖直接地的$2R$等效成$R$</li><li>至此从环1节点的视角来看，左侧为$2R$接地，右侧为$2R$接地，竖直为$2R$接$-V_{ref}$，这个情况和MSB为1时的第五步一模一样。因此流过环3竖直$2R$的电流也为$i_2=\frac{V_{ref}}{3R}$，水平方向左右两侧分别分流$\frac{V_{ref}}{6R}$。</li><li>此时右侧的电流是流过运算放大器的，但是并非全部电流都经过运放的$3R$。当它经过环2时，站在环2的节点视角来看，水平为$2R$接地，竖直为$2R$接地，因此经过环2会被再次分走一半，只剩$\frac{V_{ref}}{12R}$。经过环1同理。如下图所示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621002046973.png" alt="image-20240621002046973" style="zoom:67%;" /></p><ol><li>最终流向放大电阻$3R$的电流为$\frac{V_{ref}}{24R}$，因此$v_0=3R \frac{V_{ref}}{24R}=\frac{1}{8}V_{ref}$</li><li>总结一下我们发现，每经过1一个环，它的电流就变成了MSB电流的$1/2$，而距离MSB有n位就需要经过n个环，这恰好与DAC规则里面的<em>“MSB贡献最大值的一半，剩下的bit是距离MSB有n位就贡献$(\frac{1}{2})^{n+1}V_{ref}$”</em>对应上了。这就是这类DAC工作的原理</li></ol><p>利用电流可叠加的特性，对每个bit接1的情况单独分析，即可发现$V_0$的输出是每个bit接地贡献电流的总和。至此这个DAC推导完毕。总结其通式为：</p><script type="math/tex; mode=display">V_0=\frac{1}{2}(b_{n-1}+\frac{1}{2}b_{n-2}+...+\frac{1}{2^{n-1}}b_0)V_{ref}</script><h3 id="weighted-resistors"><a href="#weighted-resistors" class="headerlink" title="weighted resistors"></a>weighted resistors</h3><p>下图是weighted resistor DAC的电路图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621002624126.png" alt="image-20240621002624126" style="zoom:67%;" /></p><p>这类DAC的本质就是电子系统里面学过的反相加法器，通过不同的放大配置电阻来实现每个bit占不同的权重。这里省略推导。通式同上。</p><h2 id="ADC-逐次逼近型ADC"><a href="#ADC-逐次逼近型ADC" class="headerlink" title="ADC-逐次逼近型ADC"></a>ADC-逐次逼近型ADC</h2><p>这类ADC其实在计算机组成与接口一课中学过。这里简单回顾一下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621003606628.png" alt="image-20240621003606628"></p><p>这类ADC由一个比较器，一个DAC，一个逼近寄存器（successive approximation register, SAR）,一个时钟信号，一个产生控制信号的控制器（SOC：Start of Converting; EOC: End of Converting）构成。</p><ol><li>一开始，SAR输出的值为0，DAC将其转换为模拟信号的0输出到$V_0$</li><li>比较器比较$V_{IN}$大还是$V_{0}$大，如果$V_{IN}$大，则将MSB置位1；再次比较</li><li>如果这次是$V_{0}$大，则将MSB回溯为0，MSB的后一位置为1；比较下一位</li><li>如果还是$V_{IN}$大，则将MSB的后一位置为1；比较下一位</li><li>重复这个过程，直到完成对最后一位的填写。</li></ol><p>整个过程其实是一个二分法，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621004812096.png" alt="image-20240621004812096"></p><p>这种ADC的采样时间通常在$10ns-200us$不等，并且要求$V_{IN}$在采样期间保持稳定。高性能的ADC系统包括一个S/H（采样保持）器件，该器件在转换期间保持ADC的输入恒定。</p><h2 id="数字采样的混叠（Aliasing）问题"><a href="#数字采样的混叠（Aliasing）问题" class="headerlink" title="数字采样的混叠（Aliasing）问题"></a>数字采样的混叠（Aliasing）问题</h2><p>当ADC以一个较低的频率去对模拟信号采样时，可能会出现下图这样的问题，导致采得的频率远小于信号实际的频率，这被称为Aliasing。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621005235928.png" alt="image-20240621005235928"></p><p>由于一个信号内会有不同的频率分量，因此有可能会有超出系统设计的高频频率分量因为Aliasing问题，在ADC采样后变成低频分量。为了解决这个问题，需要使用低通滤波器来滤除这些高频分量。在实际应用中这些被称为抗混叠滤波器（anti-alias filters）</p><p>当采样频率为最高频率2倍时（采样定理），原始信号才能完全被采样信号表达（无混叠问题）。</p><h1 id="S域和Z域及其稳定性"><a href="#S域和Z域及其稳定性" class="headerlink" title="S域和Z域及其稳定性"></a>S域和Z域及其稳定性</h1><h2 id="S到Z的映射"><a href="#S到Z的映射" class="headerlink" title="S到Z的映射"></a>S到Z的映射</h2><h3 id="s-plane-到-z-plane-的映射"><a href="#s-plane-到-z-plane-的映射" class="headerlink" title="s plane 到 z plane 的映射"></a>s plane 到 z plane 的映射</h3><p>在信号与系统中学过，S域用于衡量连续系统，Z域用于衡量离散系统。其中S域到Z域的推导就是令$z=e^{Ts}$，其中$s=j\omega+\sigma$。分离一下这个z:</p><script type="math/tex; mode=display">z=e^{Ts}=e^{T(j\omega+\sigma)}=e^{T\sigma}e^{jT\omega}</script><p>此时，这个复数z的幅值完全由$e^{T\sigma}$贡献，角度完全由$e^{jT\omega}$贡献。因此可以记为$z=r\angle\theta$，其中$r=e^{T\sigma}$，$\theta=\omega T$</p><p>回想s平面，其横轴为$\sigma$，纵轴为$\omega$。现在到了z平面，原本的横轴映射为了幅值；原本的纵轴映射成了角度。原本位于横轴n处的一条垂直的线（即，$\sigma=n,\omega不限$）现在变成了幅值为n的一个圆（即，$r=e^{Tn},\theta=\omega T=不限$）。</p><p>因此s平面到z平面的映射，就是把它s平面上的竖线卷成一个圆；其中s平面左侧的因为$\sigma&lt;0$，因此：</p><ul><li>$r=e^{\sigma T}&lt;1$，在单位圆内。</li><li>位于虚轴上的$\sigma=0$，对应$r=1$，位于单位圆上。</li><li>位于右半平面的$\sigma&gt;0$，映射到的就是$r&gt;1$的单位圆外。</li></ul><p>如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621011224553.png" alt="image-20240621011224553" style="zoom: 67%;" /></p><p>这样卷起来之后，原本在s平面水平的横线就被卷成了指向某一个方向的向量，如下图所示。从数学的角度也很好解释：某一条水平横线的表达式为$s=j\omega$，$\sigma$不限。映射到z就是$\theta=\omega T$，$r=e^{\sigma T}$不限。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621011418650.png" alt="image-20240621011418650" style="zoom:67%;" /></p><h3 id="终值定理和稳态误差转换"><a href="#终值定理和稳态误差转换" class="headerlink" title="终值定理和稳态误差转换"></a>终值定理和稳态误差转换</h3><p>在Part1介绍的拉普拉斯变换中介绍了unit step, unit ramp, 和 acceleration input的steady state error。这里将它们映射到Z域（其实用映射不是很准确，除了终值定理遵循映射关系，它的公式其实是由z系统下表示的系统函数推导出来的）</p><p><strong>单位阶跃响应</strong></p><ul><li>在s域下：$K_p=\lim_{s\rightarrow0}{G(s)H(s)}$，稳态误差：$e_{ss}=\frac{1}{1+K_p}$</li><li>在z域下：$K_p=\lim_{z\rightarrow1}{GH(z)}$，稳态误差：$e_{ss}=\frac{1}{1+K_p}$</li></ul><p>type0系统稳态误差存在，1阶及以上不存在。注意这里的type还是由分母孤立的s来定义，并非z。</p><p><strong>单位斜坡响应</strong></p><ul><li>在s域下：$K_V=\lim_{s\rightarrow0}{sG(s)H(s)}$，稳态误差：$e_{ss}=\frac{1}{K_V}$</li><li>在z域下：$K_V=\lim_{z\rightarrow1}{\frac{(1-z^{-1})GH(z)}{T}}$，稳态误差：$e_{ss}=\frac{1}{K_V}$</li></ul><p>type0系统稳态误差为无穷，type1为$\frac{1}{K_V}$，type2及以上无稳态误差</p><p><strong>单位加速度响应</strong></p><ul><li>在s域下：$K_a=\lim_{s\rightarrow0}{s^2G(s)H(s)}$，稳态误差：$e_{ss}=\frac{1}{K_a}$</li><li>在z域下：$K_a=\lim_{z\rightarrow1}{\frac{(1-z^{-1})^2GH(z)}{T^2}}$，稳态误差：$e_{ss}=\frac{1}{K_a}$</li></ul><p>type0,1稳态误差为无穷，type2为$\frac{1}{K_a}$</p><h2 id="s域的极点和时域响应的关系"><a href="#s域的极点和时域响应的关系" class="headerlink" title="s域的极点和时域响应的关系"></a>s域的极点和时域响应的关系</h2><h3 id="实数根和收敛速度的关系"><a href="#实数根和收敛速度的关系" class="headerlink" title="实数根和收敛速度的关系"></a>实数根和收敛速度的关系</h3><p>考虑一个系统：$G(s)=\frac{1}{s+a}$，这个系统的极点为$s=-a$，对单位冲击函数$\delta(t)$的响应就是传递函数本身，即$U(s)=\frac{1}{s+a}$，那么有：</p><script type="math/tex; mode=display">u(t)=e^{-at}</script><p>如果a为正数，即极点在左边平面，这个响应呈现随时间衰减趋势，且a越大衰减越快；如果a为负数，即极点在右半平面，这个响应呈现随时间增加趋势，且a越小递增越快。</p><p><strong>对应极点，就是极点越靠近负无穷，衰减越快，极点越靠近正无穷，增加越快，极点在0附近这个函数更趋于平缓</strong></p><h3 id="主导极点"><a href="#主导极点" class="headerlink" title="主导极点"></a>主导极点</h3><p>考虑一个二阶系统$G(s)=\frac{1}{s^2+2\zeta\omega_ns+\omega_n^2}$，对其施加单位冲击响应，输出为系统函数本身。系统函数的极点可令分母等于0后使用求根公式获得：</p><script type="math/tex; mode=display">P=-\zeta\omega_n\pm\omega_n\sqrt{\zeta^2-1}</script><p><strong>当$\zeta&gt;1$时：</strong></p><p>$\sqrt{\zeta^2-1}&gt;0$，$P_1,P_2$都为实数。输出可以写成：</p><script type="math/tex; mode=display">U(s)=\frac{1}{(s-P_1)(s-P_1)}=\frac{A}{s-P_1}+\frac{B}{s-P_2}</script><script type="math/tex; mode=display">u(t)=Ae^{P_1t}+Be^{P_2t}</script><p>假设两个极点都在右半平面。由于$P_1=-\zeta\omega_n+\omega_n\sqrt{\zeta^2-1}&gt;P_2=-\zeta\omega_n-\omega_n\sqrt{\zeta^2-1}$，遵照上面将的离负无穷越近收敛越快，$P_1$这收敛较慢，$P_2$收敛较快。系统由这两部分叠加，收敛较慢的信号决定了系统的收敛速度，因此称$P_1$为主导极点。（此时也对应了严阻尼，无过冲收敛的情况）</p><h3 id="虚部根于震荡频率的关系"><a href="#虚部根于震荡频率的关系" class="headerlink" title="虚部根于震荡频率的关系"></a>虚部根于震荡频率的关系</h3><p>继续考虑前面的二阶系统，<strong>当$\zeta$=0时</strong></p><script type="math/tex; mode=display">P_1=-\zeta\omega_n+\omega_n\sqrt{\zeta^2-1}=\omega_n\sqrt{-1}=j\omega_n</script><script type="math/tex; mode=display">P_2=-\zeta\omega_n-\omega_n\sqrt{\zeta^2-1}=-\omega_n\sqrt{-1}=-j\omega_n</script><p>此时这两个根完全在虚轴上，无实部分量。系统输出为：</p><script type="math/tex; mode=display">U(s)=\frac{1}{(s-j\omega_n)(s+j\omega_n)}=\frac{1}{s^2+\omega_n^2}</script><script type="math/tex; mode=display">u(t)=\frac{1}{\omega_n}sin(\omega_nt)</script><p><strong>可以看到，此时系统输出以$\omega_n$的频率进行震荡，且$|\omega_n|$越大震荡的频率越快。因此，极点在虚轴上距离零点越远，震荡频率越快</strong>（此时也对应了无阻尼，自由震荡的情况）</p><h3 id="结合实部和虚部的关系"><a href="#结合实部和虚部的关系" class="headerlink" title="结合实部和虚部的关系"></a>结合实部和虚部的关系</h3><p>继续考虑前面的二阶系统，<strong>当0&lt;$\zeta$&lt;1时</strong></p><script type="math/tex; mode=display">P_1=-\zeta\omega_n+\omega_n\sqrt{\zeta^2-1}=-\zeta\omega _n+j\omega_n\sqrt{1-\zeta^2}</script><script type="math/tex; mode=display">P_2=P=-\zeta\omega_n-\omega_n\sqrt{\zeta^2-1}=-\zeta\omega _n-j\omega_n\sqrt{1-\zeta^2}</script><p>定义$\omega_d=\omega_n\sqrt{1-\zeta^2}$，称为固有频率，此时:</p><script type="math/tex; mode=display">U(s)=\frac{1}{(s+\zeta\omega _n+j\omega_d)(s+\zeta\omega _n-j\omega_d)}=\frac{1}{(s+\zeta\omega_n)^2+\omega_d^2}</script><script type="math/tex; mode=display">\frac{1}{\omega_d}\frac{\omega_d}{(s+\zeta\omega_n)^2+\omega_d^2}</script><script type="math/tex; mode=display">u(t)=\frac{1}{\omega_d}e^{-\zeta\omega_nt}sin(\omega_dt)</script><p>其图像是包络为$e^{-\zeta\omega_nt}$，以$\omega_d$为频率震荡收敛的函数。因此根的虚部大小（$\omega_d$）决定了其震荡频率，实部大小（$-\zeta\omega_n$）决定了其收敛速度。（对应欠阻尼情况）。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621021125728.png" alt="image-20240621021125728"></p><h3 id="总结和映射至Z平面"><a href="#总结和映射至Z平面" class="headerlink" title="总结和映射至Z平面"></a>总结和映射至Z平面</h3><p>总结一下，在s域内：</p><ul><li>极点虚部绝对值越大信号的震荡频率越快</li><li>极点实部在左半平面，信号收敛；越靠近负无穷收敛越快</li><li>极点实部在右半平面，信号发散；约靠近正无穷发散越快</li><li>极点无实部只有虚部时，为临界稳定状态，保持固有频率震荡</li></ul><p>考虑s平面和z平面的映射关系，在z域内：</p><ul><li>极点相位角越大震荡频率越快</li><li>极点模长小于1时，信号收敛；越靠近0收敛越快</li><li>极点模长大于1时，信号发散；越靠近无穷发散越快</li><li>极点模长等于1时，为临界稳定状态，保持固有频率震荡</li></ul><p>最终可以得到下图：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621021829222.png" alt="image-20240621021828026"></p><h2 id="s域和z域稳定性关系"><a href="#s域和z域稳定性关系" class="headerlink" title="s域和z域稳定性关系"></a>s域和z域稳定性关系</h2><p>在上一节的分析中可以得出：</p><ul><li>s域所有极点在左半平面系统稳定；z域所有极点在单位圆内系统稳定</li><li>s域有极点在虚轴上系统临界稳定；z域所有极点在单位圆上系统临界稳定</li><li>s域所有极点在右半平面系统不稳定；z域所有极点在单位圆外系统不稳定</li></ul><h1 id="Z域下的稳定性判据"><a href="#Z域下的稳定性判据" class="headerlink" title="Z域下的稳定性判据"></a>Z域下的稳定性判据</h1><p>同前面介绍Routh-Hurwitz稳定性判据时一样，对于低阶系统，我们可以轻易得求得其零极点。但是对于高阶系统这比较困难。因此需要稳定性判据。前面介绍过的s域下的Routh-Hurwitz稳定性判据，这里会介绍 Jury’s Stability test 和 Bilinear transformation 映射到z域下的Routh-Hurwitz稳定性判据</p><h2 id="Jury’s-Stability-test"><a href="#Jury’s-Stability-test" class="headerlink" title="Jury’s Stability test"></a>Jury’s Stability test</h2><p>类似于 Routh - Hurwitz 方法，Jury’s Stability test 也是一个基于数理的稳定性测试。它用于确定多项式的根是否位于单位圆内。</p><p>考虑以下形式的传输函数特征方程：（$a_0&gt;0$）</p><script type="math/tex; mode=display">F(z)=a_0z^n+a_1z^{n-1}+...a_{n-1}z+a_n=0</script><p>与Routh-Hurwitz稳定性判据类似，Jury’s Stability test 也有一张表，需要使用的行数由特征方程的最高阶决定：$行数=2n-3$。例如假设最高是$z^4$，则需要5行。</p><ul><li>表中第一行以逆序和顺序的方式写上系统特征方程的系数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621110757255.png" alt="image-20240621110757255"></p><ul><li>$b_k,c_k$的计算方法为：</li></ul><script type="math/tex; mode=display">b_k=\left|\begin{array}{cc}     a_0 &    a_{n-k}\\     a_n &    a_{k}\\  \end{array}\right|=(a_0\times a_{k}-a_n\times a_{n-k})</script><script type="math/tex; mode=display">c_k=\left|\begin{array}{cc}     b_{0} &    b_{n-1-k}\\     b_{n-1} &    b_{k}\\  \end{array}\right|=(b_{0}\times b_{k}-b_{n-1}\times b_{n-1-k})</script><p>如下面三图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621111555905.png" alt="image-20240621111555905" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621111629918.png" alt="image-20240621111629918" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621111708353.png" alt="image-20240621111708353" style="zoom:50%;" /></p><p>如果满足以下条件则系统稳定</p><ol><li>$F(1)&gt;0$</li><li>$(-1)^nF(-1)&gt;0$</li><li>$|a_0|&lt;a_n$</li><li>$|b_0|&gt;|b_{n-1}|,|c_0|&gt;|c_{n-2}|…$直到最后一个</li></ol><p><em>举个例子：$F(z)=z^4-1.2Z^3+0.07z^2+0.3z-0.08$</em></p><p><strong>step1</strong> 先对$F(1)$和$(-1)^nF(-1)&gt;0$进行判断：</p><script type="math/tex; mode=display">F(1)=1^4-1.21\times1^3+0.07\times1^2+0.3\times1-0.08=0.09>0</script><script type="math/tex; mode=display">(-1)^nF(-1)=(-1)^4[(-1)^4-1.21\times(-1)^3+0.07\times(-1)^2+0.3\times(-1)-0.08]=1.89>0</script><p><strong>step2</strong> 再对$|a_0|&lt;a_n$进行判断：</p><script type="math/tex; mode=display">|a_0|=0.08<1</script><p><strong>step3</strong> 最后再计算表格，对$|b_0|&gt;|b_{n-1}|,|c_0|&gt;|c_{n-2}|…$进行判断。Z有4阶，因此需要$2\times4-3=5$，因此使用5行。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621035453787.png" alt="image-20240621035453787" style="zoom: 80%;" /></p><p>最后发现</p><script type="math/tex; mode=display">|b_0|>|b_3|,|c_0|>|c_2|</script><p>因此系统稳定。</p><h3 id="bilinear-transformation-coupled-with-the-Routh-stability-criterion"><a href="#bilinear-transformation-coupled-with-the-Routh-stability-criterion" class="headerlink" title="bilinear transformation coupled with the Routh stability criterion"></a>bilinear transformation coupled with the Routh stability criterion</h3><p>Part1的Routh stability criterion只适用于s域，但是现在需要讨论离散的z域。这里的方法是使用 bilinear transformation 将z域映射回s域（它这里记作$w$域）：</p><script type="math/tex; mode=display">z=\frac{w+1}{w-1},w=\sigma+j\omega</script><p>映射回去之后，对$w$套用Routh-Hurwitz准则</p><p><em>举个例子：</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621040945660.png" alt="image-20240621040945660"></p><h1 id="采样后的数字控制系统"><a href="#采样后的数字控制系统" class="headerlink" title="采样后的数字控制系统"></a>采样后的数字控制系统</h1><h2 id="简单回顾：Z变换"><a href="#简单回顾：Z变换" class="headerlink" title="简单回顾：Z变换"></a>简单回顾：Z变换</h2><h3 id="抽头形式"><a href="#抽头形式" class="headerlink" title="抽头形式"></a>抽头形式</h3><p>在时域的一个信号，经过脉冲抽样器采样之后会变成下图右侧的样子。其数学表示为</p><script type="math/tex; mode=display">x^*(t)=\sum_{k=0}^{\infty}x(kT)\delta(t-kT)=x(0)\delta(t)+x(T)\delta(t-T)+...+x(kT)\delta(t-kT)...</script><p>这个式子的z变换为：</p><script type="math/tex; mode=display">X(z)=\sum_{k=0}^{\infty}x(kT)z^{-k}=x(0)z^0+z(T)z^{-1}+...+x(kT)z^{-k}+...</script><p>其中$T$为采样周期，$z^{-k}$就是延迟器（Recall：数字信号处理）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621113009801.png" alt="image-20240621113009801"></p><h3 id="S变换-时域-Z变换间的关系"><a href="#S变换-时域-Z变换间的关系" class="headerlink" title="S变换-时域-Z变换间的关系"></a>S变换-时域-Z变换间的关系</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621131827267.png" alt="image-20240621131827267"></p><p>以时域作为媒介，可以使用上述变化对直接对s域到z域进行变换。</p><h2 id="引入-冲击采样的传输系统"><a href="#引入-冲击采样的传输系统" class="headerlink" title="引入-冲击采样的传输系统"></a>引入-冲击采样的传输系统</h2><h3 id="引入-采样输入，采样输出"><a href="#引入-采样输入，采样输出" class="headerlink" title="引入-采样输入，采样输出"></a>引入-采样输入，采样输出</h3><p>考虑这样的一个系统：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621123052665.png" alt="image-20240621123052665"></p><p>在模拟情况下：</p><script type="math/tex; mode=display">Y(s)=U(s)G(s)</script><p>如果将$U(s)$采样为$U^*(s)$，则是：</p><script type="math/tex; mode=display">Y(s)=G(s)U^*(s)</script><p>如果对输出的$Y(s)$也进行采样为$Y^*(s)$，则可以看成两个离散序列卷积，是：</p><script type="math/tex; mode=display">Y^*(s)=(G(s)U^*(s))^*=G^*(s)U^*(s)</script><p>相当于对模拟系统离散化后，再和离散化的信号卷积。模拟信号离散化可以表示为z变换：</p><script type="math/tex; mode=display">G(z)=\sum_{k=0}^{\infty}g(kT)z^{-k}</script><p>其中$g(kT)$是对模拟信号的单位冲击响应的采样序列。因此：</p><script type="math/tex; mode=display">Y(z)=G(z)U(z)</script><h3 id="采样输入，采样传递，采样输出"><a href="#采样输入，采样传递，采样输出" class="headerlink" title="采样输入，采样传递，采样输出"></a>采样输入，采样传递，采样输出</h3><p>再考虑这样一个系统：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621123620252.png" alt="image-20240621123620252"></p><p>根据引入里面的结论，这个系统的表达式可以写为：</p><script type="math/tex; mode=display">Y(z)=G_1(z)G_2(z)U(z)</script><p>传递函数为：</p><script type="math/tex; mode=display">\frac{Y(z)}{U(z)}=G_1(z)G_2(z)</script><h3 id="采样输入，模拟传递，采样输出"><a href="#采样输入，模拟传递，采样输出" class="headerlink" title="采样输入，模拟传递，采样输出"></a>采样输入，模拟传递，采样输出</h3><p>那么对于这个系统：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621123755430.png" alt="image-20240621123755430"></p><p>首先对$U(s)$进行采样，输入系统$G_1(s)$，有：</p><script type="math/tex; mode=display">E(s)=U^*(s)G_1(s)</script><p>$E(s)$会以模拟信号的形式输入$G_2(s)$，有：</p><script type="math/tex; mode=display">Y(s)=E(s)G_2(s)=U^*(s)G_1(s)G_2(s)</script><p>对$Y(s)$进行采样，有：</p><script type="math/tex; mode=display">Y^*(s)=(G_1(s)G_2(s)U^*(s))^*=(G_1(s)G_2(s))^*U^*(s)</script><p>因此传递函数为</p><script type="math/tex; mode=display">\frac{Y(z)}{U(z)}=G_1G_2(z)</script><p><strong>注意！$G_1G_2(z)\neq G_1(z)G_2(z)$</strong></p><h2 id="使用0阶保持器（Zero-Order-Hold，ZOH）将数字信号输入模拟系统"><a href="#使用0阶保持器（Zero-Order-Hold，ZOH）将数字信号输入模拟系统" class="headerlink" title="使用0阶保持器（Zero-Order Hold，ZOH）将数字信号输入模拟系统"></a>使用0阶保持器（Zero-Order Hold，ZOH）将数字信号输入模拟系统</h2><h3 id="ZOH的系统函数"><a href="#ZOH的系统函数" class="headerlink" title="ZOH的系统函数"></a>ZOH的系统函数</h3><p>ZOH可以将离散的数字信号保持一段时间，使其可以输入模拟系统。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621124553389.png" alt="image-20240621124553389" style="zoom:67%;" /></p><p>假设ZOH的保持时间为T，那么其对单位冲激函数的输入会保持T的时间，可以写成时移的两个u(t)相减：</p><script type="math/tex; mode=display">ZOH(t)=1(t)-1(t-T)</script><script type="math/tex; mode=display">ZOH(s)=\frac{1}{s}-\frac{e^{-Ts}}{s}=\frac{1-e^{-Ts}}{s}</script><p>因为单位冲激函数的响应恰好就是系统函数，因此ZOH的函数就是：</p><script type="math/tex; mode=display">ZOH(s)=\frac{1-e^{-Ts}}{s}</script><h3 id="将ZOH输入模拟系统"><a href="#将ZOH输入模拟系统" class="headerlink" title="将ZOH输入模拟系统"></a>将ZOH输入模拟系统</h3><p>将ZOH进入模拟系统$G(s)$后的输出记为$G_{ZA}(s)$</p><script type="math/tex; mode=display">G_{ZA}(s)=\frac{1-e^{-Ts}}{s}G(s)=(1-e^{-Ts})\frac{G(s)}{s}=\frac{G(s)}{s}-e^{-Ts}\frac{G(s)}{s}</script><p>如果将$G_{ZA}(s)$的输出离散采样，回顾一下，时域时移性质在Z变换下和S变换下的表达式：</p><script type="math/tex; mode=display">L[f(t-t_0)]=F(s)e^{-st_0}</script><script type="math/tex; mode=display">Z[f(t-kT)]=z^{-kT}F(z)</script><p>因此我们可以得到：$Z[f(s)e^{-kTs}]=z^{-k}Z[F(s)]]$。所以上式可以写为：</p><script type="math/tex; mode=display">G_{ZA}(Z)=Z[\frac{G(s)}{s}]-z^{-1}Z[\frac{G(s)}{s}]=(1-z^{-1})Z[\frac{G(s)}{s}]</script><script type="math/tex; mode=display">=\frac{z-1}{z}Z[\frac{G(s)}{s}]</script><p>至此我们得到了ZOH输入模拟系统，再对输出采样的结果。这里的$Z[\frac{G(s)}{s}]$需参照上面<em>S变换-时域-Z变换间的关系</em>的表格，直接使用s变换对映射到z变换对来进行变换。</p><p>总结一下：</p><script type="math/tex; mode=display">ZOH(s)=\frac{1-e^{-Ts}}{s}</script><script type="math/tex; mode=display">G_{ZA}(s)=\frac{G(s)}{s}-e^{-Ts}\frac{G(s)}{s}</script><script type="math/tex; mode=display">G_{ZA}(z)=\frac{z-1}{z}Z[\frac{G(s)}{s}]</script><h2 id="采样周期与系统稳定性的关系"><a href="#采样周期与系统稳定性的关系" class="headerlink" title="采样周期与系统稳定性的关系"></a>采样周期与系统稳定性的关系</h2><p>考虑如下这个系统</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240621132107414.png" alt="image-20240621132107414"></p><p>系统传递函数为$G_{ZA}(z)$，根据上面总结的公式：</p><script type="math/tex; mode=display">G_{ZA}(z)=\frac{z-1}{z}Z[\frac{G(s)}{s}]=(\frac{z-1}{z})Z[\frac{5}{s(s+1)}]</script><p>由变换对$\frac{1}{s(s+a)}=\frac{1}{a}(1-e^{-at})=\frac{z(1-e^{-aT})}{a(z-1)(z-e^{-aT})}$可以算得：</p><script type="math/tex; mode=display">G_{ZA}(z)=5(\frac{z-1}{z})(\frac{z(1-e^{-t})}{(z-1)(z-e^{-t})})</script><script type="math/tex; mode=display">=5\frac{1-e^{-T}}{z-e^{-T}}</script><p>其中T为采样周期</p><p>系统的$OLTF(s)=H(s)ZOH(s)G(s)$，$OLTF(z)=2G_{ZA}(z)$，因此：</p><script type="math/tex; mode=display">OLTF(z)=10\frac{1-e^{-T}}{z-e^{-T}}</script><p>系统的$CLTF(z)=\frac{G_{ZA(z)}}{1+OLTF(z)}$</p><script type="math/tex; mode=display">CLTF(z)=\frac{5\frac{1-e^{-T}}{z-e^{-T}}}{1+10\frac{1-e^{-T}}{z-e^{-T}}}=\frac{5(1-e^{-T})}{z-11e^{-T}+10}</script><p>系统特征方程为：$z-11e^{-T}+10=0$，系统极点为$z=11e^{-T}-10$。对于z域，要求所有极点模长小于1，系统稳定，即：</p><script type="math/tex; mode=display">11e^{-T}-10<1 \&11e^{-T}-10>-1</script><script type="math/tex; mode=display">e^{-T}<1, -T<ln(1)=0,T>0</script><script type="math/tex; mode=display">e^{-T}>9,-T<ln(\frac{9}{11}), T<0.2</script><p>因此，求得若要系统稳定，采样周期必须$0&lt;T&lt;0.2$。那么最小采样频率（称为critical frequency）必须大于$f_{critical-frequency}=\frac{1}{T_{max}}=5Hz$，采样频率等于最小采样频率时，系统临界稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control Systems Part1-4b-超前、滞后补偿器设计</title>
      <link href="/posts/cbec893d.html"/>
      <url>/posts/cbec893d.html</url>
      
        <content type="html"><![CDATA[<h1 id="预补偿器（Pre-Compensator）的介绍"><a href="#预补偿器（Pre-Compensator）的介绍" class="headerlink" title="预补偿器（Pre-Compensator）的介绍"></a>预补偿器（Pre-Compensator）的介绍</h1><p>预补偿器和上文PID控制器位于系统中同一位置，它旨在用于调整系统响应的各个方面，包括稳态误差、Overshoot、setting time等等。在不重新设计整个控制系统的情况下，使用预补偿器是一种相对简单的方法来修改系统。PID其实就是一种特殊的预补偿器。</p><p>它的优点有：</p><ul><li>简单：无需重新设计整个系统</li><li>精确：可以通过对与补偿器的设计来消除系统稳态误差</li><li>灵活：它可以影响系统的方方面面而不直接修改系统</li></ul><p>它的缺点有：</p><ul><li>带宽限制：提高稳态误差性能会导致带宽变窄，从而影响系统快速响应变化的能力。</li><li>稳定性问题：如果设计不当，添加预补偿器可能会破坏系统的稳定性，特别是如果引预补偿器入了明显的相位滞后。</li><li>设计中的复杂性：对于某些系统，设计有效的预补偿器需要对系统响应进行复杂的分析和理解，这可能既复杂又耗时。</li></ul><h1 id="根轨迹下预补偿器的设计"><a href="#根轨迹下预补偿器的设计" class="headerlink" title="根轨迹下预补偿器的设计"></a>根轨迹下预补偿器的设计</h1><h2 id="前置知识：如何判断根是否在根轨迹上"><a href="#前置知识：如何判断根是否在根轨迹上" class="headerlink" title="前置知识：如何判断根是否在根轨迹上"></a>前置知识：如何判断根是否在根轨迹上</h2><h1 id="频率响应下的预补偿器（Pre-Compensator）设计"><a href="#频率响应下的预补偿器（Pre-Compensator）设计" class="headerlink" title="频率响应下的预补偿器（Pre-Compensator）设计"></a>频率响应下的预补偿器（Pre-Compensator）设计</h1><h2 id="引入-PID控制器与与补偿器的关系"><a href="#引入-PID控制器与与补偿器的关系" class="headerlink" title="引入-PID控制器与与补偿器的关系"></a>引入-PID控制器与与补偿器的关系</h2><h3 id="PI控制器"><a href="#PI控制器" class="headerlink" title="PI控制器"></a>PI控制器</h3><p>前面提到PI控制器有消除稳态误差的能力。PI控制器的通式为：</p><script type="math/tex; mode=display">G_c(s)=K_p(1+\frac{1}{K_is})=\frac{K_pK_is+1}{K_is}</script><p>但是由于PI控制器给分母引入了孤立s，会改变系统的类型造成高频衰减，从而破坏原本调好的动态响应。有没有什么类 PI 补偿的表达式，它在 s = 0 时产生显著的增益，从而减小稳态误差，但在较高频率下几乎为 1，对动态响应没有影响呢？</p><p>答案就是在分母上将在原点的极点移动一下，移动成靠近0的极点，这个极点的影响范围主要在低频（回顾波德图，0.1T-10T范围）。因此在低频时其幅频图还是收原来的PI控制器影响为主，但是在高频这个极点的贡献就失效了，而不像在直接在原点一样对全频有效；同时也因为这个移动，导致稳态误差无法彻底被消除，因此设计时还是需要考虑稳态误差。这就是相位滞后补偿器（Phase Lag Compensator）。</p><script type="math/tex; mode=display">G_{lag}(s)=K\frac{\tau s+1}{\alpha\tau s+1},\alpha>1</script><p>在这个表达式下，又保留了s = 0 时产生显著的增益，从而减小稳态误差的特性。管他叫滞后补偿器的原因是这个补偿器函数的波德图相位是负数，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/2020080515233235.png" alt="在这里插入图片描述" style="zoom:50%;" /></p><h3 id="PD控制器"><a href="#PD控制器" class="headerlink" title="PD控制器"></a>PD控制器</h3><p>前面提到PI控制器有增加相位裕量的能力（增加系统稳定性）；同时，不影响稳态误差。其通式为：</p><script type="math/tex; mode=display">C(s)=K_p(1+K_ds)</script><p>我们注意到，PD 补偿的幅度会随着频率的增加而不断增大。这一特性并不受欢迎，因为它会放大高频噪声。</p><p>为了减轻 PD 补偿的高频放大，在比 PD 补偿器高得多的频率处，在分母中添加了一个一阶极点来抵消零点的增益（可以回顾波德图，这个一阶极点的影响范围会被局限在高频）。这就是超前补偿器（Phase Lead Compensator）。</p><script type="math/tex; mode=display">G_{lead}(s)=K\frac{\tau s+1}{\beta\tau s+1},\beta<1</script><p>管它叫超前补偿器的原因是补偿器函数波德图的相位是正数，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/20200805152307198.png" alt="在这里插入图片描述" style="zoom:50%;" /></p><h2 id="超前-滞后补偿器介绍"><a href="#超前-滞后补偿器介绍" class="headerlink" title="超前-滞后补偿器介绍"></a>超前-滞后补偿器介绍</h2><h3 id="滞后补偿器"><a href="#滞后补偿器" class="headerlink" title="滞后补偿器"></a>滞后补偿器</h3><p>用途：<strong>主要用于改善稳态误差，</strong>而不会显著影响系统的稳定性裕度。</p><p>工作原理：滞后补偿器通常在系统的传递函数中添加一个极点和一个零点，零点位于极点的左侧。这种配置增加了低频增益，而不会显著影响高频增益（高频零极点同时发力了），从而通过增加系统的类型或其直流增益来提高系统跟踪稳态值（如阶跃响应）的能力。</p><p>应用：适用于需要稳态精度但不希望对瞬态响应或高频特性进行重大修改的系统。</p><h3 id="超前补偿器"><a href="#超前补偿器" class="headerlink" title="超前补偿器"></a>超前补偿器</h3><p>用途：<strong>旨在改善系统的瞬态响应</strong>，包括减少上升时间、建立时间和增加相位裕量（从而提高稳定性）。</p><p>工作原理：超前补偿器在系统的传递函数中引入零点和极点，零点位于极点左侧）。在低频时以零点提供的为主导，使系统响应更快、响应速度更快。</p><p>应用：通常用于使系统响应更快或使边缘稳定系统稳定的情况。它们在控制系统中很常见，因为控制系统的响应速度和稳定性比稳态精度更重要。</p><h3 id="超前-滞后补偿器"><a href="#超前-滞后补偿器" class="headerlink" title="超前-滞后补偿器"></a>超前-滞后补偿器</h3><p>用途：结合超前和滞后补偿器的特性，以改善系统的瞬态和稳态响应</p><p>工作原理：超前滞后补偿器引入了两组极点和零点：一对提供相位超前（改善瞬态响应），另一对提供相位滞后（改善稳态误差）。该设计更加复杂，它旨在平衡瞬态和稳态性能之间的权衡。</p><p>应用：需要稳态精度和良好的瞬态响应。它们用于需要稳定响应、减少过冲和确保稳态误差符合设计规范的系统。示例包括航空航天、机器人和汽车工程中的先进控制系统。</p><h3 id="从补偿效果的角度来理解超前和滞后补偿器"><a href="#从补偿效果的角度来理解超前和滞后补偿器" class="headerlink" title="从补偿效果的角度来理解超前和滞后补偿器"></a>从补偿效果的角度来理解超前和滞后补偿器</h3><p>下图展示了分别有超前补偿器和滞后补偿器补偿的单位阶跃响应。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620160150974.png" alt="image-20240620160150974" style="zoom:67%;" /></p><p>下图是超前补偿器对系统补偿前后的波德图。可以看到超前补偿器对高频信号有一个增益，同时补偿后的相位也领先于补偿前的；</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620180005534.png" alt="image-20240620180005534" style="zoom:50%;" /></p><p>下图是滞后补偿器对系统补偿前后的波德图。可以看到滞后补偿器对高频有明显衰减（相对而言就是对低频的增益），同时补偿后的相位滞后于补偿前的。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620180255608.png" alt="image-20240620180255608" style="zoom:80%;" /></p><div class="note info flat"><p>请注意，超前补偿器或滞后补偿器不是超前补偿器增加相位裕度、滞后补偿器减少相位裕度。超前补偿器虽然整体抬高了相位裕度，但是它也抬高了高频，导致幅值穿越频率靠后。滞后补偿器虽然整体减小了相位裕度，但是也削减了高频，导致幅值穿越频率靠前。通常来说，这两种补偿器最终的结果都是保持或增加了相位裕度。</p></div><h2 id="超前、滞后补偿器设计"><a href="#超前、滞后补偿器设计" class="headerlink" title="超前、滞后补偿器设计"></a>超前、滞后补偿器设计</h2><h3 id="系统参数要求"><a href="#系统参数要求" class="headerlink" title="系统参数要求"></a>系统参数要求</h3><p>设计要求通常以稳态误差和相位裕度的约束形式给出，例如：</p><ul><li>对于某种输入，要求$e_{ss}&lt;0.01$</li><li>要求$PM&gt;45^\circ$</li></ul><p>如果设计要求是阻尼比，那么对于<strong>具有二阶特性的系统</strong>，我们可以使用以下关系将其转换为近似的相位裕度要求：</p><script type="math/tex; mode=display">PM(degrees)\approx100\zeta</script><h3 id="滞后补偿器设计"><a href="#滞后补偿器设计" class="headerlink" title="滞后补偿器设计"></a>滞后补偿器设计</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620160355088.png" alt="image-20240620160355088"></p><ol><li><p>记单位增益的相位滞后系统传输函数为$G_{lag}(s)$，前面提到，它无法完全消除稳态误差了。而稳态误差$e_{ss}=\frac{1}{1+\lim_{s\rightarrow0}{KG_{lag}(s)}}$可以通过加增益K来尽可能减小。因此，设计的第一步就是找到一个K来满足$e_{ss}$。</p></li><li><p>有了K之后，可以画出这个系统相位滞后补偿时开环传递函数的波德图，即$KG(s)H(s)$的波德图，找到系统目前的幅度穿越频率和其对应的相位裕度（记为$PM_{sys}$）</p></li><li><p>根据系统要求的参数，可以计算出一个新的相位裕度要求，记为$PM_{spec}$。此时我们的目标是通过滞后补偿器将系统新的相位裕度削减成$PM_{spec}$。由于$PM_{spec}$是使用经验公式约等于出的，同时下面介绍的计算补偿量的方法也不完全精确，因此通常需要额外补偿一下。将这个额外补偿的量记为$\phi_c$。</p></li><li><p>在前面画的波德图上，找到$PM_{spec}+\phi_c$对应的穿越频率$\omega_{gco}$。要使得当前系统的穿越频率变成这个新的$\omega_{gco}$，就需要给一个负增益，记为$K_{red}$。直接当前波德图将$\omega_{gco}$这一点的$幅值-0dB$即可拿到$K_{red}(dB)$</p></li><li><p>我们根据下面的公式来计算系统参数：</p></li></ol><script type="math/tex; mode=display">\tau=10/\omega_{gco}</script><script type="math/tex; mode=display">\alpha=10^{K_{red}/20}</script><script type="math/tex; mode=display">G_{lag}(s)=\frac{\tau s+1}{\alpha \tau s+1}</script><ol><li>至此我们求到了补偿器；再画出补偿器的波德图，看一看$PM$是否削减到位，如果不到位就再补狠一点再试。</li></ol><p>总体来说，设计步骤可以归纳为下图：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620164311907.png" alt="image-20240620164311907" style="zoom:67%;" /></p><p><em>举个例子</em></p><p><em>要求给如下系统设计一个补偿器，使得$K_V&lt;5 sec^{-1}$ ,相位裕度至少$40^\circ$，幅值裕度至少$10dB$，$\phi_c=12^\circ$</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620164544213.png" alt="image-20240620164544213" style="zoom:50%;" /></p><ol><li>首先根据CH1中介绍的寻找Unit ramp 输入下稳态速度常数的公式计算出需要的增益：</li></ol><script type="math/tex; mode=display">K_v=\lim_{s\rightarrow0}{sKG(s)}=K=5</script><p>因此$K=5$</p><ol><li>画出$KG(s)$的波德图，如下图所示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620164806263.png" alt="image-20240620164806263"></p><ol><li>需要的相位裕度是$$</li></ol><p>由于滞后相位补偿器在低频点会有一个增益，这会导致幅频曲线抬高$\omega_{gco}$后移而，而下面根据补偿量计算补偿器参数的公式并没有考虑这个后移，因此可以适当多补偿一些，多补偿的值记为$\phi_c$，称为additional phase angle，使得系统。</p><p>找到一个新的$\omega_{gco}$，使其满足期望的相位；</p><h3 id="超前补偿器设计"><a href="#超前补偿器设计" class="headerlink" title="超前补偿器设计"></a>超前补偿器设计</h3><p>类似于滞后补偿器，超前补偿器的设计总结为下表。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620172117376.png" alt="image-20240620172117376"></p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control Systems Part1-5-状态空间表示</title>
      <link href="/posts/cbec893d.html"/>
      <url>/posts/cbec893d.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本章节Dr.Zooba的PPT在原理阐释上比较模糊，以教会你套公式怎么做题为主，建议参考B站DR_CAN视频：<a href="https://www.bilibili.com/video/BV1fx41137dA/?spm_id_from=333.999.0.0&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">【Advanced控制理论】2_状态空间_State Space_哔哩哔哩_bilibili</a>。本篇笔记在原理阐释部分以DR_CAN的视频笔记为主。</p></div><h1 id="状态空间表示法"><a href="#状态空间表示法" class="headerlink" title="状态空间表示法"></a>状态空间表示法</h1><h2 id="原理阐释"><a href="#原理阐释" class="headerlink" title="原理阐释"></a>原理阐释</h2><p>对于任意一个系统，其输入和输出可用微分方程表示，例如下图这个由弹簧、阻尼器、小物块构成的系统。小物块质量为m，位移为x，受力情况是：($\dot x$表示$x$的一阶导数，$\ddot x$表示二阶，以此类推)</p><ul><li>受拉力f(t)</li><li>受阻尼力$f_B=B \dot x$</li><li>受弹簧拉力$f_k=kx$</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/QQ_1723510708610.png" alt="QQ_1723510708610"></p><p>根据$F_{合力}=ma,a=v’=x’’$(位移的导数是速度，速度的导数是加速度)，因此可以列出方程：</p><script type="math/tex; mode=display">m\ddot x=f(t)-f_k-f_B=f(t)-kx-B\dot x</script><p>在上式中，<strong>记位移$x$是系统的输出，拉力$f(t)$是系统的输入</strong>。按照以往信号与系统的处理方式，会将该微分方程输入与输出各放一边后拉普拉斯变换。</p><p>但在现在控制理论中，会将其转化为状态空间方程的形式。一个信号经过微分器微分前后就是两个不同的状态（在离散系统中就是延迟器）。例如上式，$x$和$\dot x$就是两个不同的状态。在连续系统中$\dot x$就是$x$经过微分器之后的状态，而$\ddot x$是$\dot x$经过微分器之后的状态。在状态空间方程中，经过微分器即意味进入下一状态，因此状态空间方程是一阶微分方程组构成的。</p><p>将x记为状态$z_1$,$\dot x$记为状态$z_2$，称$z_1,z_2$位状态变量。原方程有：</p><script type="math/tex; mode=display">\ddot x=(f(t)-kx-B\dot x)\frac{1}{m}=\frac{1}{m}f(t)-\frac{k}{m}z_1-\frac{B}{m}z_2</script><p><strong>其中，标记的两状态变量存在方程组：</strong></p><ul><li>$\dot z_1 = \dot x = z_2$</li><li>$\dot z_2 = \ddot x=\frac{1}{m}f(t)-\frac{k}{m}z_1-\frac{B}{m}z_2$</li></ul><div class="note info flat"><p>回顾一下使用矩阵表达方程，对于如下方程组：</p><script type="math/tex; mode=display">x+y+z=6</script><script type="math/tex; mode=display">2y+5z=-4</script><script type="math/tex; mode=display">2x+5y-z=27</script><p>可以写成系数矩阵乘变量矩阵的形式，如下图。（如果没看懂怎么计算的需要复习一下矩阵乘法）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/QQ_1723513339220.png" alt="QQ_1723513339220"></p><p>将方程组的结果代入，就有下式</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/QQ_1723513603870.png" alt="QQ_1723513603870"></p></div><p>用矩阵来表达状态空间$z_1$和$z_2$的两个方程组：</p><script type="math/tex; mode=display">\left[\begin{array}{c}\dot z_1  \\\dot z_2\end{array}\right]=\left[\begin{array}{c}0 & 1  \\-\frac{k}{m} & -\frac{B}{m}\end{array}\right]\left[\begin{array}{c}z_1  \\z_2\end{array}\right]+\left[\begin{array}{c}0  \\\frac{1}{m}\end{array}\right][f(t)]</script><p>前面提到系统的输出是位移$x$，又因记$x=z_1$，因此系统输出$y=x=z_1$。还可以再列一个系统输出的方程：</p><script type="math/tex; mode=display">y=\left[\begin{array}{c}1 & 0\end{array}\right]\left[\begin{array}{c}z_1 \\z_2\end{array}\right]+[0][f(t)]</script><p>这两个矩阵方程记录了系统不同状态间的关系和输出与状态间的关系，被称为状态空间表达式。其可以概括地写为</p><script type="math/tex; mode=display">\boldsymbol{\dot x}=\boldsymbol{A}\boldsymbol{x}+\boldsymbol{Bu}</script><script type="math/tex; mode=display">\boldsymbol y=\boldsymbol{Cx}+\boldsymbol{Du}</script><p>其中ABCD为矩阵，A被称作plant coefficient matrix，B被称作 control matrix，C被称作output observation matrix，D被称作direct coupling matrix。$\boldsymbol {\dot x} $表示状态变量矩阵求导，u为输入矩阵，y为输出矩阵。这些矩阵构建的系统框图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/QQ_1723519860506.png" alt="QQ_1723519860506"></p><p>在前面弹簧系统的例子中：</p><script type="math/tex; mode=display">A=\left[\begin{array}{c}0 & 1  \\-\frac{k}{m} & -\frac{B}{m}\end{array}\right]， B=\left[\begin{array}{c}0  \\\frac{1}{m}\end{array}\right],  C=\left[\begin{array}{c}1 & 0\end{array}\right], D=[0]</script><script type="math/tex; mode=display">\boldsymbol {\dot x} =\left[\begin{array}{c}\dot z_1  \\\dot z_2\end{array}\right]</script><h2 id="状态空间方程与传递函数的关系"><a href="#状态空间方程与传递函数的关系" class="headerlink" title="状态空间方程与传递函数的关系"></a>状态空间方程与传递函数的关系</h2><p>如果将状态空间方程组的左右进行拉普拉斯变换：</p><script type="math/tex; mode=display">L[\boldsymbol{\dot x}]=L[\boldsymbol{A}\boldsymbol{x}+\boldsymbol{Bu}], L[\boldsymbol y]=L[\boldsymbol{Cx}+\boldsymbol{Du}]</script><script type="math/tex; mode=display">sX(s)=\boldsymbol AX(s)+\boldsymbol BU(s),Y(s)=\boldsymbol C X(s)+\boldsymbol DU(s)</script><p>可以发现这两个方程通过状态变量矩阵X(s)联系在一起。而对于状态变量矩阵有：</p><script type="math/tex; mode=display">(s\boldsymbol I-\boldsymbol A)\boldsymbol X(s)=\boldsymbol B U(s)</script><script type="math/tex; mode=display">X(s)=(s\boldsymbol I -\boldsymbol A)^{-1}\boldsymbol BU(s)</script><p>其中$I$为单位矩阵。</p><p>记$(s\boldsymbol I -\boldsymbol A)^{-1}=\Phi(s)$，上式即可写成：$X(s)=\Phi(s)  BU(s)$。将其代入$Y(s)$的等式中：</p><script type="math/tex; mode=display">Y(s)=\boldsymbol CX(s)+\boldsymbol DU(s)=[\boldsymbol C\Phi(s)\boldsymbol B+\boldsymbol D]U(s)</script><p>系统传递函数</p><script type="math/tex; mode=display">\frac{Y(s)}{U(s)}=C(s\boldsymbol I -\boldsymbol A)^{-1} B+\boldsymbol D</script><div class="note info flat"><p>逆矩阵的求法：$A^{-1}=\frac{A^*}{|A|}$</p><p>其中$A^*$为A的伴随矩阵，$|A|$为A的行列式</p></div><h2 id="状态空间表示的通式"><a href="#状态空间表示的通式" class="headerlink" title="状态空间表示的通式"></a>状态空间表示的通式</h2><p>通常来说，在选择状态变量时，都是微分方程中的0阶、1阶、2阶等倒数，这样就可以通过状态变量矩阵的导数矩阵（即$\boldsymbol {\dot x}$）将他们相互连接起来构成方程组。</p><p>由上面的推导又可知，状态空间方程与传递函数间存在关系。下面进行进一步推导，将这个关系明晰起来。回到前面弹簧的例子中：</p><script type="math/tex; mode=display">A=\left[\begin{array}{c}0 & 1  \\-\frac{k}{m} & -\frac{B}{m}\end{array}\right]， B=\left[\begin{array}{c}0  \\\frac{1}{m}\end{array}\right],  C=\left[\begin{array}{c}1 & 0\end{array}\right], D=[0]</script><script type="math/tex; mode=display">sI-A=\left[\begin{array}{c}s & 0  \\0 & s\end{array}\right]-\left[\begin{array}{c}0 & 1  \\-\frac{k}{m} & -\frac{B}{m}\end{array}\right]=\left[\begin{array}{c}s & -1  \\\frac{k}{m} & s+\frac{B}{m}\end{array}\right]</script><script type="math/tex; mode=display">(s\boldsymbol I -\boldsymbol A)^{-1}=\frac{(sI-A)^*}{|(sI-A)|}=\frac{\left[\begin{array}{c}s & -1  \\\frac{k}{m} & s+\frac{B}{m}\end{array}\right]}{}</script><script type="math/tex; mode=display">C(s\boldsymbol I -\boldsymbol A)^{-1} B+\boldsymbol D</script><p>如下微分方程(s域变换后)。</p><script type="math/tex; mode=display">Y(s)=\frac{b_0 s^n+b_1s^{n-1}+...+b_{n-1}s+b_n}{(s+p_1)^3(s+p_4)(s+p_5)...(s+p_n)}\times U(s)</script>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control Systems Part1-4a-时延影响和PID</title>
      <link href="/posts/24faf8c6.html"/>
      <url>/posts/24faf8c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="时间延迟对系统频响的影响"><a href="#时间延迟对系统频响的影响" class="headerlink" title="时间延迟对系统频响的影响"></a>时间延迟对系统频响的影响</h1><p>时延是输入与控制系统开始响应输出之间的时间差，其被称为lag或者dead time，记作T或表示成$e^{-sT}$(拉普拉斯变换的时移性质：$L[f(t-t_0)]=F(s)e^{-st_0}$)</p><h2 id="时延对频响相响图的影响"><a href="#时延对频响相响图的影响" class="headerlink" title="时延对频响相响图的影响"></a>时延对频响相响图的影响</h2><p>考虑一个系统函数为$G(s)$的一个系统，对其引入时间为T的时延，并求波德图</p><script type="math/tex; mode=display">G(s)e^{-sT}=|G(j\omega)|e^{\angle G(j\omega)}e^{-j\omega T}=|G(j\omega)|e^{j[\angle G(j\omega)-\omega T]}</script><ul><li>系统的幅频响应对应$|G(j\omega)|$，因此时延并不改变幅频响应。</li><li>但时间延迟从相频响应图中减去了$\omega T$，也就是说，随着频率增大，相位减少越大；换句话说，它削减了相位裕度。</li></ul><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620110101045.png" alt="image-20240620110101045"></p><p>显然，如果时间延迟非常大，闭环系统将不稳定。</p><h2 id="从时域的角度看"><a href="#从时域的角度看" class="headerlink" title="从时域的角度看"></a>从时域的角度看</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620110546063.png" alt="image-20240620110546063" style="zoom:50%;" /></p><p>从时域的角度来看，延迟会造成（即，削减相位裕度会造成）</p><ul><li>更低的阻尼比</li><li>更多的振荡响应</li></ul><p><strong>当系统内带有非最小相位元件(带有时滞特性/延时，相位滞后)元件时，会产生非最小相位系统。因此我们一般不单独讨论延迟，而是将其看做非最小相位系统来讨论。</strong></p><h1 id="非最小相位系统"><a href="#非最小相位系统" class="headerlink" title="非最小相位系统"></a>非最小相位系统</h1><h2 id="什么是非最小相位系统"><a href="#什么是非最小相位系统" class="headerlink" title="什么是非最小相位系统"></a>什么是非最小相位系统</h2><p><strong>非最小相位系统（Nonminimum-Phase (NMP) Systems）</strong>是在复平面的右半平面（RHP）上具有零点，但系统仍旧稳定（极点还在左侧）的系统。由于<strong>根轨迹总是趋近并收敛于零点</strong>，因此当增益大到某一点，右半平面的零点有使系统极点趋向右半平面的趋势，可能造成系统不稳定。</p><p>（补充）反之，<strong>最小相位系统(Minimum-Phase (MP) Systems)</strong>就是s域右半平面没有零点或者极点的系统。最小相位系统无论何时都是稳定的。</p><p><strong>在具有相同幅值特性的系统中，对于大于零的任何频率，最小相位系统的相角总小于非最小相位系统</strong>；例如下图，是$G_1(s)=10\frac{s+1}{s+10}$（MP system）和$G_2(10\frac{s-1}{s+10})$(NMP system)的幅频图相频图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620112615410.png" alt="image-20240620112615410" style="zoom:67%;" /></p><h2 id="从单位阶跃响应看最非小相位系统-负调"><a href="#从单位阶跃响应看最非小相位系统-负调" class="headerlink" title="从单位阶跃响应看最非小相位系统-负调"></a>从单位阶跃响应看最非小相位系统-负调</h2><div class="note info flat"><p>参考资料：<a href="http://aas.net.cn/fileZDHXB/journal/article/zdhxb/2015/1/PDF/2015-1-9.pdf">自动化学报</a></p></div><p><strong>一般情况下</strong>, 非最小相位系统对阶跃输入信号具有负调(Overshoot, 或称为下冲) 响应。下冲意味着阶跃输入的暂态响应一开始朝阶跃输 入的相反方向运动</p><p>下图展示了传递函数为$G(s)=\frac{(s-1)^2}{(s+1)^3}$的单位阶跃响应。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620115911551.png" alt="image-20240620115911551" style="zoom:50%;" /></p><p><strong>对于非最小相位系统而言，其单位阶跃响应穿过0的次数（不包含原点）大于或等于右半平面零点的个数。</strong>例如上图，右半平面零点有两个，都是1，因此穿越两次0。</p><p><strong>但是，</strong>当一个线性非最小相位系统<strong>含有非实零点</strong>时, 其阶跃响应<strong>并非一定</strong>具有负调特性（可能还是有）。如传递函数$G(s)=\frac{s^2-s+4}{(s+3)^3}$描述的非最小相位系统对阶跃信号的响应就是单调的, 没有负调特性，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620121619325.png" alt="image-20240620121619325" style="zoom:50%;" /></p><p>对于非线性非最小相位系统, 其阶跃响应<strong>一般具有负调特性</strong>,但因其种类繁多,无法用统一的定理 来判定其负调响应的类型。</p><h1 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h1><p>PID控制器是一种利用比例（Proportional）、积分（Integral）和微分（Derivative）三种动作来根据误差信号<strong>调节系统输入</strong>的反馈控制器。因为是调节系统输入，PID控制器一般作用于系统函数之前，和系统函数一起构成新的经过修补的前向传输函数。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620122131142.png" alt="image-20240620122131142"></p><p>PID控制器的通用式可以表达为（分别对应比例部分，积分部分，微分部分）：</p><script type="math/tex; mode=display">c(t)=K_p[e(t)+\frac{1}{K_i}\int_0^te(t)dt+K_D\frac{de(t)}{dt}]</script><script type="math/tex; mode=display">C(s)=K_p\bigg(1+\frac{1}{K_is}+K_ds\bigg)</script><p>而所谓调PID，其实就是去调$K_p,K_i,K_d$这三个系数。下面会详细介绍</p><h2 id="拆分研究"><a href="#拆分研究" class="headerlink" title="拆分研究"></a>拆分研究</h2><h3 id="P控制器"><a href="#P控制器" class="headerlink" title="P控制器"></a>P控制器</h3><p>只保留P控制器的话，那就相当于给了一个增益，即$C(s)=K_P$，它和系统级联构成的就是$K_PG(s)$。单看这个控制器，它相当于把原来输入系统函数的$e$（$e$是输入与当前输出的差）放大成了$K_Pe$。</p><p>下图展示了P控制器下，控制器的输入$e$和其对应的输出（即输入给$G(s)$的输入）：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620141336365.png" alt="image-20240620141336365" style="zoom:50%;" /></p><p>比例控制存在着一些不足——无法消除稳态误差。</p><p>假设系统$G(s)$自带稳态误差，那么对于单位阶跃信号（推导见CH1)：</p><script type="math/tex; mode=display">e_{ss}=\frac{1}{1+\lim_{s\rightarrow0}{K_PG(s)}}</script><p>可以看到因为原系统$\lim_{s\rightarrow0}{G(s)}\neq\infty$，$K_p$只是减小了稳态误差，没有完全消除。</p><h3 id="I控制器"><a href="#I控制器" class="headerlink" title="I控制器"></a>I控制器</h3><p>I控制器就是积分的部分，其s域为$C(s)=\frac{K_i}{s}$。该控制器会将$e$进行积分，即控制器输出为$K_i\int edt$，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620142321190.png" alt="image-20240620142321190"></p><p>由于这个积分项会将前面若干次的误差进行累计，所以可以很好的消除稳态误差。从数学推导的角度来解释一下：</p><p>假设系统$G(s)$自带稳态误差，那么对于单位阶跃信号</p><script type="math/tex; mode=display">e_{ss}=\frac{1}{1+\lim_{s\rightarrow0}{\frac{K_i}{s}G(s)}}</script><p>此时分母这个$s$会使得后面这一项趋于无穷，进而导致$e_{ss}=0$</p><h3 id="D控制器"><a href="#D控制器" class="headerlink" title="D控制器"></a>D控制器</h3><p>D控制器是微分的部分，其s域为$K_ds$，即该控制器会对误差进行微分，求出误差的变化速率：$de/dt$。下图展示了控制器输入与输出关系</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620142438652.png" alt="image-20240620142438652" style="zoom:67%;" /></p><p>微分控制器不会影响稳态误差，因为在稳态误差发生时，$e$已然达到稳定，误差随时间的变化率为零，因此微分控制器在此时并不起作用。</p><h2 id="不同控制器多项结合"><a href="#不同控制器多项结合" class="headerlink" title="不同控制器多项结合"></a>不同控制器多项结合</h2><h3 id="PI控制器"><a href="#PI控制器" class="headerlink" title="PI控制器"></a>PI控制器</h3><script type="math/tex; mode=display">C(s)=K_p(1+\frac{1}{K_is})</script><ul><li>P控制器只能减少不能消除稳态误差，而I控制器可以完全消除稳态误差。因此这二者结合的控制器稳态误差被I消除，<strong>没有稳态误差</strong>。</li><li>给系统的分母引入了一个$s$，削减了系统的高频（s很大）增益，而噪声通常是高频的，因此削减了噪声的影响</li><li>在分母引入$s$，相当于加快向量负半虚轴的增量；同时削减高频增益还使得幅度穿越频率变得更靠前。二者综合，即，减小了相位裕量。</li></ul><p>控制器波特图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620144647268.png" alt="image-20240620144647268" style="zoom:67%;" /></p><h3 id="PD控制器"><a href="#PD控制器" class="headerlink" title="PD控制器"></a>PD控制器</h3><script type="math/tex; mode=display">C(s)=K_p(1+K_ds)</script><ul><li>给分子引入一个s可以略微降低低频增益并提高高频增益。使得穿越频率靠后，增加相位裕量。</li><li>但是也增加噪声对系统的影响，因为噪声往往是高频的。</li></ul><p>控制器波德图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620145225026.png" alt="image-20240620145225026" style="zoom: 67%;" /></p><h3 id="PID控制器-1"><a href="#PID控制器-1" class="headerlink" title="PID控制器"></a>PID控制器</h3><p>标准形式：</p><script type="math/tex; mode=display">C(s)=K_p\bigg(1+\frac{1}{K_is}+K_ds\bigg),T_i=\frac{K_p}{K_i},T_d=K_dK_p</script><p>并联形式：</p><script type="math/tex; mode=display">C(s)=K_p+\frac{T_i}{s}+T_ds</script><p>结合所有三种控制模式（比例、积分和微分），可以生产出没有稳态误差并减少振荡趋势的控制器。在后面Part2会介绍PID调谐原则，即如何调整$K_p,K_i,K_d$。</p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-CH1-通信传输的基本概念</title>
      <link href="/posts/7cf324fe.html"/>
      <url>/posts/7cf324fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="通信系统简介"><a href="#通信系统简介" class="headerlink" title="通信系统简介"></a>通信系统简介</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616123215614.png" alt="image-20240616123215614"></p><p>一个传输系统一般可分为5块（5 blocks），其组成上图所示。</p><ul><li>信源（Source）：提供需要传输的信息信号;</li><li>发射机（Transmitter）：对信源产生的信息进行编码、调制并对信号进行放大，使其符合信道的传输特性。例如moden将数字信号调制为模拟信号传输。</li><li>传输系统/信道等：可以是连接发射机和接收机的线，也可是一整个网络系统。<br>穿越它。</li><li>接收机（Receiver）：接收发射机发送的信号，并将其转换为可由目标设备处理的形式。例如modem会将模拟信号解调为数字信号再发给电脑。</li><li>信宿（sink/ destination）：服务器、电脑、手机等。信息的目的地。</li></ul><p>在通信系统中，Transmission一词强调信息的传输，Propagation一词强调承载信息的电磁波的传播。</p><h2 id="服务质量（Quality-of-Service-QoS"><a href="#服务质量（Quality-of-Service-QoS" class="headerlink" title="服务质量（Quality of Service, QoS)"></a>服务质量（Quality of Service, QoS)</h2><p>QoS指网络的服务质量，也指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力。</p><p>当网络发生拥塞的时候，数据可能被丢弃；为满足用户对不同应用不同服务质量的要求，就需要网络能根据用户的要求分配和调度资源，对不同的数据流提供不同的服务质量：对实时性强且重要的数据报文优先处理；对于实时性不强的普通数据报文，提供较低的处理优先级，网络拥塞时甚至丢弃。</p><p>High QoS指的就是服务质量很高，延迟，数据可靠性，数据传输速率等等很优秀</p><p>有的通信协议，例如MQTT这种物联网协议，也定义不同的QoS模式，来针对不同的场景设计不同的数据可靠性。</p><h1 id="衡量通信系统的两个常用单位-dB-amp-np"><a href="#衡量通信系统的两个常用单位-dB-amp-np" class="headerlink" title="衡量通信系统的两个常用单位-dB&amp;np"></a>衡量通信系统的两个常用单位-dB&amp;np</h1><h2 id="分贝（decibel）"><a href="#分贝（decibel）" class="headerlink" title="分贝（decibel）"></a>分贝（decibel）</h2><p>分贝是指将数值n取为以10为底的对数。</p><p>这么做的有点有二：</p><ul><li>将极小的或极大的数据保持在较好处理的范围内</li><li>将非线性的平方、立方关系化为线性关系</li></ul><h3 id="使用分贝表示功率"><a href="#使用分贝表示功率" class="headerlink" title="使用分贝表示功率"></a>使用分贝表示功率</h3><p>$P=UI=U^2/R=I^2R$</p><p>因为功率内含平方值，所以讨论功率时使用$10log_{10}(\frac{P_2}{P_1})$</p><p>功率的单位有 瓦特 （W）、毫瓦 （mW） 和微瓦 （μW），对这些不同单位的功率取对数，分别可以得到 dBW，dbm等</p><p><em>举个例子，下图这个$1W$进去$2W$出来的网络，网络增益是：</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616130756521.png" alt="image-20240616130756521"></p><script type="math/tex; mode=display">Gain=10log(\frac{output}{input})=10log(\frac{2}{1})=3.0103dB</script><p>从这个例子不难看出，一倍的关系正好是3dB，因此当功率衰减一半时，被称为-3dB点。</p><p><em>假设有下图这个网络，网络衰减为27dB，求输出功率</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616131316419.png" alt="image-20240616131316419"></p><p>这个例子可以简化计算，考虑衰减30dB（Gain = -30dB）的情况，即:</p><script type="math/tex; mode=display">log(\frac{output}{input})=-3,output=10^{-3}\times input=1mW</script><p>27dB比30dB多3dB，也就是多一倍，因此这个输出值大约是$2mW$</p><p><strong>dBW：</strong></p><p>dBW是值以1W作为基准（放在分母位置），求得现在的功率和1W的dB关系</p><script type="math/tex; mode=display">Power(dBW)=10log_{10}\frac{Power(W)}{1W}</script><p><strong>dBm:</strong></p><p>dBm是值以1mW作为基准（放在分母位置），求得现在的功率和1mW的dB关系</p><script type="math/tex; mode=display">Power(dBm)=10log_{10}\frac{Power(mW)}{1mW}</script><p>一对特殊值：$30dBm=0dBW=1W$, $-30dBW=0dBm=1mW$</p><h3 id="使用分贝表示电压电流"><a href="#使用分贝表示电压电流" class="headerlink" title="使用分贝表示电压电流"></a>使用分贝表示电压电流</h3><p>当讨论U，I这些参数的时候，它没有了功率自带的平方属性。但是我们仍然想统一dB的特殊点，例如-3dB点是半功率点。</p><p>因此，讨论电压电流时使用$20log_{10}(\frac{U_2}{U_1})$和$20log_{10}(\frac{I_2}{I_1})$</p><p>例如，$U_2/U_1=100$，那它们的dB形式就是：</p><script type="math/tex; mode=display">20log_{10}(100)=40dB</script><p>如果一个电压放大器增益为30dB，那么，$\frac{output}{input}$的关系是：</p><script type="math/tex; mode=display">30=20log\frac{output}{input}, \frac{output}{input}=10^{\frac{3}{2}}=31.62277</script><h2 id="奈培（Neper）"><a href="#奈培（Neper）" class="headerlink" title="奈培（Neper）"></a>奈培（Neper）</h2><p>北欧许多国家都使用一种以自然对数为替代10底的对数的单位，奈培 (𝑁𝑝)</p><script type="math/tex; mode=display">Power(Np)=\frac{1}{2}ln(\frac{P_2}{P_1})</script><p>假设现在功率比为1Np，那么：</p><script type="math/tex; mode=display">\frac{P_2}{P_1}=e^{2}</script><p>转化为dB形式：</p><script type="math/tex; mode=display">10log_{10}{(e^2)}\approx8.686dB</script><p>假设功率为1dB，那么：</p><script type="math/tex; mode=display">\frac{P_2}{P_1}=10^{0.1}</script><p>转化为Np形式：</p><script type="math/tex; mode=display">\frac{1}{2}ln(10^{0.1})\approx0.1151Np</script><div class="note danger flat"><p>五星级关系</p></div><p><strong>因此，Np和dB的关系是：1dB=0.1151Np； 1Np=8.686dB</strong></p><h2 id="dB单位下的线路组合"><a href="#dB单位下的线路组合" class="headerlink" title="dB单位下的线路组合"></a>dB单位下的线路组合</h2><h3 id="直接转换"><a href="#直接转换" class="headerlink" title="直接转换"></a>直接转换</h3><p>对于下图这样的情况，其输出的功率并非9dB，9dB是将两路信号相乘的结果，而这里是相加。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616135054665.png" alt="image-20240616135054665"></p><p>因此，需要将其换算回mW的单位，相加后再求dB</p><script type="math/tex; mode=display">log^{-1}(0.6)+log^{-1}(0.3)=5.976mW</script><script type="math/tex; mode=display">10log_{10}(5.976mW/1mW)=7.7441dBW</script><p><em>例题：求输出功率</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616135820082.png" alt="image-20240616135820082"></p><script type="math/tex; mode=display">log^{-1}(0.7)+log^{-1}(1.1)=17.601mW</script><script type="math/tex; mode=display">P=10log{(\frac{17.601mW}{1mW})}=12.455dBm</script><h3 id="多路同功率信号"><a href="#多路同功率信号" class="headerlink" title="多路同功率信号"></a>多路同功率信号</h3><p>试想一下有一个FDM信号群，每一路都是-16dBm，总共有12路。每一路的功率换算成mW是：</p><script type="math/tex; mode=display">log^{-1}(1.6)</script><p>那么，总共有12路，总功率是$12\times log^{-1}(1.6)$。求这个功率的dBm形式就是</p><script type="math/tex; mode=display">10log(12\times log^{-1}(1.6))=10log(12)+(-16dBm)</script><p>因此，$n$路同功率信号的功率叠加可以总结为：</p><script type="math/tex; mode=display">输入信号功率+10log(n)</script>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-罐装知识</title>
      <link href="/posts/9ab7db8e.html"/>
      <url>/posts/9ab7db8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="CH1-传输通信的基本概念"><a href="#CH1-传输通信的基本概念" class="headerlink" title="CH1-传输通信的基本概念"></a>CH1-传输通信的基本概念</h1><h3 id="5-block系统模型"><a href="#5-block系统模型" class="headerlink" title="5 block系统模型"></a>5 block系统模型</h3><ul><li>source、transmitter、Transmission system、receiver、destination</li></ul><h3 id="Telecommunication-的定义"><a href="#Telecommunication-的定义" class="headerlink" title="Telecommunication 的定义"></a>Telecommunication 的定义</h3><ul><li>a transmission of signals in a long distance</li></ul><h3 id="奈培和分贝"><a href="#奈培和分贝" class="headerlink" title="奈培和分贝"></a>奈培和分贝</h3><script type="math/tex; mode=display">dB:10log(\frac{P_2}{P_1}); Np=\frac{1}{2}ln(\frac{P_2}{P_1})</script><p><strong>Np=8.686dB</strong></p><h1 id="CH2-数据传输"><a href="#CH2-数据传输" class="headerlink" title="CH2-数据传输"></a>CH2-数据传输</h1><h3 id="传输损伤"><a href="#传输损伤" class="headerlink" title="传输损伤"></a>传输损伤</h3><p>传输损伤来自</p><ul><li>衰减（Attenuation）和传输失真（Attenuation distortion）</li><li>延迟失真（Delay distortion）</li><li>噪声（Noise）</li></ul><p>其中噪声可以细分为：</p><ul><li>热噪声 thermal noise；$N=kTB$,玻尔兹曼常$k=1.38\times10^{-23}J/K$</li><li>互调噪声 intermediation noise</li><li>串扰 crosstalk</li><li>冲击噪声 impulse noise</li></ul><h3 id="信道容量"><a href="#信道容量" class="headerlink" title="信道容量"></a>信道容量</h3><ul><li>奈奎斯特带宽$R_B=2B$</li><li>香农公式$C=Blog_2(1+SNR)$</li></ul><h3 id="E-b-N-0-的两种表达式"><a href="#E-b-N-0-的两种表达式" class="headerlink" title="$E_b/N_0$的两种表达式"></a>$E_b/N_0$的两种表达式</h3><ul><li>与信号功率S相关：$S_{dBW}-10log(R)+228.6dBW-10logT$. （其中R为比特率，T为开尔文温度）</li><li>与频谱效率C/B相关：$E_b/N_0=\frac{B}{C}\cdot(2^{C/B}-1)$</li></ul><h1 id="CH3-传输介质"><a href="#CH3-传输介质" class="headerlink" title="CH3-传输介质"></a>CH3-传输介质</h1><h3 id="光纤的传输窗口"><a href="#光纤的传输窗口" class="headerlink" title="光纤的传输窗口"></a>光纤的传输窗口</h3><p>850nm，1310nm，1550nm</p><h3 id="天线相关"><a href="#天线相关" class="headerlink" title="天线相关"></a>天线相关</h3><ul><li>天线增益：$G=\frac{4\pi A_e}{\lambda^2}=\frac{4\pi f^2A_e}{c^2}$</li><li>波长频率和光速的关系：$f\lambda=c$</li><li>真空中光速$c=3\times10^8m/s$</li><li>全向单位增益天线的$A_e=\frac{\lambda^2}{4\pi}$</li><li>抛物面天线的$A_e=0.56A$</li><li>抛物面天线简化的增益：$G=\frac{7A}{\lambda^2}$</li></ul><h3 id="LoS传输"><a href="#LoS传输" class="headerlink" title="LoS传输"></a>LoS传输</h3><ul><li>大气散射后的传输距离：$3.57\sqrt{Kh}$，其中K经验值$\frac{4}{3}$</li><li>两天线间传输距离：$3.57(\sqrt{Kh_1}\sqrt{Kh_2})$</li></ul><h3 id="自由空间传播损耗"><a href="#自由空间传播损耗" class="headerlink" title="自由空间传播损耗"></a>自由空间传播损耗</h3><script type="math/tex; mode=display">L_{dB}=-20log(\lambda)+20log(d)+21.98, (\lambda,d单位均为m)</script><script type="math/tex; mode=display">L_{dB}=-20log(f)+20log(d)-147.56, (f单位为Hz，d单位为m)</script><h1 id="CH5-金属传输线"><a href="#CH5-金属传输线" class="headerlink" title="CH5-金属传输线"></a>CH5-金属传输线</h1><ul><li><h2 id="传输线特性参数公式总结"><a href="#传输线特性参数公式总结" class="headerlink" title="传输线特性参数公式总结"></a>传输线特性参数公式总结</h2><h3 id="相移常数"><a href="#相移常数" class="headerlink" title="相移常数"></a>相移常数</h3><ul><li>定义式：$\beta=\frac{2\pi}{\lambda}$</li><li>理想传输线，R=G=0时：$\beta = \omega\sqrt{LC}$</li><li>无无失真传输线，$R/L=G/C$，且高频下：$\beta  =j  \omega   \sqrt {LC}(rad/km)$</li></ul><h3 id="传输常数"><a href="#传输常数" class="headerlink" title="传输常数"></a>传输常数</h3><ul><li>定义式：$\gamma=\alpha+j\beta$</li><li>与传输线特征关联：$\gamma=\sqrt{(R+j\omega L)(G+j\omega C)}$</li><li>理想传输线，R=G=0时：$\gamma=j\beta=j\omega\sqrt{LC}$</li><li>无失真传输线，$R/L=G/C$或高频下：$\gamma   \approx   \frac {1}{2}   \frac {CR+GL}{\sqrt {LC}}  +<br>j\omega   \sqrt {LC}$</li></ul><h3 id="特征阻抗-Z-0"><a href="#特征阻抗-Z-0" class="headerlink" title="特征阻抗$Z_0$"></a>特征阻抗$Z_0$</h3><ul><li>定义式：$Z_0=\frac{V_x}{I_x}=\sqrt{\frac{R+j\omega L}{G+j\omega C}}$</li><li>无失真传输线或理想传输线下：$Z_0=\sqrt{\frac{L}{C}}$</li></ul><h3 id="衰减常数"><a href="#衰减常数" class="headerlink" title="衰减常数"></a>衰减常数</h3><ul><li>定义式：间隔单位距离的$V_1$和$V_2$, $V_1/V_2=e^{\alpha}$</li><li>理想传输线，R=G=0时：无衰减，$\alpha=0$</li><li>无失真传输线，$R/L=G/C$或高频下：$\alpha  =(  \frac {R}{2}   \sqrt {\frac {C}{L}}  +  \frac {G}{2}   \sqrt {\frac {L}{C}}  )(Np/km)$</li></ul><h3 id="相速度"><a href="#相速度" class="headerlink" title="相速度"></a>相速度</h3><ul><li>定义式：$v_p=\frac{\omega}{\beta}=f\lambda$</li><li>理想传输线下：$v_p=\omega/\beta =\frac{1}{\sqrt{LC}}$</li></ul><h3 id="群速度"><a href="#群速度" class="headerlink" title="群速度"></a>群速度</h3><ul><li>定义式：$v_g=\frac{d\omega}{d\beta}$</li><li>理想传输线下：$v_g=\frac{d\omega}{d\beta}=\frac{1}{\sqrt{LC}}$</li></ul></li></ul><h2 id="反射公式"><a href="#反射公式" class="headerlink" title="反射公式"></a>反射公式</h2><h3 id="电压反射系数（voltage-reflection-coefficient）"><a href="#电压反射系数（voltage-reflection-coefficient）" class="headerlink" title="电压反射系数（voltage reflection coefficient）"></a>电压反射系数（voltage reflection coefficient）</h3><ul><li>定义式：$\rho=\frac{V_r}{V_i}=\frac{I_r}{I_i}$($V_r,I_r$分别表示反射电压电流，$V_i,I_i$分别表示前进电压电流)</li><li>与 传输线特征阻抗$Z_0$ 和 负载阻抗$Z_L$ 的关系：$\rho=\frac{Z_L-Z_0}{Z_L+Z_0}$</li><li>回波损耗：$Return\ loss=20\log_{10}(\rho)$</li></ul><h3 id="电压驻波比（Voltage-standing-wave-ratio）"><a href="#电压驻波比（Voltage-standing-wave-ratio）" class="headerlink" title="电压驻波比（Voltage standing wave ratio）"></a>电压驻波比（Voltage standing wave ratio）</h3><ul><li>$S=\frac{1+|\rho|}{1-|\rho|}$</li><li>$|\rho|=\frac{S-1}{S+1}$</li></ul><h1 id="CH6-光传输线"><a href="#CH6-光传输线" class="headerlink" title="CH6-光传输线"></a>CH6-光传输线</h1><h3 id="光反射折射和NA"><a href="#光反射折射和NA" class="headerlink" title="光反射折射和NA"></a>光反射折射和NA</h3><ul><li>入射角与出射角和折射率的关系：$n_1sin(\theta_i)=n_2\sin(\theta_r)$</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240509172814675.png" alt="image-20240509172814675" style="zoom:50%;" /></p><ul><li>全反射临界角：$sin\theta_c=\frac{n_2}{n_1}$</li><li>Numerical Aperture (NA)：$NA=n_0sin(\phi_i)=\sqrt{n_1^2-n_2^2}$</li></ul><h3 id="光纤的传输损耗来源"><a href="#光纤的传输损耗来源" class="headerlink" title="光纤的传输损耗来源"></a>光纤的传输损耗来源</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240617000659152.png" alt="image-20240617000659152"></p><h3 id="光纤传输色散来源"><a href="#光纤传输色散来源" class="headerlink" title="光纤传输色散来源"></a>光纤传输色散来源</h3><ul><li>模式色散（多模主要） mode dispersion</li><li>材料色散（单模主要）material dispersion</li><li>波导色散 waveguide dispersion</li><li>偏振色散 polarization dispersion</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC7传输层</title>
      <link href="/posts/8d8b0015.html"/>
      <url>/posts/8d8b0015.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本节对应中文书第五章</p></div><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在IP层中，已经完成了大规模的网络路由，此时网络中的两台主机已经可以通信。但是实际上，通信的是你电脑上的应用进程，例如QQ，微信，腾讯会议等等。在另一端也是一样，例如腾讯的服务器上的QQ服务端进程。运输层提供的就是应用进程间的通信。</p><h1 id="运输层的两个主要协议"><a href="#运输层的两个主要协议" class="headerlink" title="运输层的两个主要协议"></a>运输层的两个主要协议</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP协议的头部如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240614152528612.png" alt="image-20240614152528612"></p><p>套接字：IP地址+端口号被称为TCP层中的套接字（Socket）。</p><p>请注意，socket 这个名词有时容易使人把一些概念弄混淆，因为随着互联网的不断发展以及网络技术的进步，同一个名词 socket却可表示多种不同的意思。例如:</p><ul><li>允许应用程序访问连网协议的应用编程接口API(Application Programming Interface)，即运输层和应用层之间的一种接口，称为socket API, 并简称为 socket。</li><li>在socket API 中使用的一个函数名也叫做 socket。</li><li>调用 socket 函数的端点称为 socket，如“创建一个数据报 socket”</li><li>调用socket函数时，其返回值称为 socket 描述符，可简称为 socket。</li><li>在操作系统内核中连网协议的 Berkeley 实现，称为 socket 实现。</li></ul><p>上面的这些 socket 的意思都和本章 socket的含义(指端口号拼接到IP地址)不同。</p><div class="note info flat"><p>这个时候再回去看LC2的TCP就ok了，bnh自己的课程顺序有点乱</p></div><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP的帧格式如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240614152051927.png" alt="image-20240614152051927" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC6-网络层IP和路由</title>
      <link href="/posts/f3f7fc88.html"/>
      <url>/posts/f3f7fc88.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本节对应中文书第四章</p></div><div class="note info flat"><p>为什么网络物理上的传输是用的MAC地址，而还需要IP地址？</p><p>因为MAC理论作用于局域网内，局域网上理论上是通过广播的形式在寻找通信的对象。而IP地址是可以进行路由的，只有第一次时，需要广播寻找它在哪，后续的通信便可以记住。这样才能实现局域网“来去自由”。</p><p>而且，有一些设备的硬件地址格式不一样，为了使得异构网络能够统一地联通，需要使用IP地址。</p></div><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><p>IP地址会给互联网上的每一个主机，路由器的每一个接口，都分配一个IP地址。</p><h2 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240605164819310.png" alt="image-20240605164819310"></p><p>IP地址被划分为了ABCDE五类，其中ABC三类为单播地址（一对一通信），是最常用的。在ABC三类中，前8 16 24位是网络号。网络号的前三位是类别号，用于区别其是哪一类。D类地址一般用于多播（一对多通信）。</p><p>在最初的时候，网络号的目的就是区分各个局域网。但是后面IP地址不够用了，因此产生了虚拟网（后面会讲，这里只需要知道网络号现在不完全是用来区分局域网的）。同一局域网上的主机或者路由IP地址中，网络号号段必须一样。</p><p>主机号由局域网内自己分配。</p><h2 id="子网掩码-subnet-masking"><a href="#子网掩码-subnet-masking" class="headerlink" title="子网掩码(subnet masking)"></a>子网掩码(subnet masking)</h2><p>由于两级IP地址不够灵活，在主机号的基础上，还可以再从主机号内借用若干比特来划分一段子网号(subnet-id)，来更精细化地分配局域网内的资源（三级编址）。在划分和子网后，在使用网络号进入网络后，会先使用子网号进入子网，再在子网内寻找主机。</p><p>子网掩码：子网掩码就是用来区隔主机号和子网号的，它将主机号全部用0表示。这样路由在寻找子网的时候，将子网掩码与ip地址进行与运算，即可抹去主机号，定位子网。例如<code>255.255.255.0</code>，就只保留最后8位作为主机号，前面的作为子网号。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607141510368.png" alt="image-20240607141510368"></p><h2 id="无分类IP地址-CIDR"><a href="#无分类IP地址-CIDR" class="headerlink" title="无分类IP地址 CIDR"></a>无分类IP地址 CIDR</h2><div class="note info flat"><p>在2011年2月3日，IANA宣布IPv4地址已经全部耗尽。为了解决这个问题，IETF专门成立了IPv6研究工作组。</p></div><p>B类IP地址在1992年就已经分配了一半，眼看就要快分完了。同时，互联网主干网上路由表的项目数正在急剧增长。为了解决这个问题，IETF研究处了无分类编址，正式名称是无分类域间路由选择（Classless Inter-Domain Routing, CIDR）。</p><h3 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h3><p>CIDR消除了传统的ABC类地址划分和子网的概念。CIDR把32位的IP地址划分为前后两个部分。前面部分是“网络前缀”(network-prefix)，用来指明网络，后面部分则用来指明主机。因此CIDR使IP地址从三级编址(使用子网掩码)又回到了两级编址（只不过现在没有分类来指定网络号长度了）。下图是CIDR下的IP结构。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607142055089.png" alt="image-20240607142055089" style="zoom:50%;" /></p><p>CIDR使用斜线记法来划分前后两段：IP地址后面的斜线，例如<code>192.168.1.1/24</code>, 表示前24位是网络号，后8位是主机号。类似于子网掩码，CIDR使用地址掩码（address mask）来方便与运算提取地址，例如/24的地址掩码就是255.255.255.0；由于部分网络还在使用子网掩码，因此CIDR的地址掩码在一些地方也被称为子网掩码。</p><p>如果用户想要，还可以在CIDR区隔开的主机号内，分出来几位，用来标记网络号。例如192.168.1.1/20, 主机号有8位，可以分隔出3位来作为网络号。</p><p>三个特殊的CIDR长度：</p><div class="table-container"><table><thead><tr><th style="text-align:center">网路前缀长度</th><th style="text-align:center">地址掩码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">/32</td><td style="text-align:center">255.255.255.225</td><td style="text-align:center">就是一个IP地址。用于主机路由</td></tr><tr><td style="text-align:center">/31</td><td style="text-align:center">255.255.255.254</td><td style="text-align:center">只有两个IP地址，主机号为0和1，用于点对点通信</td></tr><tr><td style="text-align:center">/0</td><td style="text-align:center">0.0.0.0</td><td style="text-align:center">默认路由</td></tr></tbody></table></div><h3 id="路由聚合-route-aggregation"><a href="#路由聚合-route-aggregation" class="headerlink" title="路由聚合(route aggregation)"></a>路由聚合(route aggregation)</h3><p>在CIDR工作模式下，</p><h2 id="网际控制报文协议ICMP（网络层）"><a href="#网际控制报文协议ICMP（网络层）" class="headerlink" title="网际控制报文协议ICMP（网络层）"></a>网际控制报文协议ICMP（网络层）</h2><p>网际控制报文协议（Internet Control Message Protocol, ICMP）:这是一个差错报告机制，属于网络层协议，被封装在IP packet内。主要用于在IP主机和路由器之间<strong>传递控制消息</strong>，用于报告主机是否可达、路由是否可用等。这些控制消息虽然并不传输业务数据，但是对于收集各种网络信息、诊断和排除各种网络故障以及用户数据的传递具有至关重要的作用。</p><p>下图是ICMP报文，可以看到，ICMP报文是作为IP包的Payload存在的。因此ICMP并不属于TCP或者UDP中的任意一种，是网络层里面的控制信令一般的存在。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607143457986.png" alt="image-20240607143457986" style="zoom:67%;" /></p><p>(上图的格式不要求背，大概了解就行)</p><ul><li>Type字段表示ICMP消息的类型</li><li>Code字段表示ICMP消息类型细分的子类型；</li></ul><p>下图是ICMP支持的报文（了解即可）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607144255971.png" alt="image-20240607144255971"></p><p>一个典型的例子就是<code>ping</code>指令。<code>ping</code>通过使用ICMP报文来检查对象ip地址是否可达。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.1</span><br></pre></td></tr></table></figure><h2 id="IP数据报的格式"><a href="#IP数据报的格式" class="headerlink" title="IP数据报的格式"></a>IP数据报的格式</h2><p>在了解格式之间，首先需要了解MTU：</p><h3 id="最大传输单元MTU"><a href="#最大传输单元MTU" class="headerlink" title="最大传输单元MTU"></a>最大传输单元MTU</h3><p>在IP层下面的每一种数据链路层协议都规定了一个数据帧中的数据字段的最大长度，这称为最大传送单元 MTU(Maximum Transfer Unit)。当一个 IP 数据报封装成链路层的帧时，此数据报的总长度(即首部加上数据部分)一定不能超过数据链路层所规定的 MTU值。例如，最常用的以太网就规定其MTU值是1500字节。若所传送的数据报长度超过数据链路层的 MTU 值，就必须把过长的数据报进行分片处理。</p><p>IP包头内有几个字段都和MTU有关系。</p><h3 id="IP数据报的格式-1"><a href="#IP数据报的格式-1" class="headerlink" title="IP数据报的格式"></a>IP数据报的格式</h3><p>在TCP/IP标准中，各种数据格式以4字节(32bit)为单位描述。下图是IP数据报的完整格式</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607150020957.png" alt="image-20240607150020957" style="zoom:67%;" /></p><ul><li><strong>版本：</strong>占4位，指IP协议的版本。通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为4(即IPv4)。</li><li><strong>首部长度：</strong>占4位。首部长度字段所表示数的单位是32bit(即，首部长度为1表示长32位，4字节)。因为IP首部的固定长度是20字节，因此首部长度字段的<strong>最小值是5</strong>(即二进制表示的首部长度是0101)。设置更长的首部长度会扩充可选字段部分。<strong>当想要添加的首部长度不是4字节的整数倍时，必须用填充字段加以填充。</strong>因此IP数据报的数据部分永远在4字节的整数倍时开始，这样在实现协议时较为方便。首部长度限制为60字节的缺点是有时可能不够用.但这样做是希望用户尽量减少开销.最常用的首部长度是20字节。</li><li><p><strong>区分服务：</strong>占8位，这是一种保证QoS的字段。这个字段在旧标准中叫做服务类型，但实际上一直没有被使用过。1998年年IETF把这个字段改名为区分服务DS（Differentiated Services）。</p></li><li><p><strong>总长度：</strong>总长度指首部和数据之和的长度，<strong>单位为字节</strong>。单一IP包最多传输$2^{16}=65536$字节</p></li><li><p><strong>标识（identification）：</strong>当数据报由于长度超过网络的 MTU 而必须分片时，这个标识字段的值就被复制到所有的数据报片的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。</p></li><li><p><strong>标志（flag）：</strong>占3位，仅前两位有意义。标志字段中的最低位记为MF(More Fragment)，MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片中的最后一个；标志字段中间的一位记为 DF(Don’t Fragment)，意思是“不能分片”，只有当 DF=0时才允许分片。</p></li><li><p><strong>片偏移：</strong>占13位。片偏移指出:较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对于用户数据字段的起点，该片从何处开始。片偏移以<strong>8个字节</strong>为偏移单位。这就是说，每个分片的长度一定是8字节(64位)的整数倍。下图是一个切片例子：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607153618274.png" alt="image-20240607153618274"></p></li><li><p><strong>生存时间（TTL）：</strong>占8位，生存时间字段常用的英文缩写是TTL(Time To Live)，表明这是数据报在网络中的寿命.由发出数据报的源点设置这个字段。其目的是防止无法交付的数据报无限制地在互联网中兜圈子(例如从路由器$R_1$，转发到$R_2$，再转发到$R_1$；，然后又转发到$R_2$，因而白白消耗网络资源。最初的设计是以秒作为TTL值的单位；后面随着技术发展，路由转发时间大大缩短，因而改为跳数限制：<strong>若数据报在路由器消耗的时间小于1秒，就把TTL值减1，这也就相当于是跳数限制</strong>。<strong>当TTL值减为零时，就丢弃这个数据报。</strong></p></li><li><p><strong>协议：</strong>占8位，协议字段指出此数据报携带的数据是使用何种协议，以便使目的主机的IP层知道应将数据部分上交给哪个协议进行处理。常见协议如下图</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607153337199.png" alt="image-20240607153337199"></p><ul><li><strong>首部检验和：</strong>占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和(一些字段，如生存时间、标志、片偏移等都可能发生变化)。</li></ul><h1 id="互联网的路由协议"><a href="#互联网的路由协议" class="headerlink" title="互联网的路由协议"></a>互联网的路由协议</h1><div class="note danger flat"><p>五星级，这部分中路由算法不在这门课的要求，但路由协议是重点。</p></div><h2 id="内部网关协议RIP（重点！）"><a href="#内部网关协议RIP（重点！）" class="headerlink" title="内部网关协议RIP（重点！）"></a>内部网关协议RIP（重点！）</h2><h3 id="如何工作-1"><a href="#如何工作-1" class="headerlink" title="如何工作"></a>如何工作</h3><p>RIP(Routing Information Protocol)：是内部网关协议 IGP 中最先得到广泛使用的协议，它的中文名称叫做路由信息协议，但很少被使用。RIP是一种<strong>分布式</strong>的基于距离向量的<strong>路由选择协议</strong>，是互联网的标准协议，其最大优点就是简单，但不适用于大规模应用，因此只是内部网关协议。</p><p><strong>RIP协议要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的距离记录。</strong></p><ul><li>若左手是一个网络，右手是一个网络，中间使用路由器连接；即，使用路由器直连两个网络，距离定义为1</li><li>若网络间由多个路由器连接，距离为路由器数量+1；例如 NetworkA—路由1—路由2—路由3—NetworkB 距离是4.</li></ul><p>RIP定义的这个距离，也称为<strong>跳数（hop count）</strong>。RIP认为跳数越少，路由路径越好；尽管有路由转发速度更快效率更高的路由，RIP也不会选择。<strong>RIP最大允许通过15跳，若跳数为16，则理解为不可达。</strong>因此RIP仅适用于小型网络。</p><div class="note info flat"><p>在有的教材中，也称直连网络的距离为0为不可达。这个和定义为1的差异不大。</p></div><p>RIP的特点：</p><ul><li>仅和相邻路由器交换信息。如果两个路由器之间的通信不需要经过另一个路由器，那么这两个路由器就是相邻的。</li><li>路由器交换的信息是当前本路由器所知道的全部信息，即自己现在的<strong>路由表+需要几跳</strong>。也就是说，交换的信息是:“我到本自治系统中所有网络的(最短)距离，以及到每个网络应经过的下一跳路由器”</li><li>按固定时间交换刷新路由信息，时间可自定义。</li></ul><p>路由器在刚开始工作的时候，路由表是空的；第一时间它会得出直连网络的信息（距离为1的网络）；然后它会收到来自其他路由的RIP信息，也记录在自己的路由表上。下一次它对外同步自己的路由表时，就可以携带别人告诉它的RIP信息。经过若干次的更新后，所有的路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。</p><p>下面是一个详细的例子：</p><ul><li>现在你CQUPT，上新街告诉你：你到解放碑可以经过我，我这里1跳后到达。此时CQUPT知道，去解放碑需要2跳（你就坐吧，坐上了346到黄角垭下车这辈子都完了）</li><li>此时，如果CQUPT发现自己的路由表没有解放碑，那就把解放碑添加到自己路由表；</li><li>如果CQUPT发现自己校门口打个车就可以去解放碑（即，只需要1跳），那么什么也不做（也就是距离更大了，不予更新）；</li><li>如果CQUPT记录的是四公里路由-2跳到解放碑，则把去往解放碑的路由表拿路由上新街的信息覆盖掉。</li><li>如果CQUPT发现之前上新街发过一次RIP信息给自己，现在又发了一次，则不管这次跳数变多还是变少，都直接覆盖上次的信息（同一路由发过来了新的数据，更新信息）。</li><li>如果3分钟还没有收到相邻路由器更新路由表，则将该路由器标记为不可达，即16跳。</li></ul><p>RIP报文使用UDP封包，因为TCP的三次握手消耗资源太大。下图是其包格式。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240612173559766.png" alt="image-20240612173559766"></p><h3 id="RIP存在的特殊问题"><a href="#RIP存在的特殊问题" class="headerlink" title="RIP存在的特殊问题"></a>RIP存在的特殊问题</h3><p>RIP 存在的一个问题是当网络出现故障时，<strong>要经过比较长的时间才能将此信息传送到所有的路由器</strong>。我们可以用下图简单例子来说明。设三个网络通过两个路由器互连起来，并且都已建立了各自的路由表。图中路由器交换的信息只给出了我们感兴趣的一行内容。路由器R1中的“1，1，直接”表示“到网1的距离是 1，直接交付”。路由器R2中的“1，2,R1,”表示“到网1的距离是 2，下一跳经过 R1”。<br>现在假定路由器R1,到网1的链路出了故障，R1无法到达网1。于是路由器R把到网1的距离改为16(表示到网1不可达)，因而在R1的路由表中的相应项目变为“1，16,直接”。但是，很可能要经过 30 秒钟后 R1才把更新信息发送给R2。然而 R2,可能已经先把己的路由表发送给了R1，其中有“1，2，R1,”。</p><ul><li>R1收到 R2的更新报文后，误认为可经过 R2到达网 1，于是把路由信息修改为:“1，3，R2”，表明“我到网1的距离是 3，下一跳经过R2”，并把更新后的信息发送给 R2。</li><li>同理，R2接着又更新自己的路由表为“1,4,R1,”，以为“我到网1距离是 4，下一跳经过 R1”。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240612174351774.png" alt="image-20240612174351774"></p><p>这种现象我们称之为错误消息洪泛，这是RIP收敛性不好的原因。</p><h2 id="开放最短路优先OSDF"><a href="#开放最短路优先OSDF" class="headerlink" title="开放最短路优先OSDF"></a>开放最短路优先OSDF</h2><p>OSPF(Open Shortest Path First)：这个协议的名字是开放最短路径优先。它是为克服 RIP的缺点在 1989年开发出来的。OSPF的原理很简单，但实现起来却较复杂。“开放”表明OSPF 协议不是受某一家厂商控制，而是公开发表的。“最短路径优先”是因为使用了Dijkstra提出的最短路径算法SPF。</p><p>OSPF使用分布式链路状态协议(link state protocol)，即不像RIP那样用距离来衡量路由选择，而是一整个链路状态。</p><ul><li>OSPF在同步链路状态信息时，使用洪泛法(flooding)。路由器通过所有输出端口向所有相邻的路由器发送信息，每一个相邻路由器又再将此信息发往其所有的相邻路由器(但不再发送给刚刚发来信息的那个路由器)。这样，最终整个区域中所有的路由器都得到了这个信息的一个副本。而RIP 协议是仅仅向自己相邻的几个路由器发送信息。</li><li>这个发送的链路状态信息，可能包含费用，距离，时延，带宽等等（包含什么可自定义）。这些被称为“度量(metric)”，有时也把它称为“代价”。</li><li>只有当链路状态发生变化时，路由器才向所有路由器用洪泛法发送此信息。而不像RIP那样，不管网络拓扑有无发生变化，路由器之间都要定期交换路由表的信息。</li><li>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库(链接状态数据库)，这个数据库实际上就是全网的拓扑结构图.这个拓扑结(构图在全网范围内是一致的(这称为链路状态数据库的同步)</li></ul><h2 id="边界网关协议BGP（了解）"><a href="#边界网关协议BGP（了解）" class="headerlink" title="边界网关协议BGP（了解）"></a>边界网关协议BGP（了解）</h2><p>由于互联网的规模太大，使得自治系统之间（不同网络之间）的路由选择非常困难。连接在互联网主干网上的路由器，必须对任何有效的IP地址都能在路由表中找到匹配的目的网络。然而，目前互联网的主干网路由器中，一个路由表的项目数早已超过了5万个网络前缀。如果使用链路状态协议，则每一个路由器必须维持一个很大的链路状态数据库。</p><div class="note info flat"><p>对应《计算机网络》谢希仁 (第7版) 4.8章</p></div><h1 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>由于IP地址的紧缺，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。而且考虑到互联网并不很安全，一个机构内也并不需要把所有的主机接入到外部的互联网。</p><p>假定在一个机构内部的计算机通信也是采用TCP/IP协议，那么从原则上讲，对于这些仅在机构内部使用的计算机就可以由本机构自行分配其IP地址.这就是说，让这些计算机使用仅在本机构有效的IP地址(这种地址称为本地地址)，而不需要向互联网的管理机构申请全球唯一的IP地址(这种地址称为全球地址)。这样就可以大大节约宝贵的全球IP地址资源。</p><p>但是，如果任意选择一些IP地址作为本机构内部使用的本地地址，那么在某种情况下可能会引起一些麻烦。例如，有时机构内部的某台主机需要和互联网连接，那么这种仅在内部使用的本地地址就有可能和互联网中某个IP地址重合，这样就会出现地址的二义性问题。</p><p>为了解决这一问题，RFC 1918指明了一些专用地址(private address)。这些地址只能用于一个机构的内部通信，而不能用于和互联网上的主机通信。换言之，专用地址只能用做本地地址而不能用作全球地址。在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发。</p><ul><li>10.0.0.0~10.255.255.255 (或记为10.0.0.0/8，它又称为24位块)</li><li>172.16.0.0~172.31.255.255 (或记为172.16.0.0/12，它又称为20位块)</li><li>192.168.0.0~192.168.255.255 (或记为192.168.0.0/16，它又称为16位块)</li></ul><p>采用这样的专用地址的互连网络称为专用互联网或本地互联网，或更简单些，就叫做专用网。显然，全世界可能有很多的专用互连网络具有相同的专用IP地址，但这并不会引起麻烦，因为这些专用地址仅在本机构内部使用.专用IP地址也叫做可重用地址(可重复使用的地址)。</p><h2 id="NAT技术"><a href="#NAT技术" class="headerlink" title="NAT技术"></a>NAT技术</h2><p>网络地址转换 NAT (Network Address Translation)：NAT规定路由器至少有一个有效的外部全球IP地址。这样，所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址。这种方法需要在专用网连接到互联网的路由器上安装NAT软件 （被称为NAT路由）。</p><p>举个例子：专用网内部的主机A发往互联网上主机B的IP数据报:源IP地址是<code>192.168.0.3</code>，而目的IP地址是<code>213.18.2.4</code>。NAT路由器把IP数据报的源IP地址 <code>192.168.0.3</code>，转换为公网IP地址<code>172.38.1.5</code>，然后转发出去。因此，主机B收到这个IP数据报时，以为A的IP地址是 <code>172.38.1.5</code>。当B给A发送应答时，IP数据报的目的IP地址是NAT路由器的IP地址 <code>172.38.1.5</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240614144432765.png" alt="image-20240614144432765"></p><p>此时，如果内网只有一个用户，那所有通信都来源于这个用户，没有问题。但是，如果内容有多个用户，那应该如何区分返回到<code>172.38.1.5</code>IP的数据报是要发给内网哪个机器的？这是用TCP层内的port number （这是TCP运输层的地址）来区分的。在出去时，把IP换成公网IP，并映射一个对应的端口号给这个包。在返回回来时，使用端口号来区分用户。</p><p>这要求NAT路由器也要维护一张表，表内包含  内网IP，Port ID； 外网IP，Port ID</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/1718348775401.jpg" alt="1718348775401" style="zoom: 10%;" /></p><p>这样使用端口的NTA也叫做NAPT （Network Address and Port Translation）。不使用端口的NAT被称为传统NAT。</p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control Systems Part1-1-控制系统概述及其基本分析</title>
      <link href="/posts/b1714978.html"/>
      <url>/posts/b1714978.html</url>
      
        <content type="html"><![CDATA[<h1 id="控制系统概述"><a href="#控制系统概述" class="headerlink" title="控制系统概述"></a>控制系统概述</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240523193531200.png" alt="image-20240523193531200"></p><p>如上图所示，根据有无feedback，控制系统被分为开环控制系统和闭环控制系统两类。在一个抽象出的系统中，使用Sensor取回需要的数据，Controller处理数据并转换为控制信号，Actuator收到控制信号后将其转化为物理上的输出</p><div class="note info flat"><p>这一门课仅涉及闭环线性时不变控制系统</p></div><h2 id="开环控制系统"><a href="#开环控制系统" class="headerlink" title="开环控制系统"></a>开环控制系统</h2><p>开环控制系统因为没有反馈的存在，因此系统的精度取决于校准的程度。</p><p>而且，开环控制系统无法消除收到的干扰或运行变化所造成的影响。</p><h2 id="闭环控制系统"><a href="#闭环控制系统" class="headerlink" title="闭环控制系统"></a>闭环控制系统</h2><p>闭环控制系统将它现在的实际输出与期望的输出进行对比，再进行控制。这个过程被称为反馈。</p><p>通常来说，<strong>使用负反馈</strong>来控制一个系统。（i.e., 将系统期望的输出-现在的输出，得到error值）。在这门课中，只学习负反馈的情况。</p><h1 id="对系统进行建模（引入）"><a href="#对系统进行建模（引入）" class="headerlink" title="对系统进行建模（引入）"></a>对系统进行建模（引入）</h1><h2 id="使用拉普拉斯变换表达系统传输函数"><a href="#使用拉普拉斯变换表达系统传输函数" class="headerlink" title="使用拉普拉斯变换表达系统传输函数"></a>使用拉普拉斯变换表达系统传输函数</h2><p>一个带有反馈的系统，其系统可以用一个差分方程来描述。通式是：</p><script type="math/tex; mode=display">\frac {d^ {n}y}{dt^ {n}} + a_ {n-1} \frac {d^ {n-1}y}{dt^ {n}1} + a_ {1}  \frac {dy}{dt} +  a_ {0} y(t)=  b_ {m}  \frac {d^ {m}x}{dt^ {m}}  + b_ {1}  \frac {dx}{dt}  +  b_ {0}  x(t)</script><p>通过变换将$y(t)$移动到一边之后，可以得到带有$x(t)$的和不带$x(t)$的两部分。带有$x(t)$的部分构成了系统的强迫响应（即，由外部激励引起的）。没有$x(t)$的部分是系统系统的自由响应。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618182432887.png" alt="image-20240618182432887"></p><p>对这个系统函数进行拉普拉斯变换，$y(t)$和$x(t)$变换为$Y(s)$和$X(s)$。移项后即可传输函数$H(s)$</p><script type="math/tex; mode=display">H(s)=\frac{Y(s)}{X(s)}=\frac{b_ms^m+b_{m-1}s^{m+1}+...+b_1s+b_0}{s^n+a_{n-1}s^{n-1}+...+a_1s+a_0}</script><p>对于这个传输函数：</p><ul><li>分子称为特征多项式（Characteristic Polynomial）: 传输函数的分母</li><li>特征函数（Characteristic Equation）: 让传输函数分母=0</li><li>极点：分母=0的解</li><li>零点：分子=0的解</li></ul><h2 id="系统的各项指标"><a href="#系统的各项指标" class="headerlink" title="系统的各项指标"></a>系统的各项指标</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240523211938096.png" alt="image-20240523211938096" style="zoom:33%;" /></p><p>任何一个系统都可以被描述为上图的形式，其中：</p><ul><li>G：前向传输函数（Forward Transfer Function）</li><li>H：反馈传输函数（Feedback Transfer Function）</li><li>GH：开环传输函数（Open-loop transfer function）</li><li>C/R：闭环传输函数（closed-loop transfer function）$\frac{C}{R}＝\frac{𝐺}{1±𝐺𝐻}$；对于分母，<strong>正反馈是减，负反馈是加</strong>。</li><li>E/R：误差比（Error ratio）$\frac{𝐸}{R}＝\frac{1}{1±𝐺𝐻}$</li><li>B/R：primary feedback ratio $\frac{𝐵}{𝑅}＝\frac{𝐺𝐻}{1±𝐺𝐻}$</li></ul><h3 id="开环与闭环传输函数："><a href="#开环与闭环传输函数：" class="headerlink" title="开环与闭环传输函数："></a>开环与闭环传输函数：</h3><p>对于上图所示的这个系统，其闭环传输函数为$\frac{C}{R}＝\frac{𝐺}{1±𝐺𝐻}$​，其推导很简单，以负反馈系统为例：</p><script type="math/tex; mode=display">[𝑅−𝐶⋅𝐻(𝑠)]G(𝑠)=C</script><script type="math/tex; mode=display">  RG(𝑠)−CG(𝑠)H(𝑠)=C</script><script type="math/tex; mode=display">RG=C[1+𝐺(𝑠)𝐻(𝑠)]</script><script type="math/tex; mode=display">\frac{𝐶}{𝑅}=\frac{𝐺}{1+𝐺𝐻}</script><p>研究闭环传递函数的原因很好理解：C(s)=R(s)H(s)，可以轻易通过闭环传输函数得到系统输出</p><p>那什么是开环传递函数呢？其定义是：断开系统的主反馈通路，则前向通路传递函数$G(s)$与反馈通路传递函数$H(s)$的乘积称为系统的开环传递函数。因此，该系统的开环传递函数就是$GH(s)$</p><p>为什么需要开环传递函数呢？开环传递函数虽然没有直接的物理意义，但是其却包含了系统内所有的传输函数，因此可以从数学层面通过开环传递函数对系统的零极点、稳定性进行研究，且相较于闭环传递函数，减少了计算量。</p><div class="note info flat"><p>开环传递函数是针对于闭环系统而言的，而不是指开环系统的传递函数</p></div><h3 id="二阶系统传输函数的构成"><a href="#二阶系统传输函数的构成" class="headerlink" title="二阶系统传输函数的构成"></a>二阶系统传输函数的构成</h3><p>对于任意一个二阶系统，其可以表示为</p><script type="math/tex; mode=display">\frac{\omega_n^2}{s^2+2\zeta\omega_ns+\omega_n^2}</script><p>其中：</p><ul><li>$\zeta$称为阻尼比(damping ratio)。</li><li>$\omega_n$称为无阻固有频率（damped natural frequency），其物理意义是在系统没有阻尼的时候，自然振荡的频率。</li></ul><p>对这个系统求单位阶跃响应（$u\left(t\right)\ $）：</p><script type="math/tex; mode=display">L\left[u\left(t\right)\right]＝u(s)=\frac{1}{s}</script><script type="math/tex; mode=display">C\left(s\right)=u\left(s\right)H\left(s\right)=\frac{\omega_n^2}{\left(s^2+2\zeta\omega_ns+\omega_n^2\right)s}</script><p>将该式因式分解后反拉普拉斯变化得到时域响应</p><script type="math/tex; mode=display">C\left(s\right)=\frac{1}{s}-\frac{s+2\zeta\omega_n}{s^2+2\zeta\omega_ns+\omega_n^2}=\frac{1}{s}-\frac{s+\zeta\omega_n}{\left(s+\zeta\omega_n\right)^2+\omega_d^2}-\frac{\zeta\omega_n}{\left(s+\zeta\omega_n\right)^2+\omega_d^2}</script><script type="math/tex; mode=display">c(t)=1-\frac{1}{1-\zeta^2}e^{-\zeta\omega_nt}sin(\omega_dt+\beta), \beta=arctan(\sqrt{1-\zeta^2}/\zeta)=arccos\zeta</script><p>其中$\omega_d=\omega_n{\sqrt{1-\zeta^2}}$，称为阻尼固有频率（damped natural frequency），是系统受阻时的角频率。<br>在$\zeta=0$时，称为<strong>无阻尼（undamped）</strong>，系统<strong>持续振荡</strong>，系统极点位<strong>于虚轴上</strong>；<br>在$\zeta＝1$时，称为严<strong>阻尼（Critically damped）</strong>，系统<strong>不会出现振荡</strong>，而是直接逼近稳态值，极点<strong>位于左实轴</strong>；<br>在$0&lt;\zeta&lt;1$时，称为欠阻尼（underdamped）, 系统在振荡后收敛于稳态值，极点位于<strong>s域左侧，有虚部分量</strong>。<br>如下面三图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240617201547167.png" alt="image-20240617201547167"></p><h1 id="瞬态响应的各项指标"><a href="#瞬态响应的各项指标" class="headerlink" title="瞬态响应的各项指标"></a>瞬态响应的各项指标</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240617202208031.png" alt="image-20240617202208031"></p><p>在这样的一个二阶系统响应中：</p><ul><li>Raise time $t_r$: 响应从10%-90% 或 0%-100% 所需的时间；</li></ul><script type="math/tex; mode=display">t_r=\frac{\pi-\beta}{\omega_d}</script><ul><li>Peak time $t_p$：响应到达最高峰值所需的时间；</li></ul><script type="math/tex; mode=display">t_p=\frac{\pi}{\omega_d}</script><ul><li>Maximum Overshoot $M_p$：$\frac{响应过冲-终值}{终值} $的比例；</li></ul><script type="math/tex; mode=display">M_p=e^{-(\sigma/\omega_d)\pi}=e^{-(\sqrt{1-\zeta^2})\pi}\times100%</script><ul><li>Settling time $t_s$：响应稳定至稳态值所需的时间，通常允许2%或5%的误差：（下式中T被称为时间常数，由瞬态响应的衰减速度决定，$T=\frac{1}{\zeta\omega_n}$。）</li></ul><script type="math/tex; mode=display">t_s=4T=\frac{4}{\zeta\omega_n}(2\% criterion);  t_s=3T=\frac{3}{\zeta\omega_n}(5\% criterion)</script><h1 id="系统稳态分析"><a href="#系统稳态分析" class="headerlink" title="系统稳态分析"></a>系统稳态分析</h1><h2 id="基于开环传递函数的系统的分类"><a href="#基于开环传递函数的系统的分类" class="headerlink" title="基于开环传递函数的系统的分类"></a>基于开环传递函数的系统的分类</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240617205014113.png" alt="image-20240617205014113"></p><p>对于G(s)，如果其分母有单独的$s^N$，N为几它就是type N系统。例如没有单独的s只有（Ts+1），那就是type0系统；有s(Ts+1)，就是type1系统</p><div class="note info flat"><p>注意：系统的阶数(order)是指的分母内s的最高次，这里系统的类别（type）是指的孤立s的次数</p></div><h2 id="系统的稳态误差"><a href="#系统的稳态误差" class="headerlink" title="系统的稳态误差"></a>系统的稳态误差</h2><p>对于一个实际的控制系统，其稳态输出不可能在任何 情况下都与输入量一致或相当，也不可能在任何形式的扰 动作用下都能准确地恢复到原平衡位置。因此控制系统的稳态误差是一项重要的技术指标。</p><h3 id="稳态误差的定义"><a href="#稳态误差的定义" class="headerlink" title="稳态误差的定义"></a>稳态误差的定义</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240617212226838.png" alt="image-20240617212226838"></p><p><strong>系统误差的定义：</strong>系统的输入$r(t)$和主反馈信号$b(t)$之差。</p><script type="math/tex; mode=display">e(t)=r(t)-b(t)</script><p><strong>稳态及误差</strong>：当时间趋于无穷时的系统误差即为稳态误差，记为$e_{ss}$</p><script type="math/tex; mode=display">e_{ss}=\lim_{t\rarr\infty}e(t)</script><p>只有当系统稳定时，研究稳态误差才有意义。</p><h3 id="如何求稳态误差"><a href="#如何求稳态误差" class="headerlink" title="如何求稳态误差"></a>如何求稳态误差</h3><p>对于任意一个系统，其开环传递函数为G(s)H(s)，其中前向传递函数$G(s)$:</p><script type="math/tex; mode=display">G(s)=\frac{K(T_as+1)(T_bs+1...(T_ms+1))}{(T_1s+1)(T_2s+1)...(T_ps+1)}</script><p>闭环传递函数是输出比输入得到的，因此有</p><script type="math/tex; mode=display">\frac{G(s)H(s)}{1+G(s)H(s)}=\frac{Y(s)}{R(s)}</script><script type="math/tex; mode=display">Y(s)=\frac{G(s)H(s)}{1+G(s)H(s)}R(s)</script><p>根据上图，$B(s)$有：</p><script type="math/tex; mode=display">B(s)=Y(s)H(s)</script><p>而$E(s)$恰好等于$R(s)-B(s)$，因此：</p><script type="math/tex; mode=display">E(s)=R(s)-Y(s)H(s)=R(s)-\frac{G(s)H(s)}{1+G(s)H(s)}R(s)=R(s)\bigg[\frac{1+G(s)H(s)-G(s)H(s)}{1+G(s)H(s)}\bigg]</script><script type="math/tex; mode=display">=R(s)\frac{1}{1+G(s)H(s)}</script><p>而前面小节介绍的误差比就是:</p><script type="math/tex; mode=display">\frac{E(s)}{R(s)}=\frac{1}{1+G(s)H(s)}</script><p>现在已经有了$E(s)$的表达式，由终值定理，$\lim_{s\rightarrow0}sF(s)=\lim_{t\rightarrow\infty}f(t)$，也就是系统稳定的情况。因此：</p><script type="math/tex; mode=display">e_{ss}=\lim_{t\rarr\infty}e(t)=\lim_{s\rarr0}sE(s)=\lim_{s\rarr0}s\frac{1}{1+G(s)H(s)}R(s)</script><p><strong>只有稳定的系统，才可计算稳态误差。</strong></p><h2 id="不同type系统的稳态误差"><a href="#不同type系统的稳态误差" class="headerlink" title="不同type系统的稳态误差"></a>不同type系统的稳态误差</h2><p>为了更直观地简便举例解释，现考虑H(s)为1，即单位负反馈的情况。此时$G(s)H(s)=G(s)$，那么$\frac{1}{1+G(s)H(s)}R(s)$可以作如下推导：</p><script type="math/tex; mode=display">G(s)=\frac{K(T_as+1)(T_bs+1...(T_ms+1))}{(T_1s+1)(T_2s+1)...(T_ps+1)}</script><script type="math/tex; mode=display">\frac{1}{1+G(s)H(s)}R(s)=\frac{1}{1+\frac{K(T_as+1)(T_bs+1...(T_ms+1))}{(T_1s+1)(T_2s+1)...(T_ps+1)}}R(s)</script><script type="math/tex; mode=display">=\frac{(T_1s+1)(T_2s+1)...(T_ps+1)}{(T_1s+1)(T_2s+1)...(T_ps+1)+K(T_as+1)(T_bs+1...(T_ms+1)){}}R(s)</script><p>也就是，这个式子变成了：（这个式子后面作为辅助解释）</p><script type="math/tex; mode=display">\frac{G(s)分母}{G(s)分母+G(s)分子}R(s)</script><h3 id="unit-step-输入下"><a href="#unit-step-输入下" class="headerlink" title="unit step 输入下"></a>unit step 输入下</h3><p>输入信号u(t)的$U(s)=\frac{1}{s}$。此时：</p><script type="math/tex; mode=display">\lim_{s\rarr0}sE(s)=\lim_{s\rarr0}s\frac{1}{1+G(s)H(s)}R(s)=\lim_{s\rarr0}sE(s)=\lim_{s\rarr0}\frac{1}{1+G(s)H(s)}</script><p>记单位阶跃输入下的静止位置误差常数 （static position error constant）是$K_p$，等于开环传递函数$G(s)H(s)$的极限:</p><script type="math/tex; mode=display">K_p=\lim_{s\rarr0}{G(s)H(s)}</script><p>那么$e_{ss}$就可以由如下式子求到：</p><script type="math/tex; mode=display">e_{ss}=\frac{1}{1+K_p}(仅unit\ step输入适用)</script><p>同时我们发现，对于G(s)没有孤立s在分母的函数（即type0系统），$e_{ss}=\frac{1}{1+K_p}$适用。但是一旦G(s)的分母存在孤立s，那么$K_p=G(0)=\infty$，$e_{ss}=0$；</p><p>这一点通过上面推出的$\frac{G(s)分母}{G(s)分母+G(s)分子}R(s)$也很好解释，G(s)分母存在s，且$s\rightarrow0$，因此$e_{ss}=0$</p><p><strong>因此，对于系统输入单位阶跃响应，稳态误差有：</strong></p><ul><li><strong>type0系统的$e_{ss}=\frac{1}{1+K_p}$</strong></li><li><strong>type1或更高type系统$e_{ss}=0$，$K_p=\lim_{s\rightarrow0}{G(s)H(s)}$</strong></li></ul><h3 id="unit-ramp-输入下"><a href="#unit-ramp-输入下" class="headerlink" title="unit ramp 输入下"></a>unit ramp 输入下</h3><p>输入信号$r(t)$的$R(s)=\frac{1}{s^2}$，此时：</p><script type="math/tex; mode=display">\lim_{s\rarr0}sE(s)=\lim_{s\rarr0}s\frac{1}{1+G(s)H(s)}R(s)=\lim_{s\rarr0}sE(s)=\lim_{s\rarr0}\frac{1}{s+sG(s)H(s)}</script><p>因此$s\rightarrow0$，分母$s+sG(s)H(s)$前面孤立的s可以直接当0对待，因此分母只剩下$sG(s)H(s)$</p><p>记单位斜坡输入下静止速度误差常数 （static velocity error constant）是$K_v$，等于$sG(s)H(s)$的极限:</p><script type="math/tex; mode=display">K_v=\lim_{s\rarr0}{sG(s)H(s)}</script><p>此时$e_{ss}$</p><script type="math/tex; mode=display">e_{ss}=\frac{1}{K_v}</script><p>当G(s)分母没有孤立s（即，type0系统时），$K_v=sG(0)=0$</p><script type="math/tex; mode=display">e_{ss}=\frac{1}{K_v}=\infty</script><p>使用$\frac{G(s)分母}{G(s)分母+G(s)分子}R(s)$也很好解释，$R(s)=\frac{1}{s^2}$，$G(s)分母$未能对其引入的s进行消除，分母带趋近于0的s，因此$e_{ss}=\infty$</p><p>同理可得，当type1系统时，$e_{ss}=\frac{1}{K_v}$，type2及以上系统$e_{ss}=0$</p><p><strong>因此，对于系统输入单位斜坡响应，稳态误差有：</strong></p><ul><li><strong>type0系统$e_{ss}=\infty$</strong></li><li>type1系统$e_{ss}=\frac{1}{K_v},K_v=\lim_{s\rightarrow0}{sG(s)H(s)}$</li><li>type2或更高type系统$e_{ss}=0$</li></ul><div class="note info flat"><p>PPT还介绍了unit-parapolic input和它的$K_a$推导思路和前面一致。后面没怎么用，这里就省略了</p></div><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618113318399.png" alt="image-20240618113318399"></p><h1 id="劳斯-赫尔维茨（Routh–Hurwitz）稳定性准则"><a href="#劳斯-赫尔维茨（Routh–Hurwitz）稳定性准则" class="headerlink" title="劳斯-赫尔维茨（Routh–Hurwitz）稳定性准则"></a>劳斯-赫尔维茨（Routh–Hurwitz）稳定性准则</h1><div class="note info flat"><p>参考视频：<a href="https://www.youtube.com/channel/UCq0imsn84ShAe9PBOFnoIrg">YouTube-Brian Douglas</a></p></div><p>Routh-Hurwitz 稳定性准则是对控制系统稳定性的一种数学检验，是线性时间不变 （LTI） 控制系统稳定性的必要和充分条件。</p><p>在信号与系统中学过，系统特征方程（传输函数的分母=0）解出来的特征根有：</p><ul><li>完全在左半平面时，系统stable</li><li>在虚轴上时，系统critical stable（保持频率振幅不变的震荡）</li><li>出现在右半平面时，系统unstable</li></ul><p>在系统阶数较少时，我们可以利用因式分解将分母拆开，来求得极点。也可以很轻易地用部分分式展开法来求逆变换，观察其时域区域在$t\rightarrow\infty$是否收敛。</p><script type="math/tex; mode=display">H(s)=\frac{1}{s+1}\frac{1}{s-2}\frac{1}{s+3}=\frac{A}{s+1}+\frac{B}{s-2}+\frac{C}{s+3}</script><p>但是，当遇到阶数非常非常高的系统时怎么办呢？有没有什么办法无需进行因式分解，就可以看出有没有极点出现在右半平面的方法？这就是Routh-Hurwitz 稳定性判据在干的事儿。</p><h2 id="Routh-Hurwitz判据"><a href="#Routh-Hurwitz判据" class="headerlink" title="Routh-Hurwitz判据"></a>Routh-Hurwitz判据</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>如果一个特征方程里面的所有项，有一项出现了与其他不同的符号，例如下面这个</p><script type="math/tex; mode=display">s^4+3s^3-5s^2+s+2</script><p>此时可以立马判定这个系统是不稳定的，因为它一定会拆分出一个$(s-C)$(C是任意正常数项)的项目，来凑这个负号。</p><p>但是当符号全部相同时，就无法判定了。因为这种情况下可能会节出来实部为正，含有虚数的特征根。（无论是正负号，若全负号可以把它提一个-1出来放在传输函数分子，变成正号）。例如下面这个例子</p><script type="math/tex; mode=display">G(s)=\frac{1}{s^4+2s^3+3s^2+10s+8}=\frac{1}{s^2-s+4}\frac{1}{s+2}\frac{1}{s+1}</script><script type="math/tex; mode=display">roots:0.5\pm j\sqrt{3.75};\ -2;\ -1</script><p>因此我们必须使用其他更复杂的代数手段来判定，简单地观察符号是行不通的。</p><h3 id="Routh-矩阵"><a href="#Routh-矩阵" class="headerlink" title="Routh 矩阵"></a>Routh 矩阵</h3><p>Routh矩阵定义了一种填写矩阵的方法，可以通过观察矩阵的第一列来看出是否有右半平面的根</p><p>首先，假设特征函数是：</p><script type="math/tex; mode=display">D(s)=As^6+Bs^5+Cs^4+Ds^3+Es^2+Fs^1+Gs^0</script><p>因为特征函数有6阶，因此有7列。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/82903b0bb7c5c672360ca95b57916ef9.jpeg" alt="82903b0bb7c5c672360ca95b57916ef9"></p><ol><li>首先将ABCDEFG按照上图第一步填入矩阵</li><li>使用$\frac{BC-DA}{B}$算出黄色格子，如上图第二步</li><li>使用$\frac{BE-FA}{B}$算出红色格子，如上图第三步</li><li>使用$\frac{BG-0\times A}{B}$算出绿色格子，如上图第四步；此时到达了末尾，因此绿色格子后面填0，换行</li><li>使用$\frac{黄\times D-红\times B}{黄}$算出蓝色格子，如上图第五步</li><li>使用$\frac{黄\times F-绿\times B}{黄}$算出棕色格子，如上图第六步；此时棕色格子后面，绿色格子下面按照这个规则算出来等于0，因此换行；</li><li>保持这个规则，<strong>一直算到全部为0的一行，舍弃掉该行</strong>，剩下的就是Routh矩阵</li></ol><p>通式可以写为：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618172608910.png" alt="image-20240618172608910" style="zoom: 80%;" /></p><h3 id="稳定性判定"><a href="#稳定性判定" class="headerlink" title="稳定性判定"></a>稳定性判定</h3><ul><li>当Routh矩阵的第一列全部是正数时，系统稳定</li><li>Routh矩阵的第一列有几次符号变化，就有几个右边平面的根</li></ul><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>沿用前面例子的系统传输函数：</p><script type="math/tex; mode=display">G(s)=\frac{1}{s^4+2s^3+3s^2+10s+8}=\frac{1}{s^2-s+4}\frac{1}{s+2}\frac{1}{s+1}</script><script type="math/tex; mode=display">roots:0.5\pm j\sqrt{3.75};\ -2;\ -1</script><p>首先，转写为Routh矩阵，上式特征方程为$s^4+2s^3+3s^2+10s+8$。按照下图展示的步骤进行转写</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/548c8b22d6156ae90f01039e33259533.jpg" alt="548c8b22d6156ae90f01039e33259533"></p><p>在Routh矩阵中，第一列经历了从2到-2 和 从-2到18 两次符号变换。因此：系统不稳定，有两个位于右侧的根</p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control Systems Part1-2&amp;3-频率响应分析法:几种图像和渐进法绘制波德图</title>
      <link href="/posts/c235a86e.html"/>
      <url>/posts/c235a86e.html</url>
      
        <content type="html"><![CDATA[<h1 id="波德图-（Bode-plot）"><a href="#波德图-（Bode-plot）" class="headerlink" title="波德图 （Bode plot）"></a>波德图 （Bode plot）</h1><h2 id="引入-什么是波德图"><a href="#引入-什么是波德图" class="headerlink" title="引入-什么是波德图"></a>引入-什么是波德图</h2><p>波德图是一种用于体现系统<strong>开环传输函数(open loop transfer function)</strong>频率响应的图。波德图一般是由二张图组合而成，一张<strong>幅频图</strong>（幅度通常以dB为单位），一张<strong>相频图</strong>（相位通常以degree 为单位），两图都采用对数形式的横坐标（频率轴，单位rad/sec）。下图是一个波德图的例子</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618195336441.png" alt="image-20240618195336441"></p><h2 id="采样法画波德图"><a href="#采样法画波德图" class="headerlink" title="采样法画波德图"></a>采样法画波德图</h2><h3 id="幅频图"><a href="#幅频图" class="headerlink" title="幅频图"></a>幅频图</h3><ol><li>将$s=j\omega$代入求开环传输函数的幅频响应 $|H(s)|$（拉普拉斯变换$s=\sigma+j\omega,\ \sigma=\ 0$ 就等效于傅里叶变换了，详见信号与系统-拉普拉斯变换）</li><li>将其转换为对数形式（$20log\left(\left|H\left(j\omega\right)\right|\right)$）</li><li>变化频率$\omega$计算输出得到幅频图。（注：$|H(j\omega)|$就是开环传输函数在复平面的模长，也就是$\sqrt{\left(Real^2+Img^2\right)}$）</li></ol><h3 id="相频图"><a href="#相频图" class="headerlink" title="相频图"></a>相频图</h3><p>依旧代入s=j\omega，求开环传输函数的相频响应$angle(H(j\omega))$。具体步骤如下：</p><ol><li>分别求得开环传输函数的实部和虚部，将其画在复平面上</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618195655651.png" alt="image-20240618195655651"></p><ol><li>如果开环传输函数落在第一、四象限：$\phi=arctan\left(\frac{Im}{Re}\right)$，注意这里 Im 和 Re 不是绝对值，要带符号的！</li><li>如果开环传输函数落在第二象限：$\phi=\pi-arctan\left(\frac{\left|Im\right|}{\left|Re\right|}\right)$，或是$\phi=\pi+arctan\left(\frac{Im}{Re}\right)$，因为这里Im一定是正，Re一定是负，因此二式等效。</li><li>如果开环传输函数落在第三象限：$\phi=arctan\left(\frac{\left|Im\right|}{\left|Re\right|}\right)-\pi$</li></ol><p>(这一部分就是复变函数里面复数角度主值的求法)</p><p>形象一点来说这个相位角就是，一二象限为正，三四象限为负，<strong>取开环传输函数向量到正半Re轴的角度</strong>。至此，得到相频图。</p><p>幅频图和相频图可以叠加在一张图上，也可以分开作图。</p><div class="note info flat"><p>到这里可以发现，画幅频图和相频图需要变化$\omega$进行扫频操作。这个由人来画是非常困难的，后面会介绍更友好的渐近线画法（非常重要）。在MATLAB中，可以使用函数<code>bode()</code>来绘制波德图。</p></div><h2 id="系统函数不同成分对幅频、相频图的影响"><a href="#系统函数不同成分对幅频、相频图的影响" class="headerlink" title="系统函数不同成分对幅频、相频图的影响"></a>系统函数不同成分对幅频、相频图的影响</h2><h3 id="积分和微分"><a href="#积分和微分" class="headerlink" title="积分和微分"></a>积分和微分</h3><p>Recall——拉普拉斯变换的时域积分性质：</p><script type="math/tex; mode=display">\bigg(\int_{0^-}^{t}\bigg)^nf(t)\leftrightarrow \frac{1}{s^n}F(s)</script><p>Recall——拉普拉斯变换的时域微分性质，若$f(t)$为因果信号，则有：</p><script type="math/tex; mode=display">f^{(n)}(t)\leftrightarrow s^nF(s)</script><p>因此，我们把函数函数分母含有孤立的s称为积分器，把分子含有孤立的s称为微分器。</p><p>现在假设一个系统传输函数有一个微分器或积分器，把它分离出来，可以写成</p><script type="math/tex; mode=display">G(s)=s^{\pm1}G'(s)</script><p>其中$G’(s)$表示剥离和积分器或者微分器的传输函数；$s^{\pm1}$的-1和+1分别代表微分器和积分器。</p><h4 id="（1）积分或微分对幅频图像的影响"><a href="#（1）积分或微分对幅频图像的影响" class="headerlink" title="（1）积分或微分对幅频图像的影响"></a>（1）积分或微分对幅频图像的影响</h4><p>在采样法画波德图中提到，幅频需要将其转化为$20log\left(\left|H\left(j\omega\right)\right|\right)$后计算结果。不妨将$s^{\pm1}G’(s)$代入 (这里面$s=j\omega$频率都为正)，来将积分器或微分器对幅频图的影响剥离开。可以发现：</p><script type="math/tex; mode=display">20log(|H(j\omega)|)=20log(|s^{\pm 1}G'(s)|)=20log(s^{\pm1})+20log(|G'(s)|)</script><p>也就是说，对于积分器，其会带给幅值一个$-20log(s)$的减少；而微分器会给幅值带来$20log(s)$的增加。那么这个加减量和频率的关系是怎么样的呢？将频率代入：$20log(\omega)$</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618205925097.png" alt="image-20240618205925097"></p><p>此时可以发现，频率每增加10倍，幅值上升或下降20dB，因此：</p><ul><li><strong>积分器$\frac{1}{s}$对幅值的影响是-20dB/decade</strong></li><li><strong>微分器s对幅值的影响是+20dB/decade</strong></li><li><strong>有几个微分器或者积分器，就叠加几次；例如有两个微分器，就是-20dB/decade+(-20dB/decade)=-40dB/decade</strong></li></ul><h4 id="（2）积分或微分对相频图的影响"><a href="#（2）积分或微分对相频图的影响" class="headerlink" title="（2）积分或微分对相频图的影响"></a>（2）积分或微分对相频图的影响</h4><p>考虑一个只有微分器或者积分器的系统，也就是说它的实部为0，虚部由微分器或积分器引入：</p><ul><li>微分器系统内$虚部=j\omega$，实部等于0，因此向量在正虚轴上，相位为$+90\degree$</li><li>微分器系统内$虚部=\frac{1}{j\omega}=j\frac{1}{-\omega}$，因此向量在负虚轴上，相位为$-90\degree$</li></ul><p>如果系统内有多个积分器或微分器，他们会互相约掉，只留下最多的；例如假设有2个积分器4个微分器，$\frac{1}{s^2}{s^4}=s^2$，此时$虚部=j\omega^2$因此在正虚轴上，相位为$+90\degree$；</p><p><strong>换句话说，如果微分占主导，则为$+90\degree$；如果微分占主导，则为$-90\degree$</strong></p><p>下图分别展示了微分器（左）积分器（右）的影响。</p><table>    <tr><td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618212004389.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240618212013671.png"></center></td>    </tr></table><h3 id="增益"><a href="#增益" class="headerlink" title="增益"></a>增益</h3><p>增益只作用于传输函数的分子，是一个常数项，用K表示。例如$\frac{K}{s+1}$。如果把这个K提出来，可以理解为将系统$\frac{1}{s+1}$的结果放大了K倍。将增益从传输函数内剥离：</p><script type="math/tex; mode=display">G(s)=KG'(s)</script><p>同样地，$G’(s)$表示剥离了增益剩下的传输函数。</p><h4 id="（1）对幅频图而言"><a href="#（1）对幅频图而言" class="headerlink" title="（1）对幅频图而言"></a>（1）对幅频图而言</h4><p>（在下面默认增益为正）</p><script type="math/tex; mode=display">20log(|H(j\omega)|)=20log(|KG'(s)|)=20log(K)+20log(|G'(s)|)</script><p>所以，增益对幅频图而言，<strong>会将其整体抬升$20log(K)$</strong></p><h3 id="2-对相频图而言"><a href="#2-对相频图而言" class="headerlink" title="(2) 对相频图而言"></a>(2) 对相频图而言</h3><p>增益的影响并不会改变虚部和实部的比例，因此它的相频图无影响</p><h3 id="一阶系统"><a href="#一阶系统" class="headerlink" title="一阶系统"></a>一阶系统</h3><p>一个一阶系统的s域表示是$(Ts+1)^{\pm 1}$。我们还是将其从一个传输函数内剥离开，和前面一样的思想，这里就不重复了。</p><h4 id="1-对幅频图而言"><a href="#1-对幅频图而言" class="headerlink" title="(1)对幅频图而言"></a>(1)对幅频图而言</h4><script type="math/tex; mode=display">20log(|(Ts+1)^{\pm1}|)=\pm20log(\sqrt{(\omega T)^2+1^2})</script><ul><li>当$(\omega T)^2$很小时，可以近似忽略掉它，<strong>认为其对幅值的影响为0</strong>；这个很小的界限是$\omega&lt;&lt;1/T$，在这里为了方便就取$\omega&lt;1/T$。我们将$\frac{1}{T}$称为Break frequency 或 corner frequency；</li><li>当$(\omega T)^2$很大时，可以近似忽略掉1，认为其对幅值的影响是$\pm 20log(\omega T)=\pm[20log(\omega)+20log(T)]$。这以引入里面那个波德图举例，因为T一般小于1，因此$20log(T)$一般为负值，代入$-[20log(\omega)+20log(T)]$相当于加了一点增量，这就是引入里面那个图在下降点附近有略微抬升的原因，即，高阶系统需要对谐振频率进行抬升补偿的原因。<strong>因为近似法只是求个大概，因此这里忽略这个20log（T）</strong>。因此当$\omega&gt;1/T$时，认为其和积分器一样，<strong>提供20dB/decade 的上升或下降</strong>。</li></ul><div class="note info flat"><p>PPT下面会介绍二阶系统的谐振频率补偿，后面不会用，笔记省略了，但是这里展示了为什么会产生谐振峰值振幅。</p></div><h4 id="（2）对相频图而言"><a href="#（2）对相频图而言" class="headerlink" title="（2）对相频图而言"></a>（2）对相频图而言</h4><ul><li>对于$(Ts+1)^{1}$，在$s=j\omega$很小时，几乎由实部1占据主导，因此其相位是$0\degree$；而当$s$大到一定程度，虚部会慢慢发力，会慢慢将相位拉到90°。认为这个很小的界定点是$s=\frac{T}{10}$，认为很大的界定点是$s=10T$。这刚好是2个decade变化90度，因此斜率为$45\degree/decade$</li><li>同理，对于$(T_s+1)^{-1}$，在$s=j\omega$很小时，其相位是$0\degree$；而当$s$大到一定程度，会慢慢将相位拉到-90°。斜率为$-45\degree/decade$</li></ul><p>分别如下面2图所示</p><table>    <tr><td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619002641518.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619002700515.png"></center></td>    </tr></table>## 使用渐进法绘制波德图<div class="note info flat"><p>PPT上有一种先分别画出微（积）分器、增益、一阶系统三者波德图，再将其叠加的方法（相当于分别考虑其三者对幅度和相位的影响，再叠加在一起），但是这种方法不好用，就不在这里详细介绍了，看懂了上面的推导应该可以轻易看懂PPT上的叠加法。</p></div>对于任意一个n阶系统，它都可以拆分成多个一阶系统和积分器，微分器的组合。让我们来对上面的积/微分器，增益K，一阶系统函数对幅频图和相频图的影响结合起来做一个归纳：<div class="note danger flat"><p>五星级归纳和五星级起始幅度相位确定</p></div>### 对幅频图的归纳- 当传输函数分子有孤立的s时，会对幅频图贡献+20dB/decade的上升；- 当传递函数分子有一阶系统时$Ts+1$时，在$\frac{1}{T}$点后它会贡献20dB/decade的上升；- 当传递函数分母有孤立s时，会对幅频图贡献-20dB/decade的下降；- 当传递函数分母有孤立一阶系统$\frac{1}{Ts+1}$时，在$\frac{1}{T}$点后它会贡献-20dB/decade的下降；- 当出现增益K时，对全频段提供$+20log(K)$的抬升可以发现对于$\frac{1}{Ts+1}$，$s_{root}=-\frac{1}{T}$；对于$Ts+1$，$s_{zero}=-\frac{1}{T}$。此时结合一下一阶系统和传递函数的斜率贡献，可以再次归纳为这几点- 传递函数的零点$+20dB/decade$的斜率；在原点的零点（微分器）会提供初始斜率，其他零点在$-s_{zero}$频率后开始提供- 传递函数的极点提供-20dB/decade的斜率；在原点的极点（积分器）会提供初始斜率，其他零点在$-s_{zero}$频率后开始提供### 对相频图的归纳- 当传输函数分子有孤立的s时，会对相频图+90°的初始相位；- 当传递函数分子有一阶系统时$Ts+1$时，在$0.1T$点后它会贡献45°/decade的上升，上升到$10T$点或触及90°后结束；- 当传递函数分母有孤立s时，会对幅频图贡献-90°的初始相位；- 当传递函数分母有孤立一阶系统$\frac{1}{Ts+1}$时，在$0.1T$点后它会贡献-45°/decade的下降，下降到$10T$点或触及-90°后结束；- 当出现增益K时，不会影响相位### 确定起始幅度和相位（在手绘波德图时，一般以$\omega=0.1$做为起始频率，记录为$\omega_0$，当然这也可以是0.2，1等等值）**（1）起始幅度**不难看出，一阶系统无法在起始点直接做出幅度贡献，因此起始点的幅度由K主导决定，再算上0-0.1这个区间内积分器或微分器贡献的。因此，记原点处零点个数为$N_z$,极点个数为$N_p$，再记$N_o=N_z-N_p$。起始点幅度可以表示为：$$20logK+20N_olog(\omega_0)$$**(2) 起始相位**由上面相位归纳可以看出，起始点相位只有积分器或者微分器贡献相位。如果分母的孤立s占主导，则为-90°；如果分子孤立s占主导，则为+90°；如果二者可以约掉，则为0°；### 根据归纳绘制波德图此时便可以根据以上归纳对波德图进行绘制了。如下例：对于单位负反馈系统$$G(s)=\frac{2s}{0.1s+1}$$极点有：-10；零点有0；幅频图：在一开始，只有零点贡献+20dB/decade；到达10之后，有极点贡献-20dB/decade，与零点的贡献叠加后为0dB/decade；同时，起始点代入起始点公式$20logK+20N_olog(\omega_0)$，算出$20log(2)+20\times(1-0)log(0.1)=-14dB$![image-20240619102439434](https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619102439434.png)相频图：可以看到这个系统函数在原点处分子孤立s占主导，那么就是微分器贡献的+90°相位；在1时分母极点开始发力，提供-45°/decade的斜率，一直到100结束。![image-20240619104259076](https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619104259076.png)## 幅值裕度(Gain margin)&相位裕度(phase margin)### 定义- **幅度穿越频率（Gain crossover frequency）：**指幅频图 **幅度与0dB的交点**的频率- **相位穿越频率（Phase crossover frequency）:**指相频图 **相位与-180°交点的**频率<img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619110025998.png" alt="image-20240619110025998" style="zoom:80%;" />- **幅值裕度（gain margin，GM）**：0dB与 在 相位穿越频率对应的幅度值 的差值，即：$0dB-Magitude(\omega_{phase\ crossover\ frequency})$- **相位裕度（phase margin，PM）**幅度穿越频率对应的相位 与 -180° 的差值，即：$Phase(\omega_{magitude\ crossover\ frequency})-(-180\degree)$=$Phase(\omega_{magitude\ crossover\ frequency})+180\degree$![image-20240619110100396](https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619110100396.png)### 幅值裕度、相位裕度与稳定性的关系<div class="note danger flat"><p>五星级关系</p></div>- 如果幅值裕度和相位裕度都为正，则系统稳定- 如果幅值裕度和相位裕度都为0，则系统临界稳定（marginally stable）- 如果任意一个为负值，则系统不稳定结合我们前面提到的，增益K会使得幅频图整体抬升，即缩小幅值裕度。当幅值裕度有正数变为0再变为负数，系统就会从稳定变为不稳定。将让系统临界稳定的增益记为$K_c$，只有当$K<K_c$时系统才稳定。如下图。![image-20240619114928359](https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619114928359.png)同时，稍加推导还可发现：$$20log(K_c)+Magnitude(\omega)=0dB,\ \ 20log(K)+Magnitude(\omega)=现在的振幅$$$$GM=0dB-现在的振幅=20log(K_c)-20log(K)=20log(\frac{K_c}{K})$$因此：$$GM=20\log(\frac{K_c}{K})$$## 由频响反推闭环传输函数当相位裕度PM<60°时，有：$$PM=100\zeta\degree;\ \ \frac{Bandwidth_{(-3dB)}}{\omega_n}=1-0.5\zeta$$即，可以分别求得$\zeta$和$\omega_n$## 幅频曲线与稳态误差$e_{ss}$的关系### 单位阶跃响应CH1中介绍过，对于单位阶跃响应：$$K_p=\lim_{s\rightarrow0}{G(s)H(s)},\ e_{ss}=\frac{1}{1+K_p}$$观察一下，$ \lim_{s\rightarrow0}{G(s)H(s)}$ 刚和波德图幅频的原点$s=j\omega，\omega=0$一致，因此，幅频图的初始值就是$20log(K_p)$![image-20240619134602347](https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619134602347.png)### 单位斜坡响应& 单位抛物线响应这两种响应的证明比较复杂，只需要知道初始斜率的延长线与0dB线的交点频率分别对应$K_v$和$K_a$即可<table>    <tr><td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619135637658.png"></center><td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619135701619.png"></center><td>    </tr></table><h1 id="极坐标图-Polar-plot"><a href="#极坐标图-Polar-plot" class="headerlink" title="极坐标图 (Polar plot)"></a>极坐标图 (Polar plot)</h1><h2 id="引入-什么是极坐标图"><a href="#引入-什么是极坐标图" class="headerlink" title="引入-什么是极坐标图"></a>引入-什么是极坐标图</h2><p>对于一个系统，它的开环系统函数为$GH(s)$，这是一个复数，可以写成$|GH(j\omega)|\angle(\theta)$或者$Real(GH(j\omega))+jImg(GH(j\omega))$的形式。</p><p>而回想一下坐标轴呢：</p><p>在极坐标系下，向量在坐标上的位置由其模长和角度决定，对应$|GH(j\omega)|\angle(\theta)$.</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619140530618.png" alt="image-20240619140530618"></p><p>在笛卡尔子坐标系下我们把X轴定义为实轴，Y轴定义为虚轴，对应$Real(GH(j\omega))+jImg(GH(j\omega))$；</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619140332707.png" alt="image-20240619140332707"></p><p>这两种坐标轴其实画出来的图像是完全一样的。</p><p>极坐标图就是在这样的坐标图下，<strong>把$s$从$0\rightarrow +\infty$时</strong>$GH(s)$的值画在坐标上。例如下面这个例子</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619140815404.png" alt="image-20240619140815404"></p><p>极坐标图的优势是：</p><ul><li>极坐标图的优势在于可以在一个紧凑的图表中显示完整的频率响应信息</li><li>每种类型的传递函数都对应于一个特征轨迹，其基本性质很容易记住</li></ul><h2 id="如何绘制极坐标图"><a href="#如何绘制极坐标图" class="headerlink" title="如何绘制极坐标图"></a>如何绘制极坐标图</h2><ol><li>求出开环传输函数OLTF，将$s=j\omega$代入</li><li>求出$\omega=0$时$GH(j\omega)$的值，这是极坐标图的起始点</li><li>求出$\omega=\infty$时$GH(j\omega)$的值，这是极坐标图的终点</li><li>通过$Img(GH(j\omega))=0$解出$\omega$来检查其是否和实轴相交，并解出交点</li><li>通过$Real(GH(j\omega))=0$解出$\omega$来检查其是否和虚轴相交，并解出交点</li><li>再找几个$\omega$介于这些特殊点间的值，来提高绘图精度</li><li>平滑的曲线连接这些点</li></ol><p><em>举个例子:$G(s)=\frac{1}{s(s+1)}$</em></p><script type="math/tex; mode=display">G(s)=\frac{1}{s(s+1)}=\frac{1}{j\omega(j\omega+1)}=\frac{1}{-\omega^2=j\omega}</script><script type="math/tex; mode=display">=\frac{1}{-\omega^2+j\omega}\times\frac{-\omega^2-j\omega}{-\omega^2-j\omega}=\frac{-\omega^2-j\omega}{\omega^4+\omega^2}=\frac{-1}{\omega^2+1}-j\frac{1}{\omega(\omega^2+1)}</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619142736729.png" alt="image-20240619142736729"></p><h1 id="奈奎斯特稳定性准则（Nyquist-Stability-Criterion）"><a href="#奈奎斯特稳定性准则（Nyquist-Stability-Criterion）" class="headerlink" title="奈奎斯特稳定性准则（Nyquist Stability Criterion）"></a>奈奎斯特稳定性准则（Nyquist Stability Criterion）</h1><div class="note info flat"><p>参考视频：<a href="https://www.bilibili.com/video/BV1yg4y1B7JM/?spm_id_from=333.337.search-card.all.click&amp;vd_source=69d49a5680f58d9a0f04ae8cf1207d1d">【自动控制原理】13_奈奎斯特稳定性判据_Nyquist Stability Criterion_Part 1_哔哩哔哩_bilibili</a></p><p>参考资料：<a href="https://gr.xjtu.edu.cn/c/document_library/get_file?folderId=1797493&amp;name=DLFE-28935.pdf">奈奎斯特稳定判据 西安交通大学-刘剑毅</a></p></div><h2 id="前置知识-柯西幅角定理-（Cauchy’s-Argument-Principle）"><a href="#前置知识-柯西幅角定理-（Cauchy’s-Argument-Principle）" class="headerlink" title="前置知识-柯西幅角定理 （Cauchy’s Argument Principle）"></a>前置知识-柯西幅角定理 （Cauchy’s Argument Principle）</h2><p>(参考资料中对柯西幅角定理进行了证明，若有兴趣可以自行了解)</p><p><strong>柯西幅角定理：</strong>复平面1上的点通函数$F(s)$映射到复平面2（也就是，复平面1是s的值，复平面2是$F(s)$的值）。现有封闭曲线$C_S$包围复平面1上函数$F(s)$的Z个 零点和P个极点。当封闭曲线$C_S$以顺时针方向包围一周时， 在复平面2上也会有封闭曲线$C_F$将以逆时针方向绕原点旋转 N=P-Z 圈</p><ul><li>若N为正数，则$C_F$以逆时针方向环绕，且包围原点；</li><li>若N为0，则$C_F$以顺时针还是逆时针方向环绕不确定，但不包围原点；</li><li>若N为负数，则$C_F$以顺时针方向环绕，且包围原点；</li></ul><p>也就是说，可以通过经过函数映射的复平面的旋转关系，来判断画出来的线内是否包含零极点。如果我们去画一条包围s域右半平面的线，再去看经过系统函数映射出来的线的图像，那么是否就可以判断s平面右半包不包含零极点了？</p><h2 id="奈奎斯特路径（Nyquist-path）"><a href="#奈奎斯特路径（Nyquist-path）" class="headerlink" title="奈奎斯特路径（Nyquist path）"></a>奈奎斯特路径（Nyquist path）</h2><p>上文提到的“一条包围s域右半平面的线”，就被称为奈奎斯特路径，也叫Nyquist counter。</p><p><strong>奈奎斯特路径</strong>是 s 平面中的闭合等值线，它完全包围了 s 平面  的整个右半部分（Right Half Plane, RHP），同时不穿过（绕行）虚轴上或位于 0 处的 $G(s)H(s)$ 的任何极点。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619200329093.png" alt="image-20240619200329093"></p><h2 id="绘制奈奎斯特图"><a href="#绘制奈奎斯特图" class="headerlink" title="绘制奈奎斯特图"></a>绘制奈奎斯特图</h2><p>奈奎斯特图是极坐标图的延续，极坐标图的扫频范围是$0$到$\infty$，而奈奎斯特图的扫频范围奈奎斯特路径定义的范围。画图步骤如下：</p><p><strong>如果$G(s)H(s)$在虚轴上没有极点，则：</strong></p><ol><li>解算出$G(s)H(s)$在虚轴的所有零极点</li><li>绘制从$\omega=0$扫频到$\omega=\infty$的极坐标图；此时完成了奈奎斯特路径上线条ad的扫频</li><li>绘制从$\omega=-\infty$扫频到$\omega=0$的极坐标图；此时完成了奈奎斯特路径上线条fa的扫频</li><li>求得$s=\lim_{R\rightarrow\infty}{Re^{j\theta}},-90\degree&lt;\theta&lt;90\degree$时$G(s)H(s)$的解，对应线条def，通常这个解会趋于一个点。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619200652648.png" alt="image-20240619200652648"></p><p><strong>如果$G(s)H(s)$在虚轴上有极点，则：</strong></p><p>在前面四步的基础上，需要执行第五步：</p><ol><li>取$s\rightarrow poles$但不等于，半径为$\lim_{\rho\rightarrow0}{\rho e^{j\theta}}$，对极点进行绕行</li></ol><p><em>举个例子</em></p><p>对于系统开环传输函数：</p><script type="math/tex; mode=display">G(s)=\frac{1}{s(s+1)}</script><ol><li>首先取$\omega=0^+$扫频到$\omega=\infty$的，可以画出路径下半平面的(c)</li><li>首先$\omega=0^-$扫频到$\omega=-\infty$的，可以画出上班平面的路径(c)</li><li>取$s=\lim_{R\rightarrow\infty}{Re^{j\theta}},-90\degree&lt;\theta&lt;90\degree$,对应的是$G(s)=0$这个点</li><li>取$s\rightarrow 0$且距0半径为$\lim_{\rho\rightarrow0}{\rho e^{j\theta}}$，$90°&lt;\theta&lt;-90°$对其进行绕行，对应是$|G(s)|\rightarrow \infty,$90°&lt;\theta&lt;-90°$，即路径(b)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619205715154.png" alt="image-20240619205715154"></p><h2 id="奈奎斯特稳定性判"><a href="#奈奎斯特稳定性判" class="headerlink" title="奈奎斯特稳定性判"></a>奈奎斯特稳定性判</h2><p>要研究系统是否稳定，就是去研究它的闭环传递函数的所有极点都在左半平面。然而，闭环传递函数是</p><script type="math/tex; mode=display">\frac{G(s)}{1+G(s)H(s)}</script><p><strong>我们现在的讨论都是基于开环传递函数$G(s)H(s)$做的，如何将它们关联呢？</strong></p><p>令$G(s)=\frac{N_G}{D_G}$，$H(s)\frac{N_H}{D_H}$</p><script type="math/tex; mode=display">G(s)H(s)=\frac{N_GN_H}{D_GD_H}</script><script type="math/tex; mode=display">1+G(s)H(s)=1+\frac{N_GN_H}{D_GD_H}=\frac{D_GD_H+N_GN_H}{D_GD_H}</script><script type="math/tex; mode=display">\frac{G(s)}{1+G(s)H(s)}=\frac{\frac{N_G}{D_G}}{\frac{D_GD_H+N_GN_H}{D_GD_H}}=\frac{D_HN_G}{D_GD_H+N_GN_H}</script><p>此时我们发现，$G(s)H(s)$和$1+G(s)H(s)$的分母相等，即二者极点相等。$1+G(s)H(s)$的分子和$\frac{G(s)}{1+G(s)H(s)}$的分母相等，即$1+G(s)H(s)$的零点和$\frac{G(s)}{1+G(s)H(s)}$的极点相等。</p><p>此时，可以发现，$1+G(s)H(s)$的极点和$G(s)H(s)$的极点相同；</p><p>假设现在这个用作映射的函数$F(s)=1+G(s)H(s)$，那么$N=P-Z$的意义就是，<strong>被s域右半平面框住</strong>的$G(s)H(s)$的极点个数减去$\frac{G(s)}{1+G(s)H(s)}$的极点个数；</p><p><strong>我们将$F(s)$左右同时减1做为新的映射函数</strong>，$F’(s)=F(s)-1=G(s)H(s)$。因为这个映射是线性的，所以对于映射过去的绕圈圈的图就是把围绕(0,0)绕圈变成了围绕(-1,0)绕圈，<strong>其他性质不变（即零极点让它绕圈的方向和次数）</strong>。这个$F’(s)$，就是奈奎斯特图的映射了。</p><p>我们知道，当$\frac{G(s)}{1+G(s)H(s)}$右半平面出现极点时，即$Z!=0$时，系统就不稳定。若$Z=0$，那么系统就稳定。换句话说，也就是N=P时，系统稳定。N代表的是绕圈的圈数，P代表的时OLTF的极点个数。至此我们得到了奈奎斯特稳定性判据。</p><p><strong>奈奎斯特稳定性判据：当奈奎斯特图绕圈的圈数等于OLTF右侧极点个数时，系统稳定。(N=P 或 N=P-Z, Z=0)</strong></p><p><em>举个例子</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240619234609300.png" alt="image-20240619234609300" style="zoom:67%;" /></p><p>对于上图，被奈奎斯特路径框住的零点有2个，因此Z=2；极点0个，因此P=0；$N=P-Z=-2$，因此奈奎斯特图顺时针绕两圈。但是由于$N!=P$，所以系统不稳定。</p><h2 id="奈奎斯特图与幅值裕度和相位裕度的关系"><a href="#奈奎斯特图与幅值裕度和相位裕度的关系" class="headerlink" title="奈奎斯特图与幅值裕度和相位裕度的关系"></a>奈奎斯特图与幅值裕度和相位裕度的关系</h2><p>回顾前面，幅值裕度是指的$0dB-相位穿越频率下的幅度$的值。而奈奎斯特图下，某一点距原点的距离就是其幅值，距离正半轴的角度是其相位。</p><p>相位穿越频率是相位等于$-180°$的时候，也就是其与负半实轴的交点。而0dB就是增益为1时，也就是单位圆。也就是说，幅值裕度就是$20log(1-负半实轴交点的幅值)$。</p><p>同理可得，相位裕度就是$曲线与单位圆的交点的相位-180°$。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620002214843.png" alt="image-20240620002214843"></p><h1 id="尼柯尔斯图-（Nichols-Chart）（了解即可）"><a href="#尼柯尔斯图-（Nichols-Chart）（了解即可）" class="headerlink" title="尼柯尔斯图 （Nichols Chart）（了解即可）"></a>尼柯尔斯图 （Nichols Chart）（了解即可）</h1><h2 id="引入-M环和N环"><a href="#引入-M环和N环" class="headerlink" title="引入-M环和N环"></a>引入-M环和N环</h2><h3 id="M环"><a href="#M环" class="headerlink" title="M环"></a>M环</h3><p>常数 M 环（Constant M-Circles）是单位反馈系统的闭环幅度频率响应的轨迹。</p><p>假设有一个单位反馈控制系统：</p><script type="math/tex; mode=display">T(s)=\frac{G(s)}{1+G(s)}</script><p>代入$s=j\omega$，去掉拉普拉斯变换的衰减常数；并将其虚部和实部拆分。</p><script type="math/tex; mode=display">T(j\omega)=\frac{G(j\omega)}{1+G(j\omega)}=\frac{P(\omega)+jQ(\omega)}{(P(\omega)+1)+jQ(\omega)}</script><p>那么这个信号在某一频率$\omega$下的幅度就是$|T(j\omega)|$，记幅度为$M$，有：</p><script type="math/tex; mode=display">M^2=|T^2(j\omega)|=\frac{P^2(\omega)+jQ^2(\omega)}{(P(\omega)+1)^2+jQ^2(\omega)}</script><p>这个式子经过移相改写之后可以改写成一个圆的表达式（这里就不推了，这不是重点），圆的大小随着M的大小变化而变化，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620011130188.png" alt="image-20240620011130188" style="zoom: 67%;" /></p><h3 id="N环"><a href="#N环" class="headerlink" title="N环"></a>N环</h3><p>常数 N 环（Constant N-Circles）是单位反馈系统的闭环相位频率响应轨迹。</p><p>对于和M环一样的系统：</p><script type="math/tex; mode=display">T(j\omega)=\frac{G(j\omega)}{1+G(j\omega)}=\frac{P(\omega)+jQ(\omega)}{(P(\omega)+1)+jQ(\omega)}</script><script type="math/tex; mode=display">\phi=arctan(\frac{Q}{P})-arctan(\frac{Q}{P+1})</script><p>这个也是个随着相位$\phi$改变而增大的圆</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620012112698.png" alt="image-20240620012112698" style="zoom:50%;" /></p><p>使用极坐标表示的幅度和相位，那不就是N环和M环的交点吗？</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620012229992.png" alt="image-20240620012229992" style="zoom: 50%;" /></p><h2 id="尼柯尔斯图"><a href="#尼柯尔斯图" class="headerlink" title="尼柯尔斯图"></a>尼柯尔斯图</h2><p>在上面的M环和N环中，是M环和N环都没有以对数形式给出。而尼科尔斯图对其进行了改进，尼柯尔斯图是将线性非时变系统在不同频率下的增益分贝值及相位绘在一直角坐标系的图上，尼柯尔斯图将二种波德图（波德增益图及波德相位图）结合成一张图，而频率只是曲线中的参数，不直接在图中显示。</p><p>尼科尔斯图的坐标有两部分：</p><ul><li>下面和右侧的线性坐标表示OLTF的幅值和相位，其中横轴表示开环相位，纵轴表示开环幅值</li><li>中间一圈一圈的表示M环和N环</li></ul><p>画尼科尔斯图时，只需使用开环传递函数，和画极坐标图类似的操作即可。</p><p>例如：</p><script type="math/tex; mode=display">G(s)=\frac{1}{s(s+1)(s+3)}</script><script type="math/tex; mode=display">G(j\omega)=\frac{-4\omega^2}{-16\omega^4-(\omega^3-3\omega)^2}+j\frac{(\omega^3-3\omega)}{-16\omega^4-(\omega^3-3\omega)^2}</script><p>这是开环传递函数，从$0-\infty$范围内进行扫频，求得OLTF的幅值和角度，对应线性坐标系标上去即可。</p><p>这条线和非线性坐标系交点处由M环和N环得出的闭环传输函数特征。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620013119357.png" alt="image-20240620013119357" style="zoom: 50%;" /></p><p>其幅值裕度和相位裕度如下图，都是线性坐标系下的交点。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240620014304381.png" alt="image-20240620014304381" style="zoom: 50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 控制系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-CH6-光传输线</title>
      <link href="/posts/f7c4d047.html"/>
      <url>/posts/f7c4d047.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>对于光而言，其频率非常高，因此在讨论光时一般不直接讨论频率，而转为讨论光波的波长（通常以nm为单位）。</p><p>最开始的时候，塑料光纤作为“打通光纤通信最后一米，让用户终端使用光通信”的存在，有很多人在研究。这种光纤只能在较短距离内传输。但是它最终还是没有赶上时代，现在使用较少。</p><p>在CH3中简略介绍过光纤，其中介绍了单模和多模光纤，其粗细有差异。一般来说，单模线芯粗细约为9um，多模线芯粗细越为50um。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325202348684.png" alt="image-20240325202348684"></p><p>将光纤无法做“接头”，因为光的指向性非常明确。一能一条线做一个“插头”。同时，光纤间连接时需要使用融纤机进行融接。</p><p>在光纤传输系统中，首先使用发光二极管（light-emitting diodes）将电信号转化为光，在接收端再用光电二极管（photodiodes）转化为电信号。</p><p>没有发射设备发出单一频率的辐射。LED 的输出线宽（linewidth）通常约为 60 nm，激光器的线宽为 5 至 10 nm，而“单模激光器”的线宽可以小于 0.01 nm。这与本节中会介绍的色散有关，这代表即使信号源是单色的（单频），也会发生频率扩展。</p><p>光纤的通信能力有如下参数来量化：</p><ul><li>光接接收度（light acceptance）</li><li>光损耗（light loss）</li><li>带宽（Bandwidth）</li></ul><p>这三个参数由两个更底层的物理性质决定：光纤的有效直径（active diameter）和光纤内使用的材料的折射率（refractive）。下面将介绍由数学量化的光纤分析：</p><h1 id="光的折射和反射理论"><a href="#光的折射和反射理论" class="headerlink" title="光的折射和反射理论"></a>光的折射和反射理论</h1><h2 id="折射率-Refractive-Index"><a href="#折射率-Refractive-Index" class="headerlink" title="折射率(Refractive Index)"></a>折射率(Refractive Index)</h2><p>光纤的折射率用n来表达，其定义如下</p><script type="math/tex; mode=display">n=\frac{真空光速}{介质光速}=\frac{velocity\ in\ a\ vacuum}{velocity\ in\ a\ medium}</script><p>（由定义式可以看出，真空中折射率为1）</p><p>在光纤中，其介质不同程度地会阻碍光，因此光速比真空中慢。折射率&gt;1</p><p>同时，不同的波长在同一介质中传输速率也有差异，因此波长不同，在同一介质下折射率也不同。因此，光的折射率需要针对某个波长来讨论：</p><script type="math/tex; mode=display">n_\lambda=\frac{真空光速(所有波长都一样)}{波长\lambda的波在介质中光速}</script><p>光通信中常用波长如下图所示，<strong>这里五星级的是</strong>CH3中介绍的850nm，1310nm，1550nm三个传输窗口。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240509172508791.png" alt="image-20240509172508791" style="zoom:50%;" /></p><h2 id="反射和折射的基本理论"><a href="#反射和折射的基本理论" class="headerlink" title="反射和折射的基本理论"></a>反射和折射的基本理论</h2><div class="note danger flat"><p>这里五星级！</p></div><h3 id="折射"><a href="#折射" class="headerlink" title="折射"></a>折射</h3><p>对于两个具有不同折射率$n_1,n_2$的介质，光的折射遵循如下规则：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240509172814675.png" alt="image-20240509172814675" style="zoom:50%;" /></p><p>其中，入射角$i$和出射角$r$关系如下：</p><script type="math/tex; mode=display">\frac{sin(i)}{sin(r)}=\frac{n_2}{n_1}</script><p>或者可以把入射和反射都放在等号两边便于记忆：</p><script type="math/tex; mode=display">(入射)n_1sin(i)=n_2sin(r)(反射)</script><p>可以看到，<strong>当$n_2&lt;n_1$时</strong>，出射角会大于入射角。假如增大入射角，则出射角也会一起增大，如下图箭头所示方向</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240509175429646.png" alt="image-20240509175429646" style="zoom: 67%;" /></p><p>则出射角可能大于90度。这就会产生“全反射”</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>当光经过界面时，一部分会被折射，一部分会被反射。对于反射而言，入射角等于反射角。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/v2-09c0b3dcfd9249914db9aa1484812200_r.jpg" alt="光 - 知乎" style="zoom: 50%;" /></p><h2 id="全反射（total-internal-reflection）"><a href="#全反射（total-internal-reflection）" class="headerlink" title="全反射（total internal reflection）"></a>全反射（total internal reflection）</h2><p>对于不同折射率的介质，当光线<strong>从光密介质</strong>（较高折射率的介质）<strong>进入到光疏介质</strong>（较低折射率的介质），入射角大于临界角(critical angle)时，会发生<strong>全反射(total internal reflection)</strong>：光线全部向内面反射（没有能量损耗）,同时入射角等于出射角。对应下图就是$n_1&gt;n_2$</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240509173159516.png" alt="image-20240509173159516" style="zoom:50%;" /></p><p>其中，临界角(critical angle)的计算公式是：</p><script type="math/tex; mode=display">sin\theta_c=\frac{n_2}{n_1}</script><p><strong>由上可以看出，光纤中，线芯的折射率高于包层</strong></p><h2 id="非涅尔反射（Fresnel-reflection）"><a href="#非涅尔反射（Fresnel-reflection）" class="headerlink" title="非涅尔反射（Fresnel reflection）"></a>非涅尔反射（Fresnel reflection）</h2><p>当光从一种折射率为$n_1$的介质向另一种折射率为$n_2$的介质传播时，在两者的交界处（通常称作界面）若入射角小于临界角度，则会同时发生光的反射和折射。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240509174807740.png" alt="image-20240509174807740" style="zoom:33%;" /></p><p>这样不全的反射就被称为非涅尔反射。其中入射功率$P_0$，折射功率$P_f$，反射功率$P_L$关系如下：</p><script type="math/tex; mode=display">P_L=\frac{(n_1-n_2)^2}{(n_1+n_2)^2}P_0</script><script type="math/tex; mode=display">P_f=\frac{4n_1n_2}{(n_1+n_2)^2}P_0</script><h1 id="光纤传输理论"><a href="#光纤传输理论" class="headerlink" title="光纤传输理论"></a>光纤传输理论</h1><h2 id="光纤内部的全内反射（介绍）"><a href="#光纤内部的全内反射（介绍）" class="headerlink" title="光纤内部的全内反射（介绍）"></a>光纤内部的全内反射（介绍）</h2><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><p>在 18 世纪，人们发现光可以通过液体射流来引导，因为液体内具有高折射率，当液体穿过周围的低折射率空气时，液体内的光将会发生全反射</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240513192316679.png" alt="image-20240513192316679" style="zoom: 67%;" /></p><p>这个过程使用反射方程来建模，即可得到下图。因此，理论来说，使用一个纤芯，只要入射角满足临界角条件即可对光实现引导。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240513192443543.png" alt="image-20240513192443543"></p><p>但是上图是非常理想的core，实际制造中，core的表面其实是凹凸不平的，因此会造成一部分损耗。称之为“Surface defects”，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240513193148005.png" alt="image-20240513193148005"></p><p>因此，仅仅和使用纤芯来对光进行引导是不够的，需要在纤芯外面再加一层包层，包层折射率小于纤芯 （实际应用中通常$n_1$和$n_2$差值很小）。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240513193449446.png" alt="image-20240513193449446"></p><p>这样的结构被称为core–cladding interface (CCI)。通常根据纤芯径和包层直径来定义光纤，以微米为单位。下图是一些常见的光纤参数（不需要记）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240513194217173.png" alt="image-20240513194217173" style="zoom:50%;" /></p><h3 id="阶跃光纤内的两种传输方式"><a href="#阶跃光纤内的两种传输方式" class="headerlink" title="阶跃光纤内的两种传输方式"></a>阶跃光纤内的两种传输方式</h3><p>当一東光线从光纤端面耦合进光纤时，光纤中有两种传输的方式:</p><ul><li>一种是光线始终在一个包含光纤中心轴的平面内传播，并且一个传播周期与中心轴相交两次，这种光线常称为<strong>子</strong><br><strong>午线</strong>，包含光纤中心轴的固定平面就称为<strong>子午面</strong>，如下图(a)中MN平面所示;</li><li>另一种其传播的轨迹不在同一个平面内，并不与光纤中心轴相交，这种光线就称为斜射光线，如下图(b)所示。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616084949190.png" alt="image-20240616084949190"></p><h3 id="子午线阶跃光纤传播模型（五星级）"><a href="#子午线阶跃光纤传播模型（五星级）" class="headerlink" title="子午线阶跃光纤传播模型（五星级）"></a>子午线阶跃光纤传播模型（五星级）</h3><div class="note info flat"><p>五星级例题，《电信传输原理 第2版》P90</p></div><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240513201828600.png" alt="image-20240513201828600"></p><p>已知纤芯半径为a，折射率为$n_1$；包层折射率为$n_2$，并且$n_1&gt;n_2$。<strong>空气的折射率为$n_0=1$</strong></p><p>因为$n_1&gt;n_2$，因此折射角大于入射角，可以发生全反射。</p><p>光线以$\phi_i$的角度，从空气$n_0$入射至$n_1$,因此有：（注意，这个地方的入射角和出射角和前面介绍的是情况互补的，但是公式依旧适用（可以用光路可逆来解释））</p><script type="math/tex; mode=display">\theta_z=arcsin(\frac{n_0}{n_1}sin\phi_i)</script><script type="math/tex; mode=display">\theta_i=90\degree-\theta_z</script><p>如果$\theta_i&lt;\theta_c$，则是上图①的情况，有部分光折射出去。若$\theta_i&gt;\theta_c$，则是②的情况，发生全反射。那么这个临界角度反应到$\phi_i$上是多少呢？记临界情况$\phi_i=\phi_0,\theta_z=\theta_{z_0},\theta_i=\theta_c$</p><script type="math/tex; mode=display">n_0sin(\phi_0)=n_1sin(\theta_{z_0})=n_1sin(90\degree-\theta_c)=n_1cos(\theta_c)</script><p>也就是说，只要求得$n_1cos(\theta_c)$的值，就可以逆推$\phi_0$</p><script type="math/tex; mode=display">n_1cos(\theta_c)=n_1\sqrt{1-sin^2(\theta_c)}</script><p>根据折射公式$n_1sin(\theta_c)=n_2$，因此有：</p><script type="math/tex; mode=display">n_1cos(\theta_c)=n_1\sqrt{1-(\frac{n_2}{n_1})^2}=n_1\sqrt{\frac{n_1^2-n_2^2}{n_1^2}}</script><p>如果将包层和纤芯的折射率的差异使用 <strong>相对折射率差</strong>$\Delta$来描述：</p><script type="math/tex; mode=display">\Delta = \frac{n_1^2 -n_2^2}{2n_1^2}\approx\frac{n_1-n_2}{n_1}</script><p>上式可以写为：</p><script type="math/tex; mode=display">n_1cos(\theta_c)=n_1\sqrt{\frac{n_1^2-n_2^2}{n_1^2}}=\sqrt{2\Delta}=\sqrt{n_1^2-n_2^2}</script><p>回到最初的$n_0sin(\phi_0)=n_1cos(\theta_c)$:</p><script type="math/tex; mode=display">\phi_0=arcsin\bigg(\frac{\sqrt{n_1^2-n_2^2}}{n_0}\bigg)</script><h3 id="光纤数值孔径（Numerical-Aperture-NA）"><a href="#光纤数值孔径（Numerical-Aperture-NA）" class="headerlink" title="光纤数值孔径（Numerical Aperture, NA）"></a>光纤数值孔径（Numerical Aperture, NA）</h3><p>不妨直接将子午线模型中的$n_0sin(\phi_0)=n_1cos(\theta_c)$直接定义为$n_0sin(\phi_0)=NA$。其中NA为光纤数值孔径，表征光纤收集光的能力。</p><script type="math/tex; mode=display">NA=n_0sin(\theta_0)=\sqrt{2\Delta}=\sqrt{n_1^2-n_2^2}</script><p>可见，纤芯与包层折射率差异$\Delta$越大，NA越大，代表光线集光能力越强。通信用的光纤NA较小，故称为<strong>弱导光纤</strong>。</p><div class="note info flat"><p>如果遇到光的接受度（light acceptance），就是NA</p></div><h2 id="光纤的传输损耗"><a href="#光纤的传输损耗" class="headerlink" title="光纤的传输损耗"></a>光纤的传输损耗</h2><p>光纤的损耗可以大体分为：</p><ul><li>光纤本身的传输损耗：由光纤本身物理性质产生的损耗。</li><li>光纤使用事引起的传输损耗：在安装时，由于弯曲/接头连接/融接等操作中引起的损耗。</li></ul><div class="note danger flat"><p>五星级</p></div><p>其中又可以分为数个小类，如下表所示。<strong>下表中前3列（就是不含最后的详细描述）要求掌握。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240516164306539.png" alt="image-20240516164306539"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240516164432076.png" alt="image-20240516164432076"></p><div class="note info flat"><p>bnh的补充小课堂：微弯曲损耗有可能是在从光纤生产到光缆的过程中产生的。由于生产工艺造成了一些应力不均等，造成了光纤产生了非常非常微小的弯曲。</p></div><h2 id="色散特性"><a href="#色散特性" class="headerlink" title="色散特性"></a>色散特性</h2><h3 id="多模模式色散（mode-dispersion）"><a href="#多模模式色散（mode-dispersion）" class="headerlink" title="多模模式色散（mode dispersion）"></a>多模模式色散（mode dispersion）</h3><p>模式色散一般存在于<strong>多模光纤</strong>中。因为，在多模光纤中同时存在多个模式，<strong>不同模式沿光纤轴向传播的群速度不同</strong>，它们到达终端时，必定会有先有后，出现时延差，形成模式色散，从而引起脉冲宽度展宽，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240516172557207.png" alt="image-20240516172557207"></p><h3 id="材料色散（materialdispersion）"><a href="#材料色散（materialdispersion）" class="headerlink" title="材料色散（materialdispersion）"></a>材料色散（materialdispersion）</h3><p>光波在光学介质中传播时其介质材料的折射率n随波长λ变化而产生的，使得各波长的光信号传播速度不同，在接收端产生的波形时域扩展的现象。</p><h3 id="波导色散（waveguide-dispersion）"><a href="#波导色散（waveguide-dispersion）" class="headerlink" title="波导色散（waveguide dispersion）"></a>波导色散（waveguide dispersion）</h3><p>波导色散是对于光纤的某一传输模式，在不同的光波长下的群速度不同引起的脉冲展宽。它与光纤结构的波导效应有关，因此也被成为结构色散。</p><h3 id="偏振色散（Polarization-Mode-Dispersion）"><a href="#偏振色散（Polarization-Mode-Dispersion）" class="headerlink" title="偏振色散（Polarization Mode Dispersion）"></a>偏振色散（Polarization Mode Dispersion）</h3><p>一个信号脉冲沿着理想的对称圆形单模光纤在不受外界干扰情况下传输时,光纤输入端的光脉冲可分裂成两个垂直的偏振输出脉冲,以相同的的传播速度进行传输,并同时到达光纤输出端,这两个脉冲叠加在一起会重现出它们在光纤输入端时的偏振状态,实际上光纤由于上文所述的种种原因,会引起双折射,即x轴方向和y轴方向上的折射率是不一样的,这将引起偏振模色散（Polarization Mode Dispersion）</p><ul><li>多模光纤：模式色散为主</li><li>单模光纤：材料色散为主</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32的SPI控制器</title>
      <link href="/posts/a3cf4757.html"/>
      <url>/posts/a3cf4757.html</url>
      
        <content type="html"><![CDATA[<p>[施工中..]</p><h1 id="SPI控制器"><a href="#SPI控制器" class="headerlink" title="SPI控制器"></a>SPI控制器</h1><h2 id="SPI控制器原理"><a href="#SPI控制器原理" class="headerlink" title="SPI控制器原理"></a>SPI控制器原理</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240421140451956.png" alt="image-20240421140451956"></p><p>上图展示了STM32F4系列的SPI控制器框图。由波特率发生器产生时间信号，逻辑控制器进行MOSI和MISO控制，并产生片选信号。同时由Tx Rx两个缓冲寄存器+移位寄存器构成发送模块。控制寄存器主要有SPI_CR1，SPI_CR2，BR。</p><h3 id="发送流程"><a href="#发送流程" class="headerlink" title="发送流程"></a>发送流程</h3><ol><li>数据写入Tx Buffer</li><li>Tx Buffer内的的数据填入移位寄存器</li><li>移位寄存器逐个bit发至MOSI线</li><li>发送完毕，SPI_SR TXE寄存器置位</li></ol><h3 id="接收流程"><a href="#接收流程" class="headerlink" title="接收流程"></a>接收流程</h3><ol><li>数据写入移位寄存器</li><li>移位寄存器写入 Rx Buffer</li><li>接收完成，SPI_SR EXNE置位</li><li>读取Rx Buffer内的内容</li></ol><h3 id="片选信号"><a href="#片选信号" class="headerlink" title="片选信号"></a>片选信号</h3><p>在SPI_CR1寄存器中的SSI信号即是该控制器内的片选信号发生器。可通过配置SPI_CR1 SSM寄存器来决定该信号是否对外输出。以此实现不同的片选效果。在NSS对外输出时，配置SPI_CR1 SSOE寄存器又可定义两种不同的硬件管理模式</p><p>STM32的SPI控制器支持三种片选模式：</p><ul><li>软件管理：（SSM=1）外部NSS引脚空闲，可复用其他功能。自定义GPIO通过写高低电平实现片选</li><li>硬件管理（输出使能模式，SSM=0 SSOE=1）:STM32此时为通信主机。当主器件开始通信时，NSS 信号驱动  为低电平，并保持到 SPI 被关闭为止。</li><li>硬件管理（输出禁止模式，SSM=0 SSOE=0）：若STM32此时作为从机模式，则NSS引脚为从机片选输入。若STM32此时作为主机模式，此模式是多主机配置，多主多从SPI极少使用，此处不详细介绍。</li></ul><h2 id="时钟极性CPOL"><a href="#时钟极性CPOL" class="headerlink" title="时钟极性CPOL"></a>时钟极性CPOL</h2><ul><li>0：SCK在空闲时低电平，第一边沿为由低变高</li><li>1：SCK在空闲时高电平，第一边沿为由高变低</li></ul><h2 id="时钟相位CPHA"><a href="#时钟相位CPHA" class="headerlink" title="时钟相位CPHA"></a>时钟相位CPHA</h2><ul><li>0：SCK在第一（奇数）边沿进行采样</li><li>1：SCK在第二（偶数）边沿进行采样</li></ul><div class="note info flat"><p>时钟极性和相位通常使用00（CPOL=0,CPHA=0）或11的组合。</p></div><div class="note danger flat"><p>在使用SPI时，必须讲对应GPIO的引脚设置为复用模式。当在MspInit中进行设置。</p></div><h1 id="SPI相关寄存器"><a href="#SPI相关寄存器" class="headerlink" title="SPI相关寄存器"></a>SPI相关寄存器</h1><h2 id="SPI-CR1寄存器"><a href="#SPI-CR1寄存器" class="headerlink" title="SPI_CR1寄存器"></a>SPI_CR1寄存器</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240421143259090.png" alt="image-20240421143259090"></p><h3 id="位-15-BIDIMODE：双向通信数据模式使能-Bidirectional-data-mode-enable"><a href="#位-15-BIDIMODE：双向通信数据模式使能-Bidirectional-data-mode-enable" class="headerlink" title="位 15 BIDIMODE：双向通信数据模式使能 (Bidirectional data mode enable)"></a>位 15 BIDIMODE：双向通信数据模式使能 (Bidirectional data mode enable)</h3><ul><li>0：选择双线单向通信数据模式 </li><li>1：选择单线双向通信数据模式 </li></ul><h3 id="位-14-BIDIOE：双向通信模式下的输出使能-Output-enable-in-bidirectional-mode"><a href="#位-14-BIDIOE：双向通信模式下的输出使能-Output-enable-in-bidirectional-mode" class="headerlink" title="位 14 BIDIOE：双向通信模式下的输出使能 (Output enable in bidirectional mode)"></a>位 14 BIDIOE：双向通信模式下的输出使能 (Output enable in bidirectional mode)</h3><p>此位结合 BIDIMODE 位，用于选择双向通信模式下的传输方向 </p><ul><li>0：禁止输出（只接收模式）  </li><li>1：使能输出（只发送模式） </li></ul><p><em>注意：在主模式下，使用 MOSI 引脚；在从模式下，使用 MISO 引脚</em></p><h3 id="位-13-CRCEN：硬件-CRC-计算使能-Hardware-CRC-calculation-enable"><a href="#位-13-CRCEN：硬件-CRC-计算使能-Hardware-CRC-calculation-enable" class="headerlink" title="位 13 CRCEN：硬件 CRC 计算使能 (Hardware CRC calculation enable)"></a>位 13 CRCEN：硬件 CRC 计算使能 (Hardware CRC calculation enable)</h3><ul><li><p>0：禁止 CRC 计算 </p></li><li><p>1：使能 CRC 计算 </p></li></ul><p>注意：为确保正确操作，只应在禁止 SPI（SPE =“0”）时对此位执行写操作 </p><h3 id="位-12-CRCNEXT：下一次传输-CRC-CRC-transfer-next"><a href="#位-12-CRCNEXT：下一次传输-CRC-CRC-transfer-next" class="headerlink" title="位 12 CRCNEXT：下一次传输 CRC (CRC transfer next)"></a>位 12 CRCNEXT：下一次传输 CRC (CRC transfer next)</h3><ul><li><p>0：数据阶段（无 CRC 阶段）</p></li><li><p>1：下一次传输为 CRC（CRC 阶段） </p></li></ul><p>注意：当 SPI 配置为全双工或只发送模式时，只要最后一个数据写入 SPI_DR 寄存器，就必须对 CRCNEXT 执行写操作。  当 SPI 配置为只接收模式时，必须在接收到倒数第二个数据之后将 CRCNEXT 置 1。  当传输由 DMA 管理时，此位应保持清零状态。 </p><h3 id="位-11-DFF：数据帧格式-Data-frame-format"><a href="#位-11-DFF：数据帧格式-Data-frame-format" class="headerlink" title="位 11 DFF：数据帧格式 (Data frame format)"></a>位 11 DFF：数据帧格式 (Data frame format)</h3><ul><li><p>0：为发送/接收选择 8 位数据帧格式 </p></li><li><p>1：为发送/接收选择 16 位数据帧格式 </p></li></ul><p>注意：为确保正确操作，只应在禁止 SPI（SPE =“0”）时对此位执行写操作 </p><h3 id="位-10-RXONLY：只接收-Receive-only"><a href="#位-10-RXONLY：只接收-Receive-only" class="headerlink" title="位 10 RXONLY：只接收 (Receive only)"></a>位 10 RXONLY：只接收 (Receive only)</h3><p>此位结合 BIDIMODE 位，用于选择双线单向模式下的传输方向。此位也适用于多从模式系   统，在此类系统中，不会访问特定从器件，也不会损坏访问的从器件的输出。</p><ul><li><p>0：全双工（发送和接收） </p></li><li><p>1：关闭输出（只接收模式） </p></li></ul><h3 id="位-9-SSM：软件从器件管理-Software-slave-management"><a href="#位-9-SSM：软件从器件管理-Software-slave-management" class="headerlink" title="位 9 SSM：软件从器件管理 (Software slave management)"></a>位 9 SSM：软件从器件管理 (Software slave management)</h3><p>当 SSM 位置 1 时，NSS 引脚输入替换为 SSI 位的值。 </p><ul><li><p>0：禁止软件从器件管理 </p></li><li><p>1：使能软件从器件管理 </p></li></ul><h3 id="位-8-SSI：内部从器件选择-Internal-slave-select"><a href="#位-8-SSI：内部从器件选择-Internal-slave-select" class="headerlink" title="位 8 SSI：内部从器件选择 (Internal slave select)"></a>位 8 SSI：内部从器件选择 (Internal slave select)</h3><p>仅当 SSM 位置 1 时，此位才有效。此位的值将作用到NSS引脚上，并忽略 NSS 引脚的 IO 值。 </p><h3 id="位-7-LSBFIRST：帧格式-Frame-format"><a href="#位-7-LSBFIRST：帧格式-Frame-format" class="headerlink" title="位 7 LSBFIRST：帧格式 (Frame format)"></a>位 7 LSBFIRST：帧格式 (Frame format)</h3><ul><li><p>0：先发送 MSB </p></li><li><p>1：先发送 LSB </p></li></ul><p>注意：正在通信时不应更改此位。 </p><h3 id="位-6-SPE：SPI-使能-SPI-enable"><a href="#位-6-SPE：SPI-使能-SPI-enable" class="headerlink" title="位 6 SPE：SPI 使能 (SPI enable)"></a>位 6 SPE：SPI 使能 (SPI enable)</h3><ul><li><p>0：关闭外设 </p></li><li><p>1：使能外设 </p></li></ul><p>注意：2- 关闭 SPI 时，需按照后续介绍的指定步骤操作。</p><h3 id="位-5-3-BR-2-0-：波特率控制-Baud-rate-control"><a href="#位-5-3-BR-2-0-：波特率控制-Baud-rate-control" class="headerlink" title="位 5:3 BR[2:0]：波特率控制 (Baud rate control)"></a>位 5:3 BR[2:0]：波特率控制 (Baud rate control)</h3><ul><li>000: fPCLK/2</li><li>100: fPCLK/32</li><li>001: fPCLK/4</li><li>010: fPCLK/8</li><li>011: fPCLK/16</li><li>101: fPCLK/64</li><li>110: fPCLK/128</li><li>111: fPCLK/256 </li></ul><p>注意：正在通信时不应更改这些位。 </p><h3 id="位-2-MSTR：主模式选择-Master-selection"><a href="#位-2-MSTR：主模式选择-Master-selection" class="headerlink" title="位 2 MSTR：主模式选择 (Master selection)"></a>位 2 MSTR：主模式选择 (Master selection)</h3><ul><li><p>0：从配置 </p></li><li><p>1：主配置 </p></li></ul><p>注意：正在通信时不应更改此位。</p><h3 id="位1-CPOL：时钟极性-Clock-polarity"><a href="#位1-CPOL：时钟极性-Clock-polarity" class="headerlink" title="位1 CPOL：时钟极性 (Clock polarity)"></a>位1 CPOL：时钟极性 (Clock polarity)</h3><ul><li><p>0：空闲状态时，SCK保持低电平 </p></li><li><p>1：空闲状态时，SCK保持高电平 </p></li></ul><h3 id="位-0-CPHA：时钟相位-Clock-phase"><a href="#位-0-CPHA：时钟相位-Clock-phase" class="headerlink" title="位 0 CPHA：时钟相位 (Clock phase)"></a>位 0 CPHA：时钟相位 (Clock phase)</h3><ul><li><p>0：从第一个时钟边沿开始采样数据 </p></li><li><p>1：从第二个时钟边沿开始采样数据 注意：正在通信时不应更改此位。</p></li></ul><h2 id="SPI-CR2寄存器"><a href="#SPI-CR2寄存器" class="headerlink" title="SPI_CR2寄存器"></a>SPI_CR2寄存器</h2><h1 id="配置SPI的步骤"><a href="#配置SPI的步骤" class="headerlink" title="配置SPI的步骤"></a>配置SPI的步骤</h1><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><h2 id="从机"><a href="#从机" class="headerlink" title="从机"></a>从机</h2>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC4-数据链路交换技术</title>
      <link href="/posts/a8a0740e.html"/>
      <url>/posts/a8a0740e.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><p>这一章节要求：能明确地对分组交换和电路交换的特征，技术等进行明确地表述。很重要！</p></div><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><em>讲故事部分</em></p><p>最开始的时候，电话终端是需要配电源的，在需要发起一次通信时，摇动电话上的手柄，通过电磁感应产生一个信号发送给接线员。接线员知道你要和那里接通和后，人工将两根金属线连通。这便是最初的人工交换机。后面出现了机电交换机，通过机械取代人工工作。后续电路开关成熟，产生了程控交换，至此，交换技术和计算机搭上界了。</p><p>在计算机的世界中，表示数字0-9至少需要4bit，那么就可以表示0-F（HEX）。因此键盘上后续加入了* 和 #，分别占A和B（HEX），0-9对应0-9（HEX）。后面几位保留。</p><p>在ch1-基本交换技术中，已经对交换进行了初步的介绍，现在的交换主要电路交换和分组交换；而这里面的细分方式又分为面向连接和和面向无连接。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/Screenshot_2024-04-19-15-14-43-656_com.miui.notes.jpg" alt="Screenshot_2024-04-19-15-14-43-656_com.miui.notes" style="zoom:50%;" /></p><p>如果带宽资源充分，分组交换的带宽资源使用率更好。但是分组交换无法确保通信持续的质量。</p><p>在通信网络中，我们需的要通信的设备称为“station”，将交换设备称为“node”。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240419153209667.png" alt="image-20240419153209667" style="zoom: 50%;" /></p><p>通信网络是由一个一个node连接构成，node可以互相交换数据，也可以将数据发送给station。不同的nodes之间可能没有直接的通路，因此需要一个中间介质来进行转发。</p><h1 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h1><p>电路交换的定义在 <em>CH1-OVERVIEW</em>中有详细介绍。</p><p>在曾经电路交换盛行的时候，其组成的网络被成为交换网络，每一个节点被成为交换机。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240424163554667.png" alt="image-20240424163554667"></p><p>以前拨打长途电话需要加区号，例如重庆是023，这一层就是供给Long-distance office 选择通路使用，后面的本地号码供给end office 选择通路使用。这样的号码是提供给交换机用的，属于“控制数据”。建立连接后通话的数据，为“业务数据”。</p><p>在电路交换中，含有控制数据的帧，被成为“信令”，类比与计算机网络中就是“协议”。</p><p>在拨号完成后，交换机只接收到了信令，此时正在完成通路的建设（建立连接）。最初使用电路交换时，信令也是分层的，但其来源于OSI模型（现在计算机网络是TCP/IP），其作用是建立连接，释放连接。</p><p>在连接建立完成后，<strong>电路交换的“业务数据”是没有头部的</strong>。这是电路交换中的“透明传输”。与计算机网络的透传有点差异的是，计算机网络中Header会被读取，只是不关心payload。而电信网络中业务数据没有Header。</p><div class="note info flat"><p>透明传输指的是，在通信过程中，通信的模块不关心payload的内容，只是根据自己的协议将你的Payload送到目的地，再将payload交由其他东西处理。</p></div><h1 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h1><h2 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h2><div class="note info flat"><p>在CH1-OVERVIEW中对分组交换原理有详细介绍</p></div><p>最初，电路交换是为电信网络业务而生；分组交换是为计算机网络业务而生。分组交换中，一个packet会同时包含payload和header（控制信息）。</p><p>但是在某一段时期，运营商推了一个叫做“IP”电话的业务，主要面向低资费长途业务，深受小情侣青睐。这是因为在长途传输时，如果使用传统的电路交换，通信资源占用很大。而IP电话在长途传输的跨省节点间使用分组交换，大大降低了通信成本。但最初IP电话的通信质量并不高。</p><p>分组交换的特性决定了，它一定是先存储后转发（必须先存一个完整的packet，再发送出去）；对比电路交换，电路交换的存储（缓冲）都是比特级的。因此分组交换的延迟更大，同时对缓存空间有更大的要求。</p><div class="note info flat"><p>从上面这段也可看出，每个节点都有自己的时延，不单单只有传播时延迟。这些时延可能是分组交换下的排队时延，错误造成的节点阻塞等等造成的。</p></div><p>在分组交换中，通常会以流量限制来避免通信链路阻塞。因为通信链路阻塞（缓存溢出）会导致数据被丢弃，因此要尽量避免阻塞。</p><h2 id="数据报"><a href="#数据报" class="headerlink" title="数据报"></a>数据报</h2><p>在CH1中对数据报的大概工作原理，“路由”的概念已经有了一个基础介绍。</p><p>如下图所示，datagram不一定会让各个数据走同样的路由。因此可能出现数据乱序。同时，因为中间节点需要先缓存再转发，因此转发时延明显更大。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240426142610258.png" alt="image-20240426142610258" style="zoom: 80%;" /></p><h2 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h2><p>虚电路虽节点都有各自的路由表，但一旦路由建立，路径便不会再做更改。它中间路由的节点只需要查看数据包从哪来，然后换上新的要到哪去的标签，因此它中间的转发时间没有datagram那么多。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240426143018970.png" alt="image-20240426143018970" style="zoom:80%;" /></p><h2 id="虚电路和数据报比较"><a href="#虚电路和数据报比较" class="headerlink" title="虚电路和数据报比较"></a>虚电路和数据报比较</h2><h3 id="Virtual-circuits"><a href="#Virtual-circuits" class="headerlink" title="Virtual circuits:"></a>Virtual circuits:</h3><ul><li>路径不可变换，因此链路保证时序。</li><li>转发更加迅速</li><li>可靠性不如数据报</li></ul><h3 id="Datagram"><a href="#Datagram" class="headerlink" title="Datagram"></a>Datagram</h3><ul><li>路径可变换，更灵活</li><li>不需要进行呼叫建立(call setup)</li><li>更可靠</li></ul><h2 id="分组大小和传输时间"><a href="#分组大小和传输时间" class="headerlink" title="分组大小和传输时间"></a>分组大小和传输时间</h2><p>下图展示了不同分组大小和传输时间间的关系。这个分组的大小被称之为“交换粒度”。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240426144119945.png" alt="image-20240426144119945"></p><p>包越大，交换时粒度越粗。但有时数据比较小也要用很大一个包。可以看到，越小的包，Header开销越大。</p><p>有些包长短可调，这种对个体而言是有优势的。但是不利于系统，因为可变的包必须要先读header来确认包大小。或是在头和尾引入特定的编码来分割payload，这也是额外的开销。</p><h1 id="一个典型的虚电路——ATM"><a href="#一个典型的虚电路——ATM" class="headerlink" title="一个典型的虚电路——ATM"></a>一个典型的虚电路——ATM</h1><h2 id="引入-2"><a href="#引入-2" class="headerlink" title="引入"></a>引入</h2><div class="note info flat"><p>ATM这部分要求不太多，但是它是虚电路交换的代表，所以需要有个概念。这一章节要求通过ATM例子掌握“虚电路”的核心概念。</p></div><p>ATM是一种典型的分组-虚电路交换。</p><p>一开始，电信网络和计算机网络分别采用了Circuit switching(CS) 和 Packet Switching(PS)。他们各自都清楚自己的优缺点。ATM是便在这二者之间取了一个平衡。它有Packet的概念，同时通信之前又需要建立连接，且路由路径恒定。</p><p>ATM传输以<strong>信元</strong>（cell）为单位，每个信元<strong>固定53字节</strong>，其中Header是<strong>5字节</strong>。交换机通过点对点的ATM链路相互连接，称为“接口”（interfaces）。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240508165429927.png" alt="image-20240508165429927" style="zoom:50%;" /></p><div class="note danger flat"><p>五星级：ATM传输以<strong>信元</strong>（cell）为单位，每个信元<strong>固定53字节</strong>，其中Header是<strong>5字节</strong>。</p></div><h2 id="ATM的特点"><a href="#ATM的特点" class="headerlink" title="ATM的特点"></a>ATM的特点</h2><ul><li>帧时序为顺序</li><li>使用固定的信元长度</li><li>以离散的块打包数据</li><li>一个物理连接上支持多个逻辑连接</li><li>有差错和流量控制能力，但不多</li></ul><h2 id="协议层模型"><a href="#协议层模型" class="headerlink" title="协议层模型"></a>协议层模型</h2><p>如下图，ATM是一个运作在物理层之上的协议。其上层必须是AAL层，该层提供了5中不同的业务模型接口,在3G网络中，用得比较多的是语音接口和数据接口。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240508163129682.png" alt="image-20240508163129682" style="zoom:50%;" /></p><h2 id="ATM接口"><a href="#ATM接口" class="headerlink" title="ATM接口"></a>ATM接口</h2><p>ATM的交换/接入节点被称为接口。其中和用户连接的被成为 “User-network interface (UNI)”，节点与节点间连接的被成为 “network node interface (NNI)”。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240508165429927.png" alt="image-20240508165429927" style="zoom:50%;" /></p><h2 id="ATM信元"><a href="#ATM信元" class="headerlink" title="ATM信元"></a>ATM信元</h2><h3 id="逻辑连接"><a href="#逻辑连接" class="headerlink" title="逻辑连接"></a>逻辑连接</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240508165827127.png" alt="image-20240508165827127" style="zoom: 67%;" /></p><p>说ATM是虚电路的代表，是因为在不同的节点间，共享了物理通路，但是又分割出了不同的逻辑通路和逻辑信道。上图是ATM中信元结构图，可以看到在header中有一个Vitural Path Indentifier (VPI) 和 Virtual Channel Identifier (VCI)，这就是逻辑连接的标识头。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240508165802628.png" alt="image-20240508165802628" style="zoom: 50%;" /></p><p>上图中，physical transmission path 含有多个Vitual Path，使用VPI标识，VP内又有多个Virtual Channel，使用VCI标识。</p><p>由于所有通向这个大区域的数据都具有同样的VPI，在进行大粒度交换时只需要看VPI即可。</p><p>如果一个交换机同时根据Cell的VPI和VCI进行交换，那么它可以完成更小粒度的交换。</p><p>这是ATM提供不同交换粒度的原理。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/1715159981965.jpg" alt="1715159981965" style="zoom:80%;" /></p><p>在网络中的每个节点内，都存有一张表。表内存有一组输入的VPI&amp;VCI，一组输出的VPI&amp;VCI，这二者标识了一个唯一的设备。交换机根据VCI和VPI进行交换。</p><h3 id="信元流控差异"><a href="#信元流控差异" class="headerlink" title="信元流控差异"></a>信元流控差异</h3><p>UNI和NNI间使用不同的信元格式。UNI Header内有一段流控的头(GFC)，位于octet1 的5:8 bit，而NNI没有。其余部分没有差异，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240508165827127.png" alt="image-20240508165827127" style="zoom: 67%;" /></p><p>在ATM中，流量控制只由终端控制，中间节点不控制。</p><p>形象点说就是，堵车有两种解决方式：</p><ol><li>每个路口都站个警察或者用红绿灯管控；</li><li><p>根据路上的流量实行限行政策，让部分用户不能开车。</p><p>ATM就是使用的这里面的第二个。</p></li></ol><p>前面ATM的特点中说：ATM有流控，但不多。就是因为它只在终端做流控，有一定几率出现某几个线路上车过多的情况。</p><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><p>通信系统常用差错控制方法有三种：</p><ul><li>自动重发请求法（ARQ）:接收端译码器判决收到的码序列有没有错误，通过反馈信道把判决结果告诉发送端。发送端根据判决信号重发接收端认为有错的信息，直到接收端认为正确为止。需双向信道。这个技术前面有所讲解。</li><li>前向纠错法（FEC）:接收端不仅能发现错误而且能自动纠正接收码字传输中的错误。比如Turbo码和卷积码。实时性较好，但编译码设备随着纠错能力强而变得复杂，往往以最坏的信道条件来设计纠错码，编码效率降低。</li><li>信头差错校验法（HEC）:接收端能检测错误，而且有纠错能力。纠错能力内，自行纠错，若错误很多，超出了码纠错能力，则反馈给发送端让其重新传送有错的信息。克服上两者的缺点。</li></ul><p>这里ATM使用的就是HEC。</p><div class="note info flat"><p>后续PPT内容不作要求</p></div>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC5-局域网</title>
      <link href="/posts/6b68dff2.html"/>
      <url>/posts/6b68dff2.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>本章节以局域网的视角，将物理层、数据链路层、网络层三层进行链接。前面课程虽没有涉及物理层内容，但其他课程（例如通信原理）已经打下了基础。</p><h2 id="几种路由方式"><a href="#几种路由方式" class="headerlink" title="几种路由方式"></a>几种路由方式</h2><p>寻找路由，有几种不同的方式：</p><ul><li>集中式：有一个节点对网络所有节点和拓补状态都非常了解，中心路由找出的路径是最优的。但是集中控制代价极高，而且有同步周期问题（需要不断从整个网络收集信息，需要收集耗费的时间尽可能短）</li><li>分布式：交换由每个节点完成，路由更复杂，但是鲁棒性更高</li></ul><p>对于面向连接和面向无连接，决定路由的时机也不一样。</p><ul><li>面向连接需要在通信之前就确定路由，并固定线路。</li><li>而面向无连接只有到达特定的节点后，下一条路的路由才会出现。</li></ul><h2 id="现有的4种路由模式"><a href="#现有的4种路由模式" class="headerlink" title="现有的4种路由模式"></a>现有的4种路由模式</h2><ul><li><p>Fixed：在该模式下，某一进来的包固定得被转发至一个固定的出口</p></li><li><p>Flooding</p></li><li><p>Random</p></li><li><p>Adaptive Routine：这是目前分组交换网络中大量采样的路由方式。这种路由属于需要各节点的信息，根据当前的信息进行自适应路由，但在集群规模的扩大时，收集信息会导致网络时延增加、部署成本提高，无法满足算力需求和部署要求。</p></li></ul><h1 id="物理层的视角切入局域网（基于以太网）"><a href="#物理层的视角切入局域网（基于以太网）" class="headerlink" title="物理层的视角切入局域网（基于以太网）"></a>物理层的视角切入局域网（基于以太网）</h1><h2 id="ALOHA"><a href="#ALOHA" class="headerlink" title="ALOHA"></a>ALOHA</h2><h3 id="纯ALOHA"><a href="#纯ALOHA" class="headerlink" title="纯ALOHA"></a>纯ALOHA</h3><ol><li>当传输点有数据需要传送的时候，它会立即向通讯频道传送，这也就是“想说就说”。</li><li>接收站通过检查帧校验序列字段来确定传入帧的正确性</li></ol><ul><li>如果正确，会给传输站点发送ACK。传输站点等待ACK的时间是2倍物理传输时长+一个小小的增量</li><li>如果接收的数据有错误，接收点会向传输点发NACK。</li><li>如果网络上的两个传输点同时向频道传输数据的时候，<strong>会发生碰撞</strong>（因此说ALOHA是一个竞争协议），这种情况下，两个站点会各自等待一段随机长度的时间后，再次尝试发送。</li></ul><p>但是，如果站到站的传播时间比帧传输时间长，那么，在一个站发射一个帧之后，需要很长时间其他站才知道它。在此期间，其他站可能会开始传输帧，这会导致所有帧损毁。</p><p>纯ALOHA非常简单，但这样也带来了缺点：随着负载的增加，碰撞次数迅速增加，通道的最大利用率仅为18%左右。</p><h3 id="slotted-ALOHA（分段ALOHA）"><a href="#slotted-ALOHA（分段ALOHA）" class="headerlink" title="slotted ALOHA（分段ALOHA）"></a>slotted ALOHA（分段ALOHA）</h3><p>为了ALOHA的利用率，将信道在时间上进行<strong>分为不同的子时段</strong>，每个传输点只能在一个<strong>子时段</strong>的<strong>开始处</strong>进行传送。每次传送的数据<strong>必须少于或者等于一个子间段</strong>。这样大大的减少了传输频道的冲突。</p><p>但是也提出了链路上时钟同步的要求。</p><p><strong>slotted ALOHA将系统的最大利用率提高到约 37%</strong></p><h2 id="CSMA"><a href="#CSMA" class="headerlink" title="CSMA"></a>CSMA</h2><p>就算是slotted ALOHA，利用率也还是太低了。无论是纯ALOHA还是slotted ALOHA，都缺少对信道当前状态的侦测，如果能不要“畅所欲言”，而是如果发现别人在说话，等别人说完了再发言，那么碰撞概率会进一步减小。</p><p>因此我们引入CSMA</p><p>CSMA：carrier sense multiple access，载波侦听多路访问（注意是multiple access，不是multiplex）</p><ul><li><strong>载波侦听</strong>（Carrier Sense）： 指任何连接到介质的设备在欲发送帧前，必须对介质进行侦听，当确认其空闲时，才可以发送。 </li></ul><h3 id="nonpersistent-CSMA"><a href="#nonpersistent-CSMA" class="headerlink" title="nonpersistent CSMA"></a>nonpersistent CSMA</h3><p>在该模式下：</p><ol><li>发信设备侦听信道是否空闲</li></ol><ul><li>如果空闲：则立即开始发信</li><li>如果不空闲：则随机或固定地等一段时间后再检查是否空闲</li></ul><p>nonpersistent CSMA有一个缺陷：无法确定在信道传输的信息处于什么状态，可能处于比特流的头两个字，这时候延时可能等少了。如果处于比特流最后两个字，这时候可能等多了，造成时间的浪费</p><p>因此，引入 1-persistent protocol：</p><h3 id="1-persistent-CSMA"><a href="#1-persistent-CSMA" class="headerlink" title="1-persistent CSMA"></a>1-persistent CSMA</h3><ol><li>发信设备检查信道是否空闲</li></ol><ul><li>如果空闲：立即发信</li><li>如果忙：则持续侦听，一旦忙结束，立即发信</li></ul><p>但是这样又产生了一个问题：如果信道资源很紧缺，一个忙当中，有多个发信站都在等待忙结束，在忙结束之后又立即发信，在空闲瞬间的“蜂拥而至”会导致帧碰撞。</p><p>因此，引入 is p-persistent：</p><h3 id="p-persistent-CSMA"><a href="#p-persistent-CSMA" class="headerlink" title="p-persistent CSMA"></a>p-persistent CSMA</h3><ol><li>如果信道空闲，则有概率p的可能发送，（1-p）的概率再等一个等待周期</li><li>如果信道忙，则持续侦听，等到空闲时执行 1 当中的概率发送</li></ol><p>这个方法减少了“蜂拥而至”造成的碰撞的概率。</p><h3 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a>CSMA/CD</h3><p>在前面的CSMA机制中，纵然比AHLOHA效率更高，但是对碰撞的处理并不完善：如果两帧发生碰撞，在碰撞发生后发送端仍然会发送完该帧才截止，这加剧了碰撞占用信道的时间。</p><p>而CSMA/CD中的CD就是“Collision Detection”，碰撞检测。在CSMA/CD模式下，网络适配器会“边发送边侦听”。在CSMA/CD机制下：</p><ul><li>如果信道空闲，则直接发信</li><li>如果信道忙，则遵循CSMA的规则，侦听信道直到其不忙</li><li>如果在传输过程中任意站点检测到冲突，则发送一个人为的干扰信号（jamming signal），让所有站点都知道发生了冲突，然后停止传输。</li><li>（问题：碰撞时的jamming signal是怎么传过去的)（解答：bnh也不知道，那就是不考罢，哎……）</li><li>发送干扰信号后，等待一段随机时间（称为退避，backoff），然后尝试再次发送（回到第一步）。</li></ul><p>CSMA/CD的一个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240515165805420.png" alt="image-20240515165805420" style="zoom:50%;" /></p><p>补一下：看一下中文书的这一段</p><h1 id="数据链路层的视角——拓补和交换"><a href="#数据链路层的视角——拓补和交换" class="headerlink" title="数据链路层的视角——拓补和交换"></a>数据链路层的视角——拓补和交换</h1><div class="note danger flat"><p>五星级中的五星级</p></div><h2 id="基本拓补形式"><a href="#基本拓补形式" class="headerlink" title="基本拓补形式"></a>基本拓补形式</h2><h3 id="Star拓补"><a href="#Star拓补" class="headerlink" title="Star拓补"></a>Star拓补</h3><p>Star拓补中这个中心节点有三种：Hub， switch，repeater。这三种设备工作在不同的层。工作的效果也不一样。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240515175041205.png" alt="image-20240515175041205" style="zoom:33%;" /></p><p><strong>HUB（集线器）:物理层设备</strong></p><p>HUB集线器属于纯硬件网络底层设备，基本上不具有类似于交换机的“智能记忆”能力和“学习”能力。它也不具备交换机所具有的MAC地址表，所以它发送数据时都是没有针对性的，而是采用<strong>广播方式</strong>发送。也就是说当它要向某节点发送数据时，不是直接把数据发送到目的节点，而是把数据包发送到与集线器相连的所有节点。<strong>因此，HUB下依旧需要使用CSMA/CD协议。</strong></p><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>Brige是一个</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h2 id="拓补"><a href="#拓补" class="headerlink" title="拓补"></a>拓补</h2><p>（spanning Tree）</p><h2 id="MAC帧的结构（要求掌握！五星级）"><a href="#MAC帧的结构（要求掌握！五星级）" class="headerlink" title="MAC帧的结构（要求掌握！五星级）"></a>MAC帧的结构（要求掌握！五星级）</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240522165158941.png" alt="image-20240522165158941"></p><p>MAC地址用于唯一标明终端。理论上来说它不可改变，但是现在有技术可以在发送时使用虚拟的MAC地址。携带MAC地址的DPU如上图所示</p><h3 id="Address-Learning"><a href="#Address-Learning" class="headerlink" title="Address Learning"></a>Address Learning</h3><p>在MAC地址下，当机器携带MAC地址开始发送信息时，交换设备就会知道：“这个MAC地址的机器在我的某个端口上”。就会将它加入自己的路由数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240522171933209.png" alt="image-20240522171933209"></p><p>但是这个有一个问题，假设B是新加入的。$\alpha$和$\beta$都没有对B的位置进行注册。此时，A朝B发送一个帧，首先$\alpha$和$\beta$都会收到并认为A在下方，假设$\alpha$先转发，$\alpha$转发的帧会被B同时被B和$\beta$收到，$\beta$就会认为A在B侧；同理，后续$\beta$转发的也会被A，此时$\alpha$会记录A在B侧。这样就出问题了，假设B要发生一个返回给A，那么此时无论是$\alpha$还是$\beta$都认为AB在同侧，都不进行转发。</p><p>在设计Spanning Tree 算法时，需要避免这样的逻辑环路。</p><h1 id="点对点协议（PPP）"><a href="#点对点协议（PPP）" class="headerlink" title="点对点协议（PPP）"></a>点对点协议（PPP）</h1><p>PPP：Point-to-point Protocol</p><h1 id="连接数据链路层与网络层的协议——Address-Resolution-Protocol-ARP"><a href="#连接数据链路层与网络层的协议——Address-Resolution-Protocol-ARP" class="headerlink" title="连接数据链路层与网络层的协议——Address Resolution Protocol (ARP)"></a>连接数据链路层与网络层的协议——Address Resolution Protocol (ARP)</h1><p>(ARP高速缓存是什么东西，要求理解)</p><p>（ARP的四个步骤 要求掌握）</p><p>这是用来处理MAC地址和IP地址关系的协议。由于IP协议使用了ARP协议，因此常常将ARP协议划归网络层。有些地方也将其划归数据链路层，因为ARP消息直接<strong>封装MAC帧内，而非IP包</strong>。ARP本质是跨接地三层和第二层的协议。</p><p>在局域网中，交换机和其对应的MAC地址工作在数据链路层（第二层），而IP工作在网络层（第三层）。</p><p>在一个网络中：(这个流程要求记住)</p><ul><li>在局域网内，Router存储有一个路由表，将各个设备的IP地址与MAC地址相映射。如果要转发的IP包的MAC地址已经在表中，则直接将其发送到对应端口上。</li><li>如果需要传输给一个已知IP地址，未知MAC地址的设备。那么路由将暂存这一帧数据，直接使用ARP在LAN上进行广播“我的IP是：xxx，硬件地址是：xxx，我想知道IP地址xxx的MAC地址”，寻找到对应IP地址的设备，让它回应自己的MAC。拿到MAC后再封包发送。</li><li>当局域网内的设备发现ARP请求的IP和自己的IP地址匹配时，则应答，应答消息包含自己的IP地址和MAC地址，单播发送给请求站点。</li><li>ARP 消息还可以简单地用于广播主机的 IP 地址和子网地址，以便让LAN上的其他设备可以获取。</li></ul><p>现在介绍的ARP和IP，都是在同一个局域网上的。那如果你身在重庆，但是要和北京的一个设备通信，那这时候又如何解决呢？ARP协议仅能在一个广播域内进行查询，而这个广播域是通过IP地址划分的（同一网段IP）。</p><ul><li>路由器在收到数据时会将目标IP与局域网IP检查一下，如果发现不为同一网段，则会请求网关IP地址的MAC</li><li>然后将这一帧数据朝网关发送，辅助网络完成下一跳。</li></ul><div class="note info flat"><p>课堂问题:</p><ol><li>交换机每个端口需要配备自己的MAC地址吗？</li></ol><p>​    不需要。因为交换机工作在第二层，只看你请求的MAC是否再它已知的端口上，如果是，则朝特定端口发送；如果不是，则朝口上广播或朝特定端口发送。</p><ol><li>路由器的每个端口需要自己的MAC地址吗？</li></ol><p>​    需要。因为路由器工作在第三层，每个端口连接不同的局域网。正如上面ARP所说，需要朝路由器的某个端口发送ARP请求，将包发给这个端口，再由这个端口根据路由协议转发至另外的路由端口。</p></div><div class="note info flat"><p>如果大家折腾一下软路由OpenWRT系统就会发现，那里面有一张路由表。这就是由ARP协议请求出来的。表上记录了每个设备的MAC、IP、端口。此时会发现，这个路由器竟然只有两个端口！</p><p>其实这是由于家用路由器的路由端口只有2个导致的，平时路由器会看到一个WAN口加数个LAN口，这些LAN口之间都工作在第二层，公用一个MAC和IP；WAN口有一个MAC和IP。我们访问路由器的后台其实就是在访问路由器LAN口的IP地址。</p></div>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-CH5-金属传输线理论</title>
      <link href="/posts/3f7b092c.html"/>
      <url>/posts/3f7b092c.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><div class="note danger flat"><p>这一章的传输理论知识和实例分析都非常重要。</p></div><ul><li><p>一条传输线中，波的参考的起始点称为“The driving point”，该point非传输线的头尾两端。因为在研究传输线时，研究的不是它的头尾，而是中间这一部分的特质。头尾需要单独讨论。</p></li><li><p>我们认为传输，是在远距离尺度上的。因此需要主要关注传输线上的时间差等。同时，由于干扰，传输线频率选择性衰减等因素，发射出去的放波会失真，在时域展宽等。</p></li><li><p>只有在长线分布下，才认为线内的电容，电阻等是均匀分布的。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240604102154339.png" alt="image-20240604102154339" style="zoom:67%;" /></p><p>常见的金属传输线有上图4种，其中，平行双导线的英文是 twin-wire。本章节主要研究平行双导线，其他的简略。平行双导线随着传输的工作频率增高，其辐射损耗会急剧增加，故这种传输线只适合于1000米波至大于10米波的低频段。</p><h1 id="金属传输线（主要以双线为例）"><a href="#金属传输线（主要以双线为例）" class="headerlink" title="金属传输线（主要以双线为例）"></a>金属传输线（主要以双线为例）</h1><p>双线（twin-wire），是指的由两条传输线线构成一个完整的传输系统，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240604100252546.png" alt="image-20240604100252546" style="zoom:80%;" /></p><p>最典型的双线就是双绞线。双绞线也是金属线传播的一种典例，大部分金属线与双绞线分析方式类似。</p><p>在本课ch3中简略介绍过双绞线，在分析双绞线时，我们以微积分的概念将其切分，认为它们是平行的。在前面是对双绞线的感性认知，这一部分会更深入地学习。</p><div class="note info flat"><p>bnh科普小课堂：虽然看起来现在无线通信，光通信使用远比金属传输线广，但是AI军火商NVIDA认为，在极短距离传输下（芯片内部），金属传输先比现有的光通信更有优势。因此金属传输先仍有很大研究价值</p></div><p>1234123</p><div class="note info flat"><p>bnh科普小课堂：在金属线中让电磁波泄漏：回想一些LRC震荡电路，在理想情况下，这种电路会在线路内无限震荡。但如果在线上开一个口子，那么电磁波便会辐射出去。无线通信使用天线来开这个口子，以增强对泄露出去的电磁波的控制能力。</p></div><h2 id="长线的定义："><a href="#长线的定义：" class="headerlink" title="长线的定义："></a>长线的定义：</h2><p>当传输线的长度L比其上所传输的电磁波的最小波长$\lambda_{min}$还长，即$L\geq\frac{\lambda_{min}}{100} $时，传输线称为长线，反之则称为短线。（在英文书上这里是$L&gt;&gt;\frac{\lambda_{min}}{100}$,bnh原话：以中文书为准更好，大于等于刚好有个界限）</p><p>下图为长线模型：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240418164433479.png" alt="image-20240418164433479"></p><p>长线的电气特性它的可以用每单位长度串联电阻，串联电感，并联电容，并联电导来描述。一个理想的长线传输线，在线路上的任意一点切入，其电气特性都一样。</p><h2 id="传输线的基本特性参数"><a href="#传输线的基本特性参数" class="headerlink" title="传输线的基本特性参数"></a>传输线的基本特性参数</h2><div class="note danger flat"><p>本小节中的五星级指标: $\gamma$ 和 $Z_0$</p></div><h3 id="理想模型"><a href="#理想模型" class="headerlink" title="理想模型"></a>理想模型</h3><p>如果认为是纯纯的理想长线，没有电阻，电感，电容等，那么行波在长线中的传输可以用如下公式描述：</p><script type="math/tex; mode=display">v=Vsin\omega t</script><ul><li>V：信号振幅</li><li>$\omega$：信号频率</li></ul><h3 id="相移常数-beta-（phase-change-coefficient）"><a href="#相移常数-beta-（phase-change-coefficient）" class="headerlink" title="相移常数$\beta$ （phase change coefficient）"></a>相移常数$\beta$ （phase change coefficient）</h3><p>如果将电磁波传播速度引入传输线中，电磁波传输造成的延迟，会造成信号的相位变化。因此，引入<strong>相移常数$\beta$</strong>对此进行建模。</p><script type="math/tex; mode=display">v=Vsin(\omega t-\beta x)</script><ul><li>$\beta$：相移常数（单位：rad/m）</li><li>$x$​：距离参数（单位：m）</li></ul><p>其中$\beta$定义为：</p><script type="math/tex; mode=display">\beta=\frac{2\pi}{\lambda}</script><ul><li>$\lambda$：波长（单位：m）</li></ul><p>物理意义的理解：一个周期的相位变化是$2\pi$，而波长又是波一个周期的长度。因此$2\pi/\lambda$是单位长度上相位变化的程度。</p><p>此时，传输线模型如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240418171045657.png" alt="image-20240418171045657"></p><h3 id="相速度-v-p-（phase-velocity）"><a href="#相速度-v-p-（phase-velocity）" class="headerlink" title="相速度$v_p$ （phase velocity）"></a>相速度$v_p$ （phase velocity）</h3><p>对金属线中的行波进行连续“拍照”，会发现它的波峰随着时间在向前移动。这样的波的相位在空间中传递的速度，我们称之为<strong>相速度$v_p$</strong>。对比一下前面的相移常数，相移常数指的是在固定时刻，随着单位距离移动波的相位变化量。而相速度是指的某一点个相位点，随着单位时间变化相位的变化量。下图中红色点就是相速度。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/Wave_group.gif" alt="Wave_group"></p><p>考虑下图，在$P_1$和$P_2$点相位相同，距离为$Z_1-Z_2$</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240604104220293.png" alt="image-20240604104220293" style="zoom: 67%;" /></p><p>按照相速度的定义来说：</p><script type="math/tex; mode=display">v_p=\frac{同相位点移动的距离}{时间差}=\frac{Z_2-Z_1}{t_2-t_1}</script><p>回顾前面的建模式子：$v=Vsin(\omega t-\beta x)$,某一时刻的相位是由sin括号内的部分来表达的。对于$P_1$点，其相位为$\omega t_1 -\beta Z_1$；同理$P_2$点为$\omega t_2 -\beta Z_2$；</p><p>由于$P_1$和$P_2$相位相同，有：$\omega t_1 -\beta Z_1=\omega t_2 -\beta Z_2$，移项改写一下：</p><script type="math/tex; mode=display">\omega (t_2-t_1)=\beta(Z_2-Z_1)</script><p>因此</p><script type="math/tex; mode=display">v_p=\frac{Z_2-Z_1}{t_2-t_1}=\frac{\omega}{\beta}</script><p>因为$\omega =\frac{2\pi}{T}=2\pi f,\beta=\frac{2\pi}{\lambda}$因此$v_p$还可以写成:</p><script type="math/tex; mode=display">v_p=\frac{\omega}{\beta}=f\lambda</script><h3 id="衰减常数-alpha"><a href="#衰减常数-alpha" class="headerlink" title="衰减常数$\alpha$"></a>衰减常数$\alpha$</h3><p>随着距离延长，传输线中衰减是不可不免的。而这种衰减与距离高度相关。因此我们再加上<strong>衰减常数$\alpha$(单位：奈培/米)</strong></p><div class="note danger flat"><p>这个式子需要记住，五星级</p></div><script type="math/tex; mode=display">v=Ve^{-\alpha x}sin(\omega t-\beta x)</script><p>对于在一条线上相隔单位距离的两个电压幅度的比率，𝑉1和𝑉2有：</p><script type="math/tex; mode=display">V_1/V_2=e^{\alpha}</script><p>这就是信号振幅每单位的衰减程度，<strong>衰减系数以 奈培/单位距离 为单位</strong>。假设$\alpha=1\ neper/m$，在么每米振幅衰减的比率就是</p><script type="math/tex; mode=display">V_1/V_2=e</script><p>如果将其转化为dB的形式，也就是每米衰减8.686dB</p><script type="math/tex; mode=display">20log_{10}(V_1/V_2)=20log_{10}(e)=8.686dB</script><h3 id="特征阻抗-Z-0-（characteristic-impedance）和集肤效应（skin-effect）"><a href="#特征阻抗-Z-0-（characteristic-impedance）和集肤效应（skin-effect）" class="headerlink" title="特征阻抗$Z_0$（characteristic impedance）和集肤效应（skin effect）"></a>特征阻抗$Z_0$（characteristic impedance）和集肤效应（skin effect）</h3><p>特征阻抗（Characteristic impedance）是指在传输线（例如电缆、微带线、同轴电缆等）中传播电磁信号时，该传输线上单位长度内的阻抗。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240418164433479.png" alt="image-20240418164433479"></p><p>在这样的一节传输线中，特征阻抗的计算公式是：</p><script type="math/tex; mode=display">Z_0=\sqrt{\frac{R+j\omega L}{G+j\omega C}}\ (五星级公式)</script><p>如果是理想传输线，无电阻电导，即R，G=0， $Z_0$此时可写为</p><script type="math/tex; mode=display">Z_0=\sqrt{\frac{L}{C}}</script><p>如果满足特殊条件：$\frac{R}{L}=\frac{G}{C}$，上述式子也成立：</p><script type="math/tex; mode=display">Z_0=\sqrt{\frac{L(R/L+j\omega)}{C(G/C+j\omega)}}=\sqrt{\frac{L}{C}}</script><p>在这个式子中，L和C是独立的，与频率无关。但是R和G会收到频率的影响，这是由于集肤效应（又称趋肤效应）引起的。</p><p><strong>Skin Effect（集肤效应）</strong></p><p>当导体中有交流电或者交变电磁场时，导体内部的电流分布不均匀，电流集中在导体的“皮肤”部分。也就是说电流集中在导体外表的薄层，越靠近导体表面，电流密度越大，导体内部实际上电流较小，这减少了导体的有效面积，也就增大了电阻。这种现象随着频率的增大愈发明显，这一现象称为趋肤效应(skin effect)。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240422194126224.png" alt="image-20240422194126224" style="zoom:50%;" /></p><p>这是平行双导线不适合高频信号的原因之一。</p><h3 id="传输常数-gamma"><a href="#传输常数-gamma" class="headerlink" title="传输常数$\gamma$"></a>传输常数$\gamma$</h3><p>按照前面建立的模型，$v=Ve^{-\alpha x}sin(\omega t-\beta x)$，如果使用一个向量来表示$Vsin(\omega t-\beta x)$中随着距离衰减的部分（即，只和$\beta$相关的部分），那么有：假设向量是$a+jb$</p><p>向量的实数就是当前$\beta$造成的电压衰减值，因为在电磁波表示中sin和cos是比较通用的，因为从物理意义上来说，$\beta$在$x=0$处造成相位移动为0，因此用cos来表达。</p><script type="math/tex; mode=display">a=Vcos(-\beta x)</script><p>虚部是波存储起来的电压部分，满足$实数^2 + 虚数^2$=1，因此有</p><script type="math/tex; mode=display">b=Vsin(-\beta x)</script><p>将$a+jb$用欧拉公式表示，有：</p><script type="math/tex; mode=display">a+jb=e^{-j\beta x}</script><p>如果把这个信号自己的电压状态（也就是前面和角频率有关的振幅）记为向量$V_0$，那么传输线上某一点的电压可以表示为</p><script type="math/tex; mode=display">V_x=V_0e^{\alpha x}e^{-j\beta x}=V_0 e^{-(\alpha+j\beta)x}</script><p><strong>其中，这个$\alpha+j\beta$就被称为传输常数，记作$\gamma$</strong>，原式可以写成：</p><script type="math/tex; mode=display">\gamma=\alpha+j\beta</script><script type="math/tex; mode=display">V_x=V_0e^{-\gamma x}</script><h3 id="群速度"><a href="#群速度" class="headerlink" title="群速度"></a>群速度</h3><p>相速度是某一个相位点向前移动速度。如果说所有频率的波在同一媒介中传播的相速度都相同，那这没有问题；然而，事实情况是不同频率的波在介质中传播的相速度不同（从相速度的式子就可以看出它和频率有关），因此需要一个物理量来描述其包络的行进速度，也就是群速度。<strong>群速度$v_g$是所有的波组合起来的包络的向前移动的速度</strong>。在下图中，绿色的点就是群速度。群速度常被认为是能量或信息顺着波动传播的速度。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/Wave_group.gif" alt="Wave_group"></p><div class="note info flat"><p>因不同频率的电磁波在介质中具有不同的相速度而造成电磁信号失真的现象就被称为电磁波色散。</p></div><p>试想一下，有两个正弦波，其各项参数分别为</p><div class="table-container"><table><thead><tr><th style="text-align:center">波1</th><th style="text-align:center">波2</th></tr></thead><tbody><tr><td style="text-align:center">$\omega$</td><td style="text-align:center">$\omega +d\omega$</td></tr><tr><td style="text-align:center">$v_p$</td><td style="text-align:center">$v_p+dv_p$</td></tr><tr><td style="text-align:center">$\lambda$</td><td style="text-align:center">$\lambda+d\lambda$</td></tr><tr><td style="text-align:center">$\beta$</td><td style="text-align:center">$\beta+d\beta$</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240604121723352.png" alt="image-20240604121723352" style="zoom: 67%;" /></p><p>试想一下，现在你站在P1点随着波1移动，波2的尖峰刚好和你重合，你们形成了包络中鼓起来的最高点。同时，在P1的视角下，波2在以$dv_p$的速度向前移动。经过一段时间之后，P1处的尖峰分开，而P2前面的波2尖峰追上了P2，此时P2处形成包络最高点。此时，看起来就像是包络从P1运动到了P2。而经过的这一段时间是：</p><script type="math/tex; mode=display">t=\frac{d\lambda}{dv_p}</script><p>同时，包络的尖峰从P1移动到了P2，刚好移动了波1的波长长度$\lambda$。用包络尖峰移动的距离/移动消耗的时间，就可以得到在P1处观测时，看起来的包络的移动速度。</p><script type="math/tex; mode=display">-\lambda\div\frac{d\lambda}{dv_p}=-\lambda\frac{dv_p}{d\lambda}</script><p>因为在P1处观测的包络的速度+P1向前移动的速度，即可得到群速度</p><script type="math/tex; mode=display">v_g=v_p-\lambda\frac{dv_p}{d\lambda}</script><p>此时便写出了$v_g与v_p$的表达式，但是通常来说，希望回归到波本身，即波的角频率，相移常数等。</p><p>分别代入波1和波2的参数：$\lambda = \frac{2\pi}{\beta}, \lambda+d\lambda=\frac{2\pi}{\beta+d\beta}$，相减可以得到</p><script type="math/tex; mode=display">d\lambda= \frac{2\pi d\beta}{\beta(\beta+d\beta)}</script><p>因为$v_p=\frac{\omega}\beta{}, v_p+dv_p=\frac{\omega+d\omega}{\beta+d\beta}$，相减可以得到</p><script type="math/tex; mode=display">dv_p=\frac{\beta d\omega-\omega d\beta}{\beta(beta+d\beta)}</script><p>此时代入$v_g=v_p-\lambda\frac{dv_p}{d\lambda}$:</p><script type="math/tex; mode=display">v_g=\frac{\omega}{\beta}-\frac{2\pi}{\beta}\cdot\frac{1}{2\pi}\bigg(\omega -\beta \frac{d\omega}{d\beta}\bigg)</script><script type="math/tex; mode=display">v_g=\frac{d\omega}{d\beta}</script><p><strong>因此，最终得到群速度$v_g=\frac{d\omega}{d\beta}$</strong></p><p>如果一个脉冲要在不改变其形状的情况下传播，那么与其频谱的不同部分相关的群速度必须相同；换言之，dω/dβ必须与频率无关。如果不是这样，那么脉冲在行进时会改变其形状，通常会在接收器处产生一个随时间分散的波形：<strong>这种效应称为色散</strong>。</p><p>对于发射的无限窄脉冲（即，频域所有频率分量都有的信号），色散量通常表示为接收脉冲在半功率点之间的时间分布。如果绘制β与ω的图（如下图），则该曲线的斜率为dβ/dω，即群速度的倒数。这被称为群延迟（group delay）。如果曲线是一条穿过原点的直线，则相速度和群速度在所有点处都相同且相等。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240604133438599.png" alt="image-20240604133438599" style="zoom:67%;" /></p><h3 id="探究本质：-Z-0-gamma-beta-和-alpha-与传输线特性关联"><a href="#探究本质：-Z-0-gamma-beta-和-alpha-与传输线特性关联" class="headerlink" title="探究本质：$Z_0,\gamma, \beta $ 和 $\alpha$ 与传输线特性关联"></a>探究本质：$Z_0,\gamma, \beta $ 和 $\alpha$ 与传输线特性关联</h3><p>前面提到电压向量用传输常数表达是$V_x=V_0e^{-\gamma x}$，类似地，电流衰减向量也可以表示为$I_x=I_0e^{-\gamma x}$</p><p>考虑下图单位长度的传输线，因为基尔霍夫电压定理，环路电压为0。因此有：</p><script type="math/tex; mode=display">\delta V=-R\delta xI_x-j\omega L\delta x I_x</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615111806263.png" alt="image-20240615111806263" style="zoom:67%;" /></p><p>改写一下：</p><script type="math/tex; mode=display">\frac{dV}{dx}=-(R+j\omega L)I_x</script><p>如果忽略上图左侧RL带来的微小压降，则两线间的电流可以表示为$\delta I=-G\delta xV_x -j\omega C\delta xV_x$</p><script type="math/tex; mode=display">\frac{dI}{dx}=-(G+j\omega C)V_x</script><p>如果把$V_x=V_0e^{-\gamma x}$拿来微分一下，有：</p><script type="math/tex; mode=display">\frac{dV_x }{dx}=-\gamma V_0e^{-\gamma x}=-\gamma V_x</script><p>前面$\frac{dV}{dx}=-(R+j\omega L)I_x$的物理意义上单位$x$上电压的变化率，$\frac{dV_x }{dx}$物理意义也是这个，因此，他们两个式子相等，有</p><script type="math/tex; mode=display">\gamma V_x=(R+j\omega L)I_x</script><p>同理，由电压变化率的表达式，可以得到</p><script type="math/tex; mode=display">\gamma I_x=(G+j\omega C)V_x</script><p>上面两式左右分别相除，可以得到</p><script type="math/tex; mode=display">\frac{V_x}{I_x}=\frac{R+j\omega L}{G+j\omega C}\cdot\frac{I_x}{V_x}</script><script type="math/tex; mode=display">\bigg(\frac{V_x}{I_x}\bigg)^2=\frac{R+j\omega L}{G+j\omega C}</script><p><strong>信号的特征阻抗$Z_0$是电压/电流，因此：</strong></p><div class="note danger flat"><p>$Z_0$下面两个五星级公式！</p></div><script type="math/tex; mode=display">Z_0=\frac{V_x}{I_x}=\sqrt{\frac{R+j\omega L}{G+j\omega C}}</script><p>如果对于理想的没有电阻$R$和电导$G$的导线，或者是$\frac{R}{L}=\frac{G}{C}$的导线，有：</p><script type="math/tex; mode=display">Z_0=\sqrt{\frac{L}{C}}</script><div class="note info flat"><p>$\frac{R}{L}=\frac{G}{C}$被称为无失真条件，但实际永远不会接近它，即 G/C 比 R/L 小得多。过去，一些传输长距离信号的线路加电感器，以使R/L比更接近G/C，但这种做法现在已经过时了。</p></div><p><strong>传输常数$\gamma$也可以与传输线特征关联：</strong></p><p>前面得到的$\gamma V_x=(R+j\omega L)I_x$和$\gamma I_x=(G+j\omega C)V_x$两侧各有一个$I_x$和$V_x$，那么，将这两个式子相乘就可以约掉它们，只保留$\gamma$</p><script type="math/tex; mode=display">\gamma^2V_xI_x=(R+j\omega L)(G+j\omega)I_xV_x</script><div class="note danger flat"><p>下面这个$\gamma$五星级公式！</p></div><script type="math/tex; mode=display">\gamma=\sqrt{(R+j\omega L)(G+j\omega C)}</script><p><strong>1、在理想传输线的前提下，即，R=G=0时</strong></p><script type="math/tex; mode=display">\gamma=j\omega \sqrt{LC}</script><p>有了$\gamma$之后，可以进一步推得$\beta,v_p,v_g$,</p><p>在理想传输线的前提下，即，R=G=0时，$\gamma$为纯虚数，因此$\gamma$全部由$\beta$贡献</p><script type="math/tex; mode=display">\beta = \omega\sqrt{LC}</script><script type="math/tex; mode=display">v_p=\omega/\beta =\frac{1}{\sqrt{LC}}</script><script type="math/tex; mode=display">v_g=\frac{d\omega}{d\beta}=\frac{1}{\sqrt{LC}}</script><p><strong>2、在无失真条件(distortionless condition)，即$R/L=G/C$时</strong></p><script type="math/tex; mode=display">\gamma=\sqrt{LC(R/L+j\omega)(G/C+j\omega)}=(R/L+j\omega)\sqrt{LC}</script><p>因为$\gamma=\alpha+j\beta$，拆分上式虚部和实部，可以得到$\alpha$和$\beta$的式子（$\beta$和理想状态相同)：</p><script type="math/tex; mode=display">\alpha=\frac{1}{2}\bigg[R\sqrt{C/L}+G\sqrt{L/C}\bigg]</script><p>继续推导，将$\gamma$写回$\gamma^2$:</p><script type="math/tex; mode=display">\gamma^2=(\alpha+j\beta)^2=(R+j\omega L)(G+j\omega C)</script><script type="math/tex; mode=display">\alpha^2-\beta^2+j2\alpha\beta=RG-\omega^2LC+j\omega(LG+RC)</script><p>拆分虚实部，可以得到：</p><script type="math/tex; mode=display"> \alpha ^ {2}  -  \beta ^ {2}  =RG-  \omega ^ {2}  LC</script><script type="math/tex; mode=display">2  \alpha  8=  \omega  (LG+RC)</script><p>联立求解上述二式</p><script type="math/tex; mode=display">\alpha  =\{ \frac {1}{2}  [  (R^ {2}+\omega ^ {2}L^ {2})^ {1/2}  (G^ {2}+\omega ^ {2}C^ {2})^ {1/2}  +(RG-  \omega ^ {2}  LC)]\}^{1/2}</script><script type="math/tex; mode=display">\beta  =\{ \frac {1}{2}  [  (R^ {2}+\omega ^ {2}L^ {2})^ {1/2}  (G^ {2}+\omega ^ {2}C^ {2})^ {1/2}  -(RG-  \omega ^ {2}  LC)]\}^{1/2}</script><script type="math/tex; mode=display">\gamma=\alpha+j\beta=\sqrt{RG+j\omega CR+j\omega GL-\omega^2LC}</script><p>在高频情况下，RG可以忽略，提出$(-\omega^2LC)$，上式可以写为</p><script type="math/tex; mode=display">\gamma=j\omega\sqrt{LC}(1-j\frac{CR+GL}{\omega LC})^{\frac{1}{2}}</script><p>因为这是高频情况，$\omega$很大，以此可以约等于：</p><script type="math/tex; mode=display">\gamma\approx j\omega \sqrt{LC}\bigg(1-\frac{1}{2}j\frac{CR+GL}{\omega LC}\bigg)</script><p>乘进去，并拆分虚实部，最终可以得到：</p><div class="note danger flat"><p>下面$\gamma,\alpha,\beta$五星级公式！</p></div><script type="math/tex; mode=display">\gamma   \approx   \frac {1}{2}   \frac {CR+GL}{\sqrt {LC}}  +  j\omega   \sqrt {LC}</script><script type="math/tex; mode=display">\alpha  =(  \frac {R}{2}   \sqrt {\frac {C}{L}}  +  \frac {G}{2}   \sqrt {\frac {L}{C}}  )(Np/km)</script><script type="math/tex; mode=display">\beta  =j  \omega   \sqrt {LC}  (rad/km)</script><h2 id="传输线特性参数公式总结"><a href="#传输线特性参数公式总结" class="headerlink" title="传输线特性参数公式总结"></a>传输线特性参数公式总结</h2><h3 id="相移常数"><a href="#相移常数" class="headerlink" title="相移常数"></a>相移常数</h3><ul><li>定义式：$\beta=\frac{2\pi}{\lambda}$</li><li>理想传输线，R=G=0时：$\beta = \omega\sqrt{LC}$</li><li>无无失真传输线，$R/L=G/C$，且高频下：$\beta  =j  \omega   \sqrt {LC}(rad/km)$</li></ul><h3 id="传输常数"><a href="#传输常数" class="headerlink" title="传输常数"></a>传输常数</h3><ul><li>定义式：$\gamma=\alpha+j\beta$</li><li>与传输线特征关联：$\gamma=\sqrt{(R+j\omega L)(G+j\omega C)}$</li><li>理想传输线，R=G=0时：$\gamma=j\beta=j\omega\sqrt{LC}$</li><li>无失真传输线，$R/L=G/C$，且高频下：$\gamma   \approx   \frac {1}{2}   \frac {CR+GL}{\sqrt {LC}}  +<br>  j\omega   \sqrt {LC}$</li></ul><h3 id="特征阻抗-Z-0"><a href="#特征阻抗-Z-0" class="headerlink" title="特征阻抗$Z_0$"></a>特征阻抗$Z_0$</h3><ul><li>定义式：$Z_0=\frac{V_x}{I_x}=\sqrt{\frac{R+j\omega L}{G+j\omega C}}$</li><li>无失真传输线或理想传输线下：$Z_0=\sqrt{\frac{L}{C}}$</li></ul><h3 id="衰减常数"><a href="#衰减常数" class="headerlink" title="衰减常数"></a>衰减常数</h3><ul><li>定义式：间隔单位距离的$V_1$和$V_2$, $V_1/V_2=e^{\alpha}$</li><li>无失真传输线，$R/L=G/C$，且高频下：$\alpha  =(  \frac {R}{2}   \sqrt {\frac {C}{L}}  +  \frac {G}{2}   \sqrt {\frac {L}{C}}  )(Np/km)$</li><li>理想传输线，R=G=0时：无衰减，$\alpha=0$</li></ul><h3 id="相速度"><a href="#相速度" class="headerlink" title="相速度"></a>相速度</h3><ul><li>定义式：$v_p=\frac{\omega}{\beta}=f\lambda$</li><li>理想传输线下：$v_p=\omega/\beta =\frac{1}{\sqrt{LC}}$</li></ul><h3 id="群速度-1"><a href="#群速度-1" class="headerlink" title="群速度"></a>群速度</h3><ul><li>定义式：$v_g=\frac{d\omega}{d\beta}$</li><li>理想传输线下：$v_g=\frac{d\omega}{d\beta}=\frac{1}{\sqrt{LC}}$</li></ul><h2 id="传输线的反射"><a href="#传输线的反射" class="headerlink" title="传输线的反射"></a>传输线的反射</h2><div class="note info flat"><p>BNH补充小课堂：由于接收器端无法完全消耗信号的能量，因此波会发生反射。同频反射的信号会对正向传输的信号进行干扰。因此需要进行阻抗匹配，同时，在部分短距离传输系统上还需要在接收端前加衰减器。</p></div><h3 id="两个极端-接收端开路-短路"><a href="#两个极端-接收端开路-短路" class="headerlink" title="两个极端-接收端开路/短路"></a>两个极端-接收端开路/短路</h3><p>传输线在末端可以理想考虑为短路和开路两种情况，也就是负载阻抗无穷和负载阻抗为0时。</p><ul><li>负载阻抗无穷时，反射系数为1，波正相反射，并与正向传播的波叠加幅值变为2倍。</li></ul><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615215925946.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615215935674.png"></center></td>    </tr></table><ul><li>负载阻抗为0时，反射系数为-1，波反相反射，消除正向传播波的幅值</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615220253501.png" alt="image-20240615220253501"></p><ul><li>负载阻抗与传输线特征阻抗匹配时，无反射发生。此时称阻抗正确匹配(correctly terminated or matched)。</li></ul><p>如果负载端阻抗大于特性阻抗但不等于无穷，则以开路去分析，幅值会叠加，但是小于2倍。</p><p>若负载端阻抗小于特性阻抗但不为0，则带入短路去分析，幅值会相消，但是不完全消除。</p><h3 id="对反射波进行建模"><a href="#对反射波进行建模" class="headerlink" title="对反射波进行建模"></a>对反射波进行建模</h3><p>若将前进波的电压电流表示为$V_i,I_i$，反射波的电压表示为$V_r,I_r$。</p><p>那么总电压是：$V_i+V_r$, 总电流是$I_i-I_r$。参考下图，此时$R_L$上的电压就是总电压，电流就是总电流，因此：</p><script type="math/tex; mode=display">\frac{V_i+V_r}{I_i-I_r}=R_L</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615223551192.png" alt="image-20240615223551192"></p><p>其中，$V_r/V_i$被称为电压反射系数（voltage reflection coefficient），记为$\rho$。对于理想传输线，其呈纯阻性，因此电阻恒定，电流比值也为$\rho$。（这个地方如果是考虑单一频率，即，阻抗不变的情况，则无需理想传输线）</p><script type="math/tex; mode=display">\rho=\frac{V_r}{V_i}=\frac{I_r}{I_i}</script><p>如果以传输线的视角来看，传输线呈现的纯阻性为$R_0$，有：</p><script type="math/tex; mode=display">\frac{V_i}{I_i}=\frac{V_r}{I_r}=R_0</script><p>如果对$R_L$除以$V_i/I_i$,再在前面乘回去，可以推得其用$\rho$表示：</p><script type="math/tex; mode=display">R_L=\frac{V_i}{I_i}\cdot\frac{1+V_r/V_i}{1-I_r/I_i}=R_0\cdot\frac{1+\rho}{1-\rho}</script><p>换过来，便可以求得$\rho$与$R_0,R_L$的关系：</p><script type="math/tex; mode=display">\rho=\frac{R_L-R_0}{R_L+R_0}</script><p>举个例子，如果$R_L=\frac{1}{2}R_0$,则 $\rho=-1/3$，意为反射电压相位相反，振幅为$1/3V_i$</p><p>如果不是理想传输线，考虑单一频率的情况下，线阻恒定为$Z_0$，负载阻抗恒定为$Z_L$，$\rho$也可以表示为。在这种情况下，$V_i,V_r,I_i,I_r$是一个向量（或者复数），因为其表示的含义是波。</p><script type="math/tex; mode=display">\rho=\frac{Z_L-Z_0}{Z_L+Z_0}</script><h3 id="回波损耗-Return-loss"><a href="#回波损耗-Return-loss" class="headerlink" title="回波损耗(Return loss)"></a>回波损耗(Return loss)</h3><p>反射脉冲中的能量与入射脉冲中的能量之比称为回波损耗，由于同一线缆上电流恒定，因此可以直接由电压的比例的平方$\rho^2$得到</p><script type="math/tex; mode=display">Return\ loss=10log_{10}(\rho^2)=20\log_{10}(\rho)</script><h3 id="全驻波（total-standing-wave）"><a href="#全驻波（total-standing-wave）" class="headerlink" title="全驻波（total standing wave）"></a>全驻波（total standing wave）</h3><p>在下面的推导中，都以无衰减的理想传输线，衰减常数$\alpha=0$</p><p>假设传输线的长度为$x$，$Z_L=\infty$。此时电压会完全同相位反射。如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615231434907.png" alt="image-20240615231434907"></p><p>如果在起始点P的电压为V，那么经过$x$的距离，终点的电压$V’$就是：</p><script type="math/tex; mode=display">V'=Ve^{-j\beta x}</script><p>此时这个电压会被同相位完全反射，那以终点至起始点的反射波的视角来看，反射回起始点的电压是：</p><script type="math/tex; mode=display">V''=V'e^{-j\beta x}</script><p>将$V’=Ve^{-j\beta x}$改写为$V=V’e^{j\beta x}$。起始点的电压是正向传播电压和反射电压的和，因此：</p><script type="math/tex; mode=display">V_p=V+V''=V'e^{j\beta x}+V'e^{-j\beta x}=V'(e^{j\beta x}+e^{-j\beta x})</script><p>使用欧拉公式展开：</p><script type="math/tex; mode=display">V_p=2V'cos(2\beta x)</script><p>有相移常数定义式$\beta=2\pi/\lambda$，记$2V’=V_T$有：</p><script type="math/tex; mode=display">V_p=V_Tcos(2\pi x/\lambda)</script><p>不妨想一下，这个$V_p$可能并非是真正的信号发生点，而是人为规定的一个“起点”。也就相当于，这个式子可以是线路上任意一点的电压值，而$x$代表的是这一点距离终点的长度。观察发现：</p><ul><li>当线缆距离终点满足$2\pi x/\lambda=k\frac{\pi}{2}$ (k=1,3,5,7…)，即$4x/\lambda=k(odd), x=\frac{k\lambda}{4}$，时，电压为0；</li><li>当线缆距离终点满足$2\pi x/\lambda=k\frac{\pi}{2} (k=0,2,4,6…)$时，即$4x/\lambda=k(even),x=\frac{k\lambda}{4}$时，电压为$V_T$或$-V_T$；</li></ul><p>因此，在线缆上每隔$\lambda/4$的距离，形成一个波节(nodes)；每隔$\lambda/4$的距离，形成一个波峰（antinodes）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240615235559814.png" alt="image-20240615235559814"></p><h3 id="行驻波（partial-standing-wave）"><a href="#行驻波（partial-standing-wave）" class="headerlink" title="行驻波（partial standing wave）"></a>行驻波（partial standing wave）</h3><p>假设存在衰减，并非全部能量反射。那么波形可以被看成是一部分的正向行波和反射波对冲，形成全驻波，另一部分仍然是正向行波。传输线上的波形是这二者波形的叠加。在传输线上，电压最大值是行波电压和反射电压幅度的总和，最小值是它们的差值（不再为零）。此时传输线上最大电压和最小电压的比值被称为<strong>“电压驻波比voltage standing wave ratio (VSWR)”，记为S</strong></p><script type="math/tex; mode=display">V_{max}=V_i+V_r, V_{min}=V_i-V_r</script><script type="math/tex; mode=display">S=\frac{V_{max}}{V_{min}}=\frac{V_i+V_r}{V_i-V_r}</script><p>对S分子分母同除以$V_i$，再结合前面的反射系数$\rho$:（考虑$\rho$是有正负的，但是$S$一定是最大的比最小的，因此$\rho$需要加绝对值）</p><div class="note danger flat"><p>下面VSWR公式和其逆公式五星级</p></div><script type="math/tex; mode=display">S=\frac{1+\frac{V_r}{V_i}}{1-\frac{V_r}{V_i}}=\frac{1+|\rho|}{1-|\rho|}</script><p>反过来也可以由$S$得出$|\rho|$</p><script type="math/tex; mode=display">|\rho|=\frac{S-1}{S+1}</script>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-CH4-复用技术</title>
      <link href="/posts/8b0e91f6.html"/>
      <url>/posts/8b0e91f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="统计时分复用和同步时分复用"><a href="#统计时分复用和同步时分复用" class="headerlink" title="统计时分复用和同步时分复用"></a>统计时分复用和同步时分复用</h2><h3 id="同步时分复用（Synchronous-Time-Division-Multiplexing-STDM）"><a href="#同步时分复用（Synchronous-Time-Division-Multiplexing-STDM）" class="headerlink" title="同步时分复用（Synchronous Time Division Multiplexing, STDM）"></a>同步时分复用（Synchronous Time Division Multiplexing, STDM）</h3><p>同步时分复用：这种同步在数据的帧之间插入时间信号，让调制出的信号自带同步信息。复用是将时间分割成小份，<strong>一个用户占用特定的一份</strong>实现的。如下图ABCD对应四个用户。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616110751192.png" alt="image-20240616110751192"></p><p>同步时分复用存在问题：当某个用户暂时无数据发送时，在自己的时分复用帧（时隙）上，信道是空闲的，但是参与复用的其它用户也无法使用这个暂时空闲的线路资源，这造成了资源浪费</p><h3 id="统计时分复用（Statistical-Time-Division-Multiplexing）"><a href="#统计时分复用（Statistical-Time-Division-Multiplexing）" class="headerlink" title="统计时分复用（Statistical Time Division Multiplexing）"></a>统计时分复用（Statistical Time Division Multiplexing）</h3><p>统计时分复用：这种复用比同步时分复用更高效。同样是把时间切片，但并不是一个用户占一份时间，而是每个用户带上自己的标签（地址），“赶趟”即走。</p><p>如下图所示，虽然时间也被切片了，但是a走之后b来了，b跟着a走；b走之后b又来了，那下一个时隙又是b走。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616111220266.png" alt="image-20240616111220266" style="zoom:67%;" /></p><h1 id="吹吹水"><a href="#吹吹水" class="headerlink" title="吹吹水"></a>吹吹水</h1><p>一开始的时候，采用的是频分复用。因为一开始的时候使用的频率较低，对频率的操作性较强，因此可以对在频域切分子信道。</p><p>后续使用时分复用时，同步是一个大问题，不良好的同步会导致滑码，丢帧等等。同步技术有两种：一种是时钟上的同步；另外一种是相互之间有时钟信号来同步。在同步发展初期，同步网络是逻辑上独立于数据网络的。</p><p>在<em>数字系统设计与可靠性工程</em>中介绍了Multiplexer和Demultiplexer, 这种电路配合其他芯片，可实现多转1，1转多，来实现通信电路的复用。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240415194310307.png" alt="image-20240415194310307"></p><div class="note info flat"><p>剩下的部分其他课都讲过好多遍了。baoninghai：“那这部分就过得快一点”</p><p>下面的新知识点是SONET/SDH，但不是重点。这个技术已经被淘汰，感兴趣自行了解即可。</p></div>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH340X+ISP烧录使用指南</title>
      <link href="/posts/586a8eb3.html"/>
      <url>/posts/586a8eb3.html</url>
      
        <content type="html"><![CDATA[<h1 id="CH430X使用指南"><a href="#CH430X使用指南" class="headerlink" title="CH430X使用指南"></a>CH430X使用指南</h1><h2 id="引脚"><a href="#引脚" class="headerlink" title="引脚"></a>引脚</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240409131159622.png" alt="image-20240409131159622"></p><p>CH340X引脚如上图。其中：</p><ul><li>UD+ &amp; UD- : USB差分信号（CH340的USB收发器按USB2.0全内置设计，UD+和UD-引脚建议不要额外串接电阻）</li><li>RXD &amp; TXD: 串口接收、发送信号</li><li>V3：用于CH340内部供电电路退耦，<strong>在3.3V时时连接VCC输入外部电源，在5V时固定串联0.1uF电容后接地</strong>。</li><li>VCC：电源输入，<strong>需外接0.1uF退耦电容</strong></li><li>RTS#：（输出信号）Request To Send，用于告知接收端数据准备发送。</li><li>CTS#：（输入信号）Clear To Send，用于告知发送端 接收端已准备好接收 可以发送。</li><li>TNOW：（输出信号）串口正在发送的状态指示引脚，高电平表示正在发送。</li><li>DTR#：（输出信号）Data Terminal Ready，它用于告知接收端数据终端已经准备好进行通讯。</li></ul><p>其中，引脚6可复用为TNOW或DTR模式：</p><ol><li>如果为引脚6外接4.7KΩ下拉电阻到GND，那么将进入开源DTR增强模式，引脚6自动切换为开源驱动的DTR#，用于连接MCU的BOOT模式引脚，默认DTR#为不输出，被外部电阻保持为低电平， 但可以由应用程序设置DTR#引脚输出高电平或不输出，用于DTR#默认低电平的多模式MCU下载。 </li><li>如果在6#引脚与5#引脚之间接4.7KΩ电阻，那么将进入推挽DTR增强模式，6#引脚自动切 换为推挽驱动的DTR#用于连接MCU的控制引脚，可以由应用程序设置DTR#引脚输出高电平或低电平， 用于DTR#默认高电平的多模式MCU下载。</li><li>如果引脚6无外部下拉/上拉电阻，则工作为TNOW模式。</li></ol><p><strong>其中，DTR，RTS等MODEM通讯信号，是可以由计算机上的上位机通过软件更改其状态的。例如Windows下调用 <code>SETRTS</code> API，就可以执行Sends the RTS (request-to-send) signal</strong></p><p>因此，诸如MCUISP等软件，支持对RST和DTR引脚进行不同的操作，以引导MCU进入ISP烧录模式。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240409163227165.png" alt="image-20240409163227165" style="zoom: 50%;" /></p><h2 id="CH340X使用案例"><a href="#CH340X使用案例" class="headerlink" title="CH340X使用案例"></a>CH340X使用案例</h2><p>下图是南京沁恒给出的一个CH340 STM32自动下载电路的使用案例。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/6rGAjBbclrc6aBCFG2kPU72ix9d3Q5Ru3WdUvelS.jpeg" alt="img"></p><p><strong>对于CH340C电路来说，MCUISP需选择“DTR低电平复位，RST高电平进BootLoader”：</strong></p><ol><li>首先MCUISP会让DTR引脚写低电平，那这里DTR#（NOT DTR）就会变成高电平，使得Q1导通，RESET电平与RTS#相等。而一开始RTS是低电平（RTS#高电平），因此并没有复位。</li><li>MCUISP会将RTS引脚写高电平，此时RTS#变为低电平，RESET引脚拉低复位。同时BOOT0上方Q2导通，BOOT0被上拉至VCC，逻辑1。</li><li>延时100毫秒等待稳定。</li><li>DTR变为高电平，DTR#变为低电平，Q1关断，RESET重新被拉高，复位完成。RTS维持高电平，RST#保持低电平，使得Q2持续导通，BOOT0继续保持逻辑1。</li><li>成功进入Bootloader模式，释放BOOT0和RESET并开始进行ISP烧写。</li></ol><p><strong>对于CH340X免外围电路来说，MCUISP需选择“RTS高电平复位，DTR低电平进BootLoader”：</strong></p><ol><li>首先MCUISP使得RTS写高电平，RTS#变为低电平拉低RESET，开始复位。</li><li>将DTR置低，使DTR#为高电平，BOOT0为逻辑1。</li><li>延时100毫秒，等待稳定。</li><li>RTS变低电平，RTS#重新拉高RESET，复位完成。此时BOOT0仍然保持逻辑1。</li><li>成功进入BootLoader，释放BOOT0和RESET并开始进行ISP烧写。<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</li></ol><h1 id="CH340X不需要外围电路，而CH340C需要的原因是"><a href="#CH340X不需要外围电路，而CH340C需要的原因是" class="headerlink" title="CH340X不需要外围电路，而CH340C需要的原因是"></a>CH340X不需要外围电路，而CH340C需要的原因是</h1><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>building</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC3-数据链路控制协议</title>
      <link href="/posts/acdb16ef.html"/>
      <url>/posts/acdb16ef.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本节对应参考书CH7</p></div><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在一次链路中的数据交换中，需要涉及以下任务：</p><ul><li>帧同步（在这门课中不重要）</li><li>流控</li><li>错误控制</li><li>寻址</li><li>控制和发送数据</li><li>链路管理</li></ul><h1 id="流控（flow-control）"><a href="#流控（flow-control）" class="headerlink" title="流控（flow control）"></a>流控（flow control）</h1><p>流控的作用是确保发送端发送的信息不会在因接收端处理速度不足而被忽略，也就是防止缓冲区溢出。</p><div class="note info flat"><p>流控可以出现在通信协议中的任意一层，只要对等层采用流控协议即可（差错控制也是一样）。这一节只介绍了两种常见的流控手段，并没有带入特定协议，后续课程会带入协议深入介绍。</p></div><h2 id="停等流控-stop-amp-wait"><a href="#停等流控-stop-amp-wait" class="headerlink" title="停等流控(stop &amp; wait)"></a>停等流控(stop &amp; wait)</h2><p>工作流程：</p><ol><li>发信端发送信息</li><li>接收端接受</li><li>接收端就绪接收后发送ACK信息</li><li>发送端传输下一帧</li></ol><p>这是最简单，但非常有效的流控形式。可靠性较好，但是效率较低。</p><p>通常情况下，发送端会将一个大数据块分解成更小的块进行传输，因为：</p><ul><li>接收端buffer大小有限</li><li>越长的数据出现错误的概率越高，若出现不可纠正错误则需要重传整个数据。分解成小块后可以独立重传小数据块，数据量小。</li><li>在共享的传输介质中，通常不允许单一通信长时间占用传输介质，因为这样会造成其他终端间的通信产生较大延迟。</li></ul><h2 id="滑窗流控-Sliding-Windows"><a href="#滑窗流控-Sliding-Windows" class="headerlink" title="滑窗流控(Sliding Windows)"></a>滑窗流控(Sliding Windows)</h2><p>考虑收发两端都与一些缓存空间，因此可以连续发送一些东西而无需应答。连续发送的这些数据，就是“窗口”。例如下图，规定数据窗口为6个数据包。那么：</p><ol><li>每一个数据帧都有一个id，下图中记为1 2 3 4 5 6 7，规定窗口大小为6帧。</li><li>发送端可以连续发送帧1 2 3 4 5 6</li><li>如果发送6时，还没有收到帧1的ACK，那么就停下</li><li>如果收到了帧1的ACK，窗口就向后滑动，可发送7</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407151631847.png" alt="image-20240407151631847"></p><p>如此操作，就无需及时的应答，因此ACK数据包可以随其他必要的通信包一起发送，无需为了ACK单独发信一次。</p><p>这在实现还有一些细节差异：</p><ul><li>例如，可以同时通知发送段1-5都收到了，这样发送端只需要一个ACK窗口就可以直接向后滑动5位。</li><li>再例如，ACK信号可以返回“最后一次接收到的正确的帧”，例如最后一次收到的正确帧是3，那窗口会滑动到4开始继续发送，这样可以同时进行流控和差错控制。</li><li>如果发送端资源空闲，线路负荷较低时，那么为保证效率，发送端可以在接收到ACK之前反复重发窗内数据。</li></ul><h2 id="什么时候用停等，什么时候用滑窗？"><a href="#什么时候用停等，什么时候用滑窗？" class="headerlink" title="什么时候用停等，什么时候用滑窗？"></a>什么时候用停等，什么时候用滑窗？</h2><p>随着不同的载波、介质、帧长度不同，会出现下图两种不同的情况。第一种是接收端已经开始收到了发送的信号，发送端的帧还没完。情况二是帧非常短，发送端发了之后就进入空闲等待了。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410172200501.png" alt="image-20240410172200501"></p><ul><li>对于情况1，可使用停等，因此比特流本身较长，采用滑窗机制提前发送意义不大。</li><li>对于情况2，有大量的信道资源被浪费，因此可以使用滑窗机制来提高比特流长度，减少信道空闲时间。</li></ul><p>收发机间信号临界比特长度可用如下公式计算。大于这个长度，接收端将在发送端结束发送前收到信号，是上述情况1；小于这个长度，则发送端空闲较大，是上述情况2；</p><script type="math/tex; mode=display">B=R\times \frac{d}{V}</script><p>其中：</p><ul><li>B：链路长度（单位：bit），这个链路的物理长度能容纳多长的比特流</li><li>R：数据传输速率 (单位：bps)</li><li>d：收发机间物理距离 （单位：m）</li><li>V：介质中信号传播速度（单位：m/s）</li></ul><h1 id="差错控制（五星级"><a href="#差错控制（五星级" class="headerlink" title="差错控制（五星级)"></a>差错控制（五星级)</h1><p>前面介绍的流控是为了避免接收端反应速度不够，而遗漏了发送端的消息。这里的差错控制则是避免数据传输时，由于信道衰落，干扰等因素，出现帧错误、帧丢失。但是他们的手段非常类似  ，采用的协议也高度相似。</p><h2 id="Automatic-Repeat-Request-ARQ"><a href="#Automatic-Repeat-Request-ARQ" class="headerlink" title="Automatic Repeat Request (ARQ)"></a>Automatic Repeat Request (ARQ)</h2><div class="note warning flat"><p>Automatic Repeat Request 的简写是ARQ而非ARR！</p></div><p>自动请求重发（automatic repeat request）是数据通信中在接收端进行差错检测，并自动请求发送端重发的差错控制技术，简称ARQ。在ARQ中，重发要一直延续到该码字被成功地接收为止。ARQ协议有不同的实现方式。</p><h3 id="Stop-amp-Wait-ARQ（需要掌握细节！）"><a href="#Stop-amp-Wait-ARQ（需要掌握细节！）" class="headerlink" title="Stop &amp; Wait ARQ（需要掌握细节！）"></a>Stop &amp; Wait ARQ（需要掌握细节！）</h3><p>停等ARQ与停等流控机制类似。</p><p>在数据正向传输过程中，可能出现两种错误，这两种错误都可以通过ACK机制解决：</p><ul><li>到达目的地的帧可能会损坏。接收方通过错误检测可以检测到这一点，并返回帧错误，请求重发的ACK。</li><li>还有一种可能是在发送过程中出现了问题，接收方根本没有接收到这个帧。为解决这种情况源站配有计时器，发送一个帧后，源开始计时，如果到时未收到接收方的ACK信号，则再次发送相同的帧。</li></ul><p>但是如果A发送了数据，B正确接收了数据并发送了正确接收的ACK，但是这个ACK在传回A的途中损坏了，那A又会重复发送这一帧，此时B接收了一个重复的帧。如何解决这个问题呢？</p><p><strong>帧在发送时，会被交替地标记0或1。同样的，ACK信号也分为ACK0或ACK1，源收到一个ACK0信号，代表接收端已经准备好接受label为0的帧；收到ACK1信号，代表接收端准备好接收label为1的帧。</strong>下图展示了这一过程</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410163738106.png" alt="image-20240410163738106"></p><p>在上图中，ACK0丢失导致A发送了两次frame1, B发现两次接收到的label都是1，因此知道这是同一帧，发送ACK0表示准备好接收frame0，数据传输继续进行。</p><h3 id="Go-Back-N-ARQ"><a href="#Go-Back-N-ARQ" class="headerlink" title="Go-Back-N ARQ"></a>Go-Back-N ARQ</h3><p>Go-Back-N AQR其实就是滑窗机制+重发机制的组合。这是最常用的差错控制手段。在Go-Back-N ARQ 中，同样使用滑窗尺寸（Window size）来规定在没有收到ACK前最多一次能发多少。</p><p><strong>确定滑窗大小的注意点：</strong></p><ul><li><p>因为对数据帧的label（即，标注帧顺序的序号）是重复使用的，因此要确保ACK上一轮回的某一序号前，不会发送新轮回的序号。例如轮回1发送了帧5，那么下一次发帧5之前就必须收到这个帧5的ACK，否则无法确认ACK的是哪一次的帧5。因此，<strong>滑窗的大小必须小于帧label数量的大小</strong>。</p></li><li><p>Go-Back-N差错控制与滑窗流控基本一致。如果出现错误，则会将从错误帧开始往后的帧全部丢弃，并从错误帧开始重发。因此<strong>如果Window Size太大，会对网络资源造成较大占用</strong>。</p></li></ul><p><strong>控制流程：</strong></p><ol><li>发送端A发送一串帧给B</li><li>如果B校验全部正确，则会发送RR(Receive Ready)作为ACK；</li><li>如果B校验不正确，则会发送REJ(reject)作为ACK；</li><li>一旦A收到REJ，则必须从错误帧开始全部重发</li></ol><p>实际传输过程中，会出现如下情况：</p><ul><li><strong>A-&gt;B过程中，帧$i$损坏,但A还在持续发送</strong>：当收到$i+1$时，B发现缺失了$i$，帧顺序不对，B发送$REJ\ i$,$i$后续的帧都被丢弃了，A从$i$开始重传。</li><li><strong>A-&gt;B过程中，帧$i$损坏，但A没有后续帧要发送或必须等待收到ACK后再发送</strong>：此时B没有达到规定需要发ACK的帧个数，因此不会返回ACK信号。此时A中时钟继续计数，当超时时，A发送一个 Poll bit为1的RR帧，B会将此帧作为一个命令处理，B必须发送一个指明其需要的下一帧label的ACK。当A收到ACK后，它从该label开始重传。</li><li><strong>B-&gt;A过程中，帧$i$的RR信号损坏，后续RR信号正常抵达</strong>：因为RR信号是持续的，例如收到了RR6，表明RR5也得到了确认，因此在等待$i$的ACK计时器超时前，可以通过后续的RR对$i$进行确认。</li><li><strong>B-&gt;A过程中，$i$帧的REJ信号损坏</strong>：由于B发送了REJ，因此后续的帧都将被丢弃。A在超时未收到ACK后发送RR帧，待B ACK期望帧后继续传输。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417170821082.png" alt="image-20240417170821082"></p><p>这种差错控制方式实现较为简单，且可以复用为滑窗流控。但是一旦出现错误，会丢弃很多帧，这对资源是一种浪费。</p><h3 id="Selective-Reject-ARQ-要求完全掌握"><a href="#Selective-Reject-ARQ-要求完全掌握" class="headerlink" title="Selective-Reject ARQ (要求完全掌握)"></a>Selective-Reject ARQ (要求完全掌握)</h3><p>相较于Go-Back-N ARQ，Selective-Reject (ARQ)流程相似，但不会丢弃错误帧之后收到的帧，提高效率。以A发送端，B为接收端：</p><ul><li><p>在SR ARQ模式下，当错误出现时，B会发送”Selective Reject （SREJ）”，并将后续收到的帧存在自己的缓存中。则是SR-ARQ与Go-Back-N的核心区别。</p></li><li><p>A收到SREJ后，立马重发SREJ指定的帧，重发之后继续发送滑窗内剩下的内容。</p></li><li>B收到更正后，会立马发送一次ACK来更新A的窗。</li><li>若ACK信号丢失，处理机制和Go-Back-N一致。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417174743653.png" alt="image-20240417174743653"></p><p>在上图中，帧4丢失。因此B发送SREJ4，同时暂存后续的帧5和6。收到SREJ4后，立马重发4，重发后继续发送5 6后续的帧7，B收到后立马回复RR来刷新A的窗。</p><p>若B的RR丢失，A在Timer超时后，会发送RR （Poll bit = 1）来要求B发送RR，并在收到B的RR后再继续发送下面的帧。</p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32核心板设计</title>
      <link href="/posts/ce38ed7e.html"/>
      <url>/posts/ce38ed7e.html</url>
      
        <content type="html"><![CDATA[<h1 id="HSE时钟电路——皮尔斯-Pierce-震荡器"><a href="#HSE时钟电路——皮尔斯-Pierce-震荡器" class="headerlink" title="HSE时钟电路——皮尔斯(Pierce)震荡器"></a>HSE时钟电路——皮尔斯(Pierce)震荡器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>单片机上常见的HSE时钟——一个无源晶振配合两个电容的时钟电路，就是使用的皮尔斯振荡电路，其完整电路如下图，由两个电容 ($C_1\&amp;C_2$) ，一个晶体振荡器 ($X_1$)，一个反馈电阻 ($R_1$) 和一个反相放大器 ($U_1$) 组成。$U_1$和$R_1$一般集成在芯片内部，因此这就是在STM32中选择HSE（外部晶体振荡器）时钟时，有两个引脚 <code>RCC_OSCIN</code> 和 <code>RCC_OSC_OUT</code> 被占用的原因。</p><h2 id="石英晶振的等效电路"><a href="#石英晶振的等效电路" class="headerlink" title="石英晶振的等效电路"></a>石英晶振的等效电路</h2><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/8601a18b87d6277ff030a1392a381f30e924fc95"></center></td>          <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407090244851.png"></center></td>    </tr></table><p>在分析电路如何震荡之前，需要先了解石英的一个物理特性。</p><ul><li>压电效应：当对压电材料施以压力时，能产生电；反过来，当给压电材料通电，能产生形变；因此，在石英晶体的两端施加持续变化的交流电压，即可让石英音叉形变“震荡”起来，物理的形变又回反过来改变电压，从某种意义上来说这也是一个储能元件。在计算上可以把晶振等效为一个RLC电路，如下图所示。其中$C_0$是石英晶体两脚间产生的寄生电容（一般取3-5pF），其余部分是晶振本身的等效RLC，也称为其“运动（Motional）参数”。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/OIP-C.YHRlityi3tRfzIyrz41DjAHaFK" alt="晶振的等效电路"></p><h2 id="皮尔斯振荡器"><a href="#皮尔斯振荡器" class="headerlink" title="皮尔斯振荡器"></a>皮尔斯振荡器</h2><h3 id="如何进行选频"><a href="#如何进行选频" class="headerlink" title="如何进行选频"></a>如何进行选频</h3><p>我们知道，振荡器会在反馈电路的谐振频率上进行振荡，这本质是反馈回路是一个滤波器，而谐振频率是反馈回路中电抗最小的时候。因此会将该频率进行无限放大，最后在此频率上震荡。</p><p>从上面等效电路我们可以看到，晶振有两个谐振频率：一个是$R_1,L_1,C_1$ 三个串联谐振的频率，称之为$f_s$；另一个是$R_1,L_1,C_1$ 与 $C_0$ 并联形成的电路的谐振频率，称之为$f_p$。</p><p>$f_s$频率就是串联电路感抗和容抗抵消，即：$2\pi f_sL_1=\frac{1}{2\pi f_s C_1}$，可解得：</p><script type="math/tex; mode=display">f_s=\frac{1}{2\pi \sqrt{L_1C_1}}</script><p>$f_p$是串联电路感抗大于容抗，整个电路等效于一个电感的时候，和$C_0$发生谐振：</p><script type="math/tex; mode=display">f_p=\frac{1}{2\pi \sqrt{L_1C_1}}\times \sqrt{1+\frac{C_1}{C_0}}=f_s\times \sqrt{1+\frac{C_1}{C_0}}</script><p>可以看出，当频率小于$f_s$时，$L_1$容抗非常小，整个电路的储能由$C_1$主导，因此呈容性（电压领先电流）。在$f_s-f_d$区间内，电路储能由$L_1$主导，因此呈感性（电压滞后电流）。而在频率大于$f_d$后，由于$C_0$支路电抗变小，因此主导支路变成了$C_0$而非$R_1C_1L_1$，再次呈现感性。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408171430933.png" alt="image-20240408171430933"></p><p>对不同频率呈现出不同的阻值，这就是一个滤波器。可以看出，这个滤波器对$f_s$附近的频率和$&gt;&gt;f_p$的频率通过性较好。</p><h3 id="如何满足相位"><a href="#如何满足相位" class="headerlink" title="如何满足相位"></a>如何满足相位</h3><p>在电子系统-振荡器一节中，我们提到，巴克豪森振荡准则是系统起振的必要不充分条件。那么皮尔斯振荡器是如何满足这个条件的呢？</p><p>观察下图，其可以被改写为另一种形式：</p><p><table><br>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/8601a18b87d6277ff030a1392a381f30e924fc95"></center></td>          <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408173101903.png"></center></td><<<<<<< HEAD    </tr></p><p>=======</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>building</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>其中$R_1$可以被理解为一个很小的等效电阻（当然也可以实际加一个电阻在这里）。</p><ol><li>首先，反向放大器让信号相位旋转了180°。</li><li>$R_1,C_1$让信号相位旋转了90°之间的任意一个值（取决于$R_1, C_1$的大小）。</li><li>如果晶振此时呈现感性（即，振荡频率满足$f_s<f<f_p$），那么加上电容$C_2$其会让相位旋转>90°。那么此时，总有一个频率会让相位一共旋转360°，满足巴克豪森震荡准则。</li><li>但是，如果振荡频率$f<f_s$或是$f>f_p$，晶振都将呈容性，那么相当于串联了一个电容，在加上电容$C_2$，整体相位移动会为0°。处于$f_s$时，晶振呈纯阻性，相位移动位于0-90°。</li></ol><p><strong>因此，一定有一个频率位于$f_s&lt;f&lt;f_p$之间，可让系统震荡。这也就是晶振震荡的频率。</strong></p><p>至此，我们已经讨论了它滤波选频的原理和满足巴克豪森振荡准则的原理。</p><h2 id="如何计算匹配电容"><a href="#如何计算匹配电容" class="headerlink" title="如何计算匹配电容"></a>如何计算匹配电容</h2><p>我们注意到，$C_1$和$C_2$两个电容是会影响相位的，而根据巴克豪森振荡准则，反只有相位为满足 $2n\pi$ 的信号才会起振，因此，$C_1,C_2$两个电容是会轻微影响震荡频率的（之所以是轻微影响，是因为它的影响范围在$f_s$到$f_p$之间，这个范围本就很小）。 </p><p>晶振的供应商会给一个“负载电容” $C_L$，$C_L$的值是晶振本身决定的，当晶振外部等效电容等于$C_L$时，其输出的频率最准确。因此代入皮尔斯震荡电路，可以得到如下公式：</p><script type="math/tex; mode=display">C_L=\frac{C_1\times C_2}{C_1+C_2}+C_s</script><p>其中:</p><ul><li>$C_s$为电路板杂散电容和晶振引脚间电容，经验值取3-5pF.</li></ul><p>如果让$C_1=C_2$的话：</p><script type="math/tex; mode=display">C_1=C_2=2(C_L-C_s)</script><p>至此便可计算$C_1$和$C_2$的值。</p><h2 id="lt-lt-lt-lt-lt-lt-lt-HEAD"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h2><p>=======</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>building</p><h1 id="Boot选择器"><a href="#Boot选择器" class="headerlink" title="Boot选择器"></a>Boot选择器</h1></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="三种Boot模式"><a href="#三种Boot模式" class="headerlink" title="三种Boot模式"></a>三种Boot模式</h2><p>stm32有三种boot模式，分别使用boot0 和boot1引脚进行控制</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/20210423125742719.png" alt="img"></p><h3 id="主闪存启动"><a href="#主闪存启动" class="headerlink" title="主闪存启动"></a>主闪存启动</h3><ul><li>启动地址：0x08000000 </li><li>BOOT0: 0;  BOOT1: X</li></ul><p>这是STM32内置的Flash，一般使用JTAG或者SWD模式下载程序时，会写入到该区域内，重启后也直接从这启动程序。基本上都是采用这种模式。</p><h3 id="系统存储器启动"><a href="#系统存储器启动" class="headerlink" title="系统存储器启动"></a>系统存储器启动</h3><ul><li>启动地址：0x1FFF0000</li><li>BOOT0: 1;  BOOT1: 0</li></ul><p>系统存储器是芯片内部一块特定的区域，STM32在出厂时，由ST在这个区域内部预置了一段BootLoader。ST公司的这一段Bootloader中提供了使用串口下载程序的固件。可以通过这个BootLoader将程序下载到系统的Flash中。通过串口下载程序步骤如下：</p><p>电脑通过 USB 转串口线连接 STM32 的 USART1，并打开电脑端的上位机；</p><ul><li>接 BOOT0 为高电平，BOOT1 为低电平（选择 System Memory 启动）；</li><li>复位单片机使其进入 bootloader 模式，此时串口可读取；</li><li>接回 BOOT0 低电平，BOOT1 低电平（选择 Flash启动）；</li><li>复位单片机即可启动用户代码，正常运行；</li></ul><h3 id="SRAM启动"><a href="#SRAM启动" class="headerlink" title="SRAM启动"></a>SRAM启动</h3><ul><li>启动地址： 0x20000000</li><li>BOOT0: 1;  BOOT1: 1</li></ul><p>SRAM没有存储程序的能力，一般用于程序调试。如果程序只进行了小修改，然后完全刷入flash，这个过程非常费时。而SRAM读写速度很快，可以在调试的时候使用。</p><h2 id="Boot选择电路"><a href="#Boot选择电路" class="headerlink" title="Boot选择电路"></a>Boot选择电路</h2><h3 id="手动选择电路"><a href="#手动选择电路" class="headerlink" title="手动选择电路"></a>手动选择电路</h3><p>一般来说，我们用不到SRAM启动。因此通常BOOT1通过一个10K电阻下拉接地。</p><p>当然，也可以用跳线让用户自由选择，如正点原子的STM32战舰v3开发版。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/20210516104650598.png" alt="STM32"></p><p>这便是STM32的启动模式手动选择电路。</p><h3 id="自动下载电路"><a href="#自动下载电路" class="headerlink" title="自动下载电路"></a>自动下载电路</h3><p>STM32可使用CH340配合MCUISP进行ISP烧写，这其中的步骤是到以System Memory模式启动，烧录程序，再切换到Flash模式运行程序。通过CH340上的MODEM通讯引脚，可实现该操作。其原理请参考 <em>CH340X+ISP烧录使用指南</em>。</p><p>CH340与单片机连接如下，同时BOOT1通过一个10K电阻下拉接地。<img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/6rGAjBbclrc6aBCFG2kPU72ix9d3Q5Ru3WdUvelS.jpeg" alt="img"></p><p>配合MCUISP软件，该电路可以实现自动对Boot模式进行选择，然后通过串口下载程序。</p><p><strong>此时CH340的RX需和STM32的USART1的TX（PA9）和USART1的RX（PA10）连接</strong>。</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><h2 id="新版本：flash配置boot（以STM32L4-系列为例）"><a href="#新版本：flash配置boot（以STM32L4-系列为例）" class="headerlink" title="新版本：flash配置boot（以STM32L4+系列为例）"></a>新版本：flash配置boot（以STM32L4+系列为例）</h2><div class="note info flat"><p>参考文档：<a href="https://www.st.com/resource/en/application_note/an4555-getting-started-with-stm32l4-series-and-stm32l4-series-hardware-development-stmicroelectronics.pdf">Getting started with STM32L4 Series and STM32L4+ Series hardware development - Application note</a></p></div><p>ST公司在部分产品上引入了一种全新的boot模式：仅使用一个实体BOOT引脚，配合FLASH内的配置比特来进行boot选择。这样可以实现程序自己切换boot模式。</p><p>首先，引入了如下几个比特：</p><ul><li>Main Flash empty：该比特由系统检测输出，用于判断用户的flash是否经过读写。flash空为1，flash有程序为0；</li><li>nSWBOOT0 FLASH_OPTR：BOOT0引脚由实体引脚值决定还是flash内配置引脚值决定的选择比特。1：实体引脚决定，0：flash内nBOOT0值决定;</li><li>nBOOT0 FLASH_OPTR：BOOT0引脚的flash内配置值。注意，<strong>其为NOT BOOT0（BOOT0取反）</strong>，也就是该bit配置为1相当于实体引脚接0，该比特0相当于实体引脚接1；</li><li>nBOOT1 FLASH_OPTR：BOOT1引脚的flash内配置值。注意，<strong>其为NOT BOOT1（BOOT1取反）</strong>，也就是该bit配置为1相当于实体引脚接0，该比特0相当于实体引脚接1；</li></ul><p>在<code>nSWBOOT0</code>为1时，BOOT0的值由实体引脚决定，此时：</p><ul><li>若<code>Main Flash empty</code>为1（即，flash内没有程序），且BOOT0配置为0（从flash启动），<strong>则不会遵循配置，而会强制从System Memory启动</strong></li><li>其余时候遵循上面三种模式的BOOT表</li></ul><p>官方给出的BOOT选择表如下：（一定要注意 nBOOT 是实体引脚值取反！）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240411235115178.png" alt="image-20240411235115178"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240411235124165.png" alt="image-20240411235124165"></p><hr><p>=======</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>building</p><h1 id="复位电路"><a href="#复位电路" class="headerlink" title="复位电路"></a>复位电路</h1></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>STM32复位引脚为<code>NRST</code>，其复位引脚低电平有效，<strong>内部集成上拉电阻，因此无需外部上拉</strong></p><p>官方推荐的复位电路如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240409191441516.png" alt="image-20240409191441516"></p><p>可以看到，外部仅连接一个手动复位的按键和上电自动复位的电容。</p><h2 id="lt-lt-lt-lt-lt-lt-lt-HEAD-1"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD-1" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h2><p>=======</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>building</p><h1 id="SWD下载电路"><a href="#SWD下载电路" class="headerlink" title="SWD下载电路"></a>SWD下载电路</h1></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>通常某宝买的盗版ST-Link，就是使用的SWD烧写。这种烧写方式只需要4根接线。 分别为<strong>VCC，GND，SWCLK, SWDIO。其中，SWCLK和SWDIO分别对应STM32上PA14和PA13引脚。</strong></p><p>其中：</p><ul><li><strong>SW协议规定，对于SWDIO，必须在电路板上进行上拉（ARM建议100KΩ）</strong>（虽然大部分板子都采用10KΩ上拉）。</li><li>对于SWCLK，芯片内部集成下拉，没有规定一定需要外部下拉。但是部分开发版依旧给了10K电阻的下拉。</li></ul><p>因此，下载电路如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240409190601883.png" alt="image-20240409190601883"></p><p>其中SWDCLK的下拉电阻可有可无，因为芯片内部已集成下拉。</p><h1 id="通信电平转换电路"><a href="#通信电平转换电路" class="headerlink" title="通信电平转换电路"></a>通信电平转换电路</h1><p>由于STM32使用的是3.3V CMOS电平，需要通过UART,I2C等协议与TTL设备（5V）通信时，尝尝需要进行通信电平转换。</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动通信-Ch3-技术基础</title>
      <link href="/posts/3fa30bac.html"/>
      <url>/posts/3fa30bac.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>这一章有笔记是因为院长w来听课了，所以写笔记还容易一点→_→….</p></div><h1 id="无线信道的性质"><a href="#无线信道的性质" class="headerlink" title="无线信道的性质"></a>无线信道的性质</h1><h2 id="信道均衡准则"><a href="#信道均衡准则" class="headerlink" title="信道均衡准则"></a>信道均衡准则</h2><p>在信号经过非理想信道时，会产生</p><p>下图就展示了信道(红色)，Zero-forcing equalizer（蓝色），Minimum mean squared error (MMSE) equalizer（绿色）的频响。可以看到，大体趋势上均衡器与信道频响相反。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407103818078.png" alt="image-20240407103818078"></p><p>均衡器通常加在接收端滤波器后，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407103125702.png" alt="image-20240407103125702"></p><h2 id="错误控制编码"><a href="#错误控制编码" class="headerlink" title="错误控制编码"></a>错误控制编码</h2><p>错误控制编码可以大体上分为两类：</p><ul><li>Forward error-correction (FEC)：前向纠错</li><li>Automatic-repeat request (ARQ)：错误重传</li></ul><h3 id="FEC"><a href="#FEC" class="headerlink" title="FEC"></a>FEC</h3><p><strong>工作原理：</strong></p><ol><li>发送端在每段数据中添加冗余的bit, 这些比特通过某些算法与数据比特关联，称为前向纠错码</li><li>接收端根据收到的数据重新计算冗余比特</li><li>如果受到的纠错码无法匹配，则出现错误，尝试通过冗余比特逆向计算纠错。</li></ol><p>FEC还可分为 块码(block codes) 和 卷积码(convolutional codes) 。</p><p><strong>块码</strong></p><p>对于块码而言，有编码率(code rate) 一概念：</p><script type="math/tex; mode=display">code\ rate =\frac{information\ bits\ length}{encoded\ block\ length}</script><p>由此可以将信道的数据速率和信源的数据速率关联起来：</p><script type="math/tex; mode=display">R_0=\frac{R_s}{code\ rate}</script><p>其中$R_0$是信道速率，$R_s$是信源速率</p><p><strong>卷积码</strong></p><p>卷积码计算可以被视为输入序列与编码器的脉冲响应的离散时间卷积。脉冲响应的持续时间等于编码器的存储器。因此，在卷积码中，信道编码器将消息比特作为连续序列，并以更高的速率生成编码比特的连续序列</p><p>在离散时间系统中，通过延迟器抽头来进行卷积码计算。因此说系统有无存储器（Memory）是区分卷积码和块码的核心。下面是一个卷积码的例子：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407105915862.png" alt="image-20240407105915862"></p><h3 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h3><p>与FEC相反。在ARQ中，接收机尝试检测错误的存在，如果发现错误，则将请求发送回发射机以重新发送数据。因此，ARQ需要一个反馈信道。由于重传，ARQ有一定的延迟，这使得ARQ的使用不适合用于语音通信。在无线通信中，ARQ对于分组无线电网络是有用的。</p><p>最常见的ARQ技术是CRC：给定一个k比特的比特块（消息），发射机生成一个（n-k）比特序列，称为帧校验序列（FCS），这样由n个比特组成的结果帧就可以被某个预定的数整除。在接收机侧，输入的比特序列除以该数字，如果没有余数，则认为没有错误。(奇偶校验位是CRC的特殊情况)。</p><h2 id="分集-Diversity-技术"><a href="#分集-Diversity-技术" class="headerlink" title="分集(Diversity)技术"></a>分集(Diversity)技术</h2><p>分集的核心思想是：“不把鸡蛋放在同一个篮子里”。它使携带同一信息的多个信号<strong>衰落特性相互独立</strong>，并对这些信号进行特定的处理，从而减小衰落对信号影响的技术。也就是在发射机和接收机之间提供多个逻辑信道，然后在每个信道上发送部分信号。可以通俗地说是“<strong>分</strong>散传输，<strong>集</strong>中处理”。</p><h3 id="空间分集"><a href="#空间分集" class="headerlink" title="空间分集"></a>空间分集</h3><p>空间分集（space diversity）也叫天线分集（antenna diversity），是一种在发射端或（和）接收端安装多根不同位置的天线的分集技术。若这些天线的距离足够大，则电磁波受到衰落的影响就相互独立。用人话就是：用多个天线发送或接收同一个信号，然后集中处理。</p><h3 id="时间分集"><a href="#时间分集" class="headerlink" title="时间分集"></a>时间分集</h3><p>时间分集是通过对信道随时间的衰落进行平均来实现的。典型的就是交织技术。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407114922778.png" alt="image-20240407114922778"></p><h3 id="频率分集"><a href="#频率分集" class="headerlink" title="频率分集"></a>频率分集</h3><p>频率分集的一个典型是扩频通信，让原有信号带宽分散在更大的频带上。此处可以参考文章 [扩频通信简介]</p><p>另一个例子是OFDM（Orthogonal Frequency Division Multiplexing 正交频分复用），OFDM主要思想是：将信道分成若干<strong>正交子信道</strong>，将高速数据信号转换成<strong>并行</strong>的<strong>低速子数据流</strong>，调制到在每个<strong>子信道上进行传输</strong>。正交信号可以通过在接收端采用相关技术来分开，这样可以减少子信道之间的相互干扰(ISI) 。每个子信道上的信号带宽小于信道的相关带宽，因此每个子信道上可以看成平坦性衰落，从而可以消除码间串扰，而且由于每个子信道的带宽仅仅是原信道带宽的一小部分，信道均衡变得相对容易。</p><p>它的调制和解调是分别基于IFFT和FFT来实现的，是实现复杂度最低、应用最广的一种多载波传输方案。相较于频分复用（单纯使用频率划分子信道，而不正交），它可以实现更高的频谱利用率。下图是FDM的频谱和OFDM的频谱，可以看到，OFDM更为密集。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410104225740.png" alt="image-20240410104225740"></p><h2 id="合并技术-Combining-methods"><a href="#合并技术-Combining-methods" class="headerlink" title="合并技术(Combining methods)"></a>合并技术(Combining methods)</h2><p>分集技术是在发射段而言的，而合并技术就是将分集发射的信号重新合并在一起的技术。</p><h3 id="最大比合并-MRC-Maximum-Ratio-Combining"><a href="#最大比合并-MRC-Maximum-Ratio-Combining" class="headerlink" title="最大比合并 (MRC: Maximum Ratio Combining)"></a>最大比合并 (MRC: Maximum Ratio Combining)</h3><p>对于来自发射端的同一个信号，由于在接收端使用多天线接收，这个信号将经过多条路径（多个天线）被接收端所接收。多个路径质量同时差的几率非常小，<strong>一般总有一条路径的信号比其他信号好</strong>。在接收端使用某种算法，<strong>对各接收路径上的信号进行加权汇总，信号好的路径分配最高的权重</strong>，实现接收端的信号改善。当多条路径上信号都不太好时，通过MRC技术能够获得较好的接收信号</p><h3 id="等增益合并-EGC-Equal-Gain-Combining"><a href="#等增益合并-EGC-Equal-Gain-Combining" class="headerlink" title="等增益合并(EGC:Equal Gain Combining)"></a>等增益合并(EGC:Equal Gain Combining)</h3><p>等增益合并也称为<strong>相位均衡</strong>，仅仅对信道的<strong>相位偏移进行校正而幅度不做校正</strong>。等增益合并不是任何意义上的最佳合并方式，<strong>只有假设每一路信号的信噪比相同的情况下，在信噪比最大化的意义上，它才是最佳的</strong>。并且，由于缺少对信道幅度的了解，该技术并不适用于所有调制类型，并且其性能比MRC差。</p><h3 id="均方合并-SLC-Square-Law-Combining"><a href="#均方合并-SLC-Square-Law-Combining" class="headerlink" title="均方合并(SLC:Square Law Combining)"></a>均方合并(SLC:Square Law Combining)</h3><p>如果信道是高度时变的，并且其相位不能准确估计，那么可采用SLC合并方法。SLC简单地将接收信号的平方幅度相加，而不进行相干。此技术只能应用于正交信号的合并。</p><h3 id="切换合并-Switching-Combining"><a href="#切换合并-Switching-Combining" class="headerlink" title="切换合并(Switching Combining)"></a>切换合并(Switching Combining)</h3><p>接收机扫描所有的分集支路，<strong>并选择SNR 在特定的预设门限之上的特定分支</strong>。在该信号的SNR 降低到所设的门限值之下之前，<strong>选择该信号作为输出信号</strong>。当SNR 低于设定的门限时，接收机开始重新扫描并切换到另一个分支，该方案也称为扫描合并。这种方式降低了计算成本，甚至可能有比MRC更好的性能，因为SNR非常低的信道不仅不能准确还原信息，还贡献了很多噪声。</p><h1 id="无线通信的复用技术"><a href="#无线通信的复用技术" class="headerlink" title="无线通信的复用技术"></a>无线通信的复用技术</h1><p>分集技术是将一个一个信号分散到不同的子信道传输，来提高该信号的传输质量。而复用技术是使用不同的子信道传输不同的信号，目的是提高频谱利用效率。</p><p>复用技术主要在一下四个方向上进行复用</p><ul><li>时间 （时分复用 Time-Division Multiplexing TDM）</li><li>频率 （频分复用 Frequency-Division Multiplexing FDM）</li><li>编码 （码分复用 Code-Division Multiplexing CDM）</li><li>空间 （空分服用 Space-Division Multiplexing SDM）</li></ul><h2 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h2><p>频分复用将信道在频域上划分成不同子信道，每一个信号占用一个频率。如下图是信号k1-k6在频域上的分布图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410111411683.png" alt="image-20240410111411683"></p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>不需要动态协调，因为一个信号固定使用一个子频，该频永远属于该信号。</li><li>数字信号和模拟信号都可使用</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>信道利用率低：不同信号之间的流量可能分布不均匀，造成部分子信道闲置，此时会浪费带宽</li><li>灵活性差：每一个信号的频率固定</li><li>频率间需要设置过渡带，不同频率需要有一个小间隔，造成资源浪费</li></ul><h2 id="时分服用"><a href="#时分服用" class="headerlink" title="时分服用"></a>时分服用</h2><p>不同时间段发不同的信号，单一信号可占用介质中所有的可用带宽。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410111840706.png" alt="image-20240410111840706"></p><h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><ul><li>不存在频间干扰：介质中只同时存在一个频率，因此不会有FDM中频率间相互干扰的问题。</li><li>对多用户场景，它有很高的吞吐量。</li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>需要非常精确的同步：需要从不同时间信道中分离出来自己的信号，因此对时间同步的要求非常高。</li></ul><h2 id="时频复用"><a href="#时频复用" class="headerlink" title="时频复用"></a>时频复用</h2><p>将时分复用和频分复用结合起来。如下图所示，下图k1-k6被成为资源块，每一个资源块可以划分给一个用户。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410112230934.png" alt="image-20240410112230934"></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>对于频率选择性干扰有一定保护效果。因为频率选择性干扰只在一个频率上持续。</li></ul><h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>在时间和频率上都需要设置间隔带，会造成资源额外开销</li></ul><h2 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h2><p>码分复用使得每一个子信道有自己的一段编码，通过该编码分离子信道信号。一个例子是直序扩频。在该复用模式下，用户可在同一时间使用同一频谱。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410112847036.png" alt="image-20240410112847036"></p><h3 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h3><ul><li>频谱利用率高</li><li>不需要动态协调</li><li>抗干扰能力强</li></ul><h3 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>需要在信号检测上引入更复杂的设计。</li></ul><h2 id="空分复用"><a href="#空分复用" class="headerlink" title="空分复用"></a>空分复用</h2><p>空分复用使用空间划分频谱资源，在一定区域内，用户使用的频谱可与另一不互相影响区域重合。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410113336244.png" alt="image-20240410113336244"></p><h2 id="一些其他的概念"><a href="#一些其他的概念" class="headerlink" title="一些其他的概念"></a>一些其他的概念</h2><h3 id="多址接入"><a href="#多址接入" class="headerlink" title="多址接入"></a>多址接入</h3><p>多址是一个MAC层的概念，<strong>蜂窝系统中是以信道来区分通信对象的</strong>，一个信道只容纳一个用户进行通信，许多同时进行通信的用户，互相以信道来区分，这就是多址。它可以采用上面几种复用来实现，称为FDMA、TDMA、CDMA和SDMA（其中 MA 是Multiple Access，而不是上面的Multiplexing）</p><h3 id="双工"><a href="#双工" class="headerlink" title="双工"></a>双工</h3><p>双工（duplex）， 指二台通信设备之间，允许有双向的资料传输。也就是存在上行和下行两个信道。</p><p>上面提到的复用技术同样可用于双共，给上行和下行划分不同的子信道。分别称之为：频分双工（FDD），时分双共（TDD），码分双共（CDD），其中DD是Division Duplex的缩写。</p><h1 id="调制基础"><a href="#调制基础" class="headerlink" title="调制基础"></a>调制基础</h1><h2 id="基础的调制方式"><a href="#基础的调制方式" class="headerlink" title="基础的调制方式"></a>基础的调制方式</h2><div class="note info flat"><p>PSK，AM；ISI以及Raised-cosine pulse的频谱最窄，在通信原理已经学习，这里不再赘述。</p></div><h3 id="QAM"><a href="#QAM" class="headerlink" title="QAM"></a>QAM</h3><p>QAM(Quadrature Amplitude Modulation)：“正交振幅调制”，其幅度和相位同时变化。它将ASK和PSK汇合到一个信道。正交调幅信号有两个相同频率的载波，但是相位相差90度。QAM一般使用格雷码进行映射。</p><p>如下图是16-QAM的波形图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/download" alt="16-QAM示意图"></p><p>下图是16QAM的星座图</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417105955875.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417112058124.png"></center></td>    </tr></table><div class="note info flat"><p>这一部分讲的比较快，因为通信原理已经讲过</p></div><h1 id="扩频通信"><a href="#扩频通信" class="headerlink" title="扩频通信"></a>扩频通信</h1><p><strong>扩频通信的优势：</strong></p><ul><li>原本窄带信号频谱被扩宽之后，具有更好的抗窄带噪声的特性</li><li>扩频之后频谱隐藏在噪声中，难以监听</li><li>利用扩频码可以进行码分复用</li><li>良好的抗多径效应</li></ul><p><strong>凡是看到码分的，就是用了扩频技术的。例如重庆邮电大学的第一颗TD-SCDMA3G芯片</strong></p><div class="note info flat"><p>这一部分更详细的内容请参考<em>LoRa定位开发-扩频通信简介</em>中<strong>跳频扩频</strong>和<strong>直序扩频</strong>；传送门：<a href="https://www.kaysonz.top/2024/01/14/LoRa(%E9%80%9A%E4%BF%A1">扩频通信简介</a>%E5%AE%9A%E4%BD%8D/%E6%89%A9%E9%A2%91%E9%80%9A%E4%BF%A1%E7%AE%80%E4%BB%8B/)</p></div><h2 id="直序扩频"><a href="#直序扩频" class="headerlink" title="直序扩频"></a>直序扩频</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>请参考<em>LoRa定位开发-扩频通信简介</em>中<strong>直序扩频</strong>；传送门：<a href="https://www.kaysonz.top/2024/01/14/LoRa(%E9%80%9A%E4%BF%A1">扩频通信简介</a>%E5%AE%9A%E4%BD%8D/%E6%89%A9%E9%A2%91%E9%80%9A%E4%BF%A1%E7%AE%80%E4%BB%8B/)</p><h3 id="Rake接收器（还在用传统接收器？）"><a href="#Rake接收器（还在用传统接收器？）" class="headerlink" title="Rake接收器（还在用传统接收器？）"></a>Rake接收器（还在用传统接收器？）</h3><p>在前面直序扩频中介绍，DSSS抗多径效应的原理是选择信号功率最强的一个解扩，而其他路径分量相当与进行了扩频。这恰好就像是在做分集接收。Rake接收器就是将这个过程认为是分集来处理。</p><p>Rake接收机假设每个多径分量间隔一定时延，因此有多条接收之路，分别对不同时延迟的信号进行接扩，最后进行合并。理想来说，瑞刻接收机使用MRC的方式进行合并，但具体的方式需要根据特定场景优化。</p><p>下图为瑞刻接收机模型，可以看到，支路间有一定延迟。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240419104636201.png" alt="image-20240419104636201" style="zoom:50%;" /></p><h2 id="跳频扩频"><a href="#跳频扩频" class="headerlink" title="跳频扩频"></a>跳频扩频</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>请参考<em>LoRa定位开发-扩频通信简介</em>中<strong>跳频扩频</strong>；传送门：<a href="https://www.kaysonz.top/2024/01/14/LoRa(%E9%80%9A%E4%BF%A1">扩频通信简介</a>%E5%AE%9A%E4%BD%8D/%E6%89%A9%E9%A2%91%E9%80%9A%E4%BF%A1%E7%AE%80%E4%BB%8B/)</p><h1 id="多址接入-Multiple-Access"><a href="#多址接入-Multiple-Access" class="headerlink" title="多址接入(Multiple Access)"></a>多址接入(Multiple Access)</h1><p>多址接入是位于MAC层，物理层之上的一种实现点到多点的通信的技术。它可以分为竞争协议和非竞争协议，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240419113836159.png" alt="image-20240419113836159" style="zoom:50%;" /></p><h3 id="竞争"><a href="#竞争" class="headerlink" title="竞争"></a>竞争</h3><p>网络中的节点在网络中的地位是等同的，各节点通过竞争获得信道的使用权，类似与谁喊得大谁就能发。典型的协议是Aloha。</p><h3 id="非竞争"><a href="#非竞争" class="headerlink" title="非竞争"></a>非竞争</h3><p>所有设备依据某一规则，编排发信顺序。有统一调度。这里面又可以分为</p><ul><li>Dynamic allocation（动态分配）：有一中心节点根据当前状况，动态分配信道资源。</li><li>Static allocation（静态分配）：根据某种恒定的规则发信。例如前面提到的CDMA，SDMA等。</li></ul><h2 id="SDMA"><a href="#SDMA" class="headerlink" title="SDMA"></a>SDMA</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240419115355511.png" alt="image-20240419115355511"></p><h2 id="TDMA"><a href="#TDMA" class="headerlink" title="TDMA"></a>TDMA</h2><p>时分多址允许多个用户在不同的时间片（时隙）使用相同的频率传输数据。每个用户使用他们自己的时间片</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240424103804246.png" alt="image-20240424103804246"></p><p>他的显著优势是它的共品行</p><h2 id="CDMA"><a href="#CDMA" class="headerlink" title="CDMA"></a>CDMA</h2><h2 id="DS-CDMA"><a href="#DS-CDMA" class="headerlink" title="DS-CDMA"></a>DS-CDMA</h2>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 移动通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动通信-知识汇总</title>
      <link href="/posts/3fa30bac.html"/>
      <url>/posts/3fa30bac.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>移动通信这门课<a href="https://l61012345.top/2022/04/09/学习笔记/移动通信/1.移动通信/">Mirror</a>上的笔记已经比较完善。加之由于各种各样的原因（指碳基人工智能念硅基人工智能辅助做的PPT的课程呈现方式），本课确实难以写出来笔记。这里只提供一个根据考点写的重点汇总。</p></div><div class="note info flat"><p>我是学通信工程的，这个课程是通信工程捡史（简称史）</p></div><h1 id="CH1-Overview"><a href="#CH1-Overview" class="headerlink" title="CH1-Overview"></a>CH1-Overview</h1><h2 id="三种传输波"><a href="#三种传输波" class="headerlink" title="三种传输波"></a>三种传输波</h2><h3 id="地波传播（Ground-Wave）"><a href="#地波传播（Ground-Wave）" class="headerlink" title="地波传播（Ground Wave）"></a>地波传播（Ground Wave）</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408194113961.png" alt="image-20240408194113961"></p><p>地波指贴着地面，随着地表弧度弯曲传播的电磁波，它的传播距离可以远超视觉地平线。</p><p>地波的频率大约为<strong>2MHz</strong>。典型的地波通信是AM广播。</p><h3 id="天波传播（Sky-Wave）"><a href="#天波传播（Sky-Wave）" class="headerlink" title="天波传播（Sky Wave）"></a>天波传播（Sky Wave）</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408194617027.png" alt="image-20240408194617027"></p><p>天波依靠电离层（ionized layer）反射传播，同样可以实现NLOS传播。天波传播用于业余无线电、CB 无线电和国际广播。</p><h3 id="Line-of-Signt-传播。"><a href="#Line-of-Signt-传播。" class="headerlink" title="Line-of-Signt 传播。"></a>Line-of-Signt 传播。</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408195724164.png" alt="image-20240408195724164"></p><p>地面和天波传播模式不能传输超过30 MHz的电磁波 ，此时必须使用LOS传播</p><h2 id="衰落"><a href="#衰落" class="headerlink" title="衰落"></a>衰落</h2><div class="note info flat"><p>不要问我有什么区别，我也不知道，这课就是一坨屎，黑色的sh*t和黄色的sh*t我都能解释区别，这个我解释不了。我只能说我在看南邮通信原理里面记的快衰落和慢衰落是和相干时间有关的。</p></div><p>  衰落有两套区分方法：快衰落&lt;-&gt;慢衰落；大尺度衰落&lt;-&gt;小尺度衰落</p><ul><li><strong>大尺度衰落（large scale fading）：</strong>从宏观上描述大范围运动产生的平均功率衰减或路径损耗。多受发射和接收机间的主要地貌的影响</li><li><p><strong>小尺度衰落（small scale fading）</strong>：小尺度衰落，<strong>是指接收机与发射机间空间距离的小变化（如半波长）引起信号幅度和相位的急剧变化</strong>，主要由信号的多径传播（multipath effect）和收发两端的相对运动引起。</p></li><li><p><strong>慢衰落（fast fading）：</strong>信号强度受信号路径上的足够大的障碍物影响，这种现象被称为慢衰落，也叫做长期衰落（long term fading）或阴影效应（shadowing）。</p></li><li><strong>快衰落（slow fading）：</strong>信号强度在短时间或小空间范围内的快速变化。它主要由多径效应引起。快衰落在LOS下，信号功率的包络线服从莱斯分布(Rice distribution)；在NLOS下，信号功率的包络线服从瑞利(Rayleigh)分布。</li></ul><h2 id="无线网络的分类："><a href="#无线网络的分类：" class="headerlink" title="无线网络的分类："></a>无线网络的分类：</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624155627674.png" alt="image-20240624155627674"></p><ul><li>Wireless Body Area Network：提供耳机，显示之类的连接</li><li>Wireless Personal Area Network：提供和周围的其他设备的连接</li><li>Wireless Local Area Network：提供因特网连接</li><li>Wireless Wide Area Network：提供远距离的多个主机连接</li></ul><hr><h1 id="CH2-无线信道"><a href="#CH2-无线信道" class="headerlink" title="CH2-无线信道"></a>CH2-无线信道</h1><h2 id="dB单位："><a href="#dB单位：" class="headerlink" title="dB单位："></a>dB单位：</h2><p>这一部分在通信工程的专业课中涉及太多了，详情参见<a href="https://www.kaysonz.top/posts/7cf324fe">电信传输理论-CH1-通信传输的基本概念 | 風</a>这里面的介绍</p><h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><h3 id="噪声的主要来源："><a href="#噪声的主要来源：" class="headerlink" title="噪声的主要来源："></a>噪声的主要来源：</h3><ul><li><strong>大气噪声：</strong>大气噪声主要是由大气中的闪电放电引起的，这些闪电放电通过电离层反射在世界范围内传播。全世界每秒大约有100次闪电。大气噪声功率与频率成反比。它的强度也随着一天中的时间、天气、季节和地理位置而变化。</li><li><strong>宇宙噪声：</strong>宇宙噪声是由地球大气层外的扰动引起的。宇宙噪音的主要来源是太阳和大量的“射电星（radio stars）”，这些“射电星”主要分布在银河面(银河系)。</li><li><strong>人为噪声：</strong>人为的噪声是由各种电器引起的，例如:电视接收器、点火系统、电动机及其控制装置，以及来自电力线的高频元件的不稳定辐射。传播通过电力线直接传输、辐射、感应，偶尔也通过电离层反射。</li></ul><h3 id="热噪声"><a href="#热噪声" class="headerlink" title="热噪声"></a>热噪声</h3><p>热噪声是由导电介质中电荷(通常是电子)的随机运动引起的。每一种元件和电路都会产生热噪声，它会吸收能量(由于电子在与介质晶体结构碰撞时失去动能)。热噪声具有与频率无关的恒定功率谱，并且具有平稳高斯随机过程的分布。<br>一定带宽内的热噪声功率可以被描述为:</p><script type="math/tex; mode=display">P_N=kTB\times F</script><p>其中：</p><ul><li>k：玻尔兹曼常数，$k=1.3805 * 10^{-23}J/K$</li><li>T：开尔文温度</li><li>B：信号带宽</li><li>F：噪声系数，用于修正由于非理想接收器电子器件导致的热噪声增加，理想值为1</li></ul><p>代入k，化为dBm形式有：</p><script type="math/tex; mode=display">P_N[dBm]=10log_{10}\bigg(\frac{kT}{1mW}\bigg)+10log_{10}(B)+10log_{10}(F)</script><p>室温时一般取$T=288k=15^\circ C$，因此有：</p><script type="math/tex; mode=display">P_N[dBm]=(-174+10log_{10}(B))[dBm]+NF[dB]</script><p>其中这个NF就是前面的噪声系数（noise factor）。这里出现单位混用是由于NF常常是用于描述一个系统输入与输出的关系（即，不是dBm这个以1mW为基的单位，而是$10log(\frac{P_{out}}{P_{in}})$），因此它的单位是dB。这里直接混用即可，因为dBw是个绝对单位，而dB是放大/衰减相对单位，1dBw经过2dB的放大器最后等于3dBw，就是这样。</p><h2 id="通信系统传输建模"><a href="#通信系统传输建模" class="headerlink" title="通信系统传输建模"></a>通信系统传输建模</h2><h3 id="自由空间损耗（Free-space-loss）"><a href="#自由空间损耗（Free-space-loss）" class="headerlink" title="自由空间损耗（Free space loss）"></a>自由空间损耗（Free space loss）</h3><p>这个概念和推导也涉及过很多遍了，这里只是换了个单位。推导请见：<a href="https://www.kaysonz.top/posts/9b43b6f">电信传输理论-CH3-传输介质 | 風 </a>最后一个小节。</p><script type="math/tex; mode=display">FSL[dB]=32.4+20log_{10}(d_{[km]})+20log_{10}(f_{[MHz]})</script><h3 id="各向同性辐射有效功率（Effective-isotropic-radiated-power-EIRP-）"><a href="#各向同性辐射有效功率（Effective-isotropic-radiated-power-EIRP-）" class="headerlink" title="各向同性辐射有效功率（Effective isotropic radiated power (EIRP) ）"></a>各向同性辐射有效功率（Effective isotropic radiated power (EIRP) ）</h3><script type="math/tex; mode=display">EIRP_{[dBW]}=P_T-L_T+G_T</script><ul><li>$P_T$：传输功率</li><li>$L_T$：馈线损耗（feeder loss），指连接天线的那条线造成的损耗（一般是阻抗50欧的同轴线）</li><li>$G_T$：传输天线增益</li></ul><h3 id="各项同性接收电平（Isotropic-receive-level-IRL-）"><a href="#各项同性接收电平（Isotropic-receive-level-IRL-）" class="headerlink" title="各项同性接收电平（Isotropic receive level (IRL) ）"></a>各项同性接收电平（Isotropic receive level (IRL) ）</h3><script type="math/tex; mode=display">IRL=EIRP_{[dBW]}-FSL_{[dB]}-L_g</script><ul><li>$L_g$：气体吸收损耗（gaseous absorption loss）</li></ul><h3 id="无损接收信号电平（Unfaded-receive-signal-level-RSL-）"><a href="#无损接收信号电平（Unfaded-receive-signal-level-RSL-）" class="headerlink" title="无损接收信号电平（Unfaded receive signal level (RSL) ）"></a>无损接收信号电平（Unfaded receive signal level (RSL) ）</h3><script type="math/tex; mode=display">RSL=IRL+G_R-L_R</script><ul><li>$G_R$：接收天线增益</li><li>$L_R$：接收馈线损耗</li></ul><h3 id="无损载波噪声比（Unfaded-carrier-to-noise-ratio-CNR-）"><a href="#无损载波噪声比（Unfaded-carrier-to-noise-ratio-CNR-）" class="headerlink" title="无损载波噪声比（Unfaded carrier-to-noise ratio (CNR)）"></a>无损载波噪声比（Unfaded carrier-to-noise ratio (CNR)）</h3><p>这个Unfaded 主要指没有经受噪声影响</p><script type="math/tex; mode=display">C/N_{dB}=RSL-P_N=P_T-L_T+G_T-FSL_{dB}-L_g+G_R-L_R-P_N</script><p>上面这些各个阶段对应的范围如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623123405780.png" alt="image-20240623123405780"></p><h3 id="灵敏度（Sensitivity）"><a href="#灵敏度（Sensitivity）" class="headerlink" title="灵敏度（Sensitivity）"></a>灵敏度（Sensitivity）</h3><p>灵敏度是一个接收器参数，表示接收天线提供可靠通信所需的最小信号电平。</p><p><em>举个例子，用于数据传输的移动接收器有- 90dbm的灵敏度。假设发射功率为100mw，只考虑自由空间传播损耗，发射频率为800mhz，天线为单位增益（Gian=1），无馈线损耗，服务区域半径为多少?</em></p><p>最小接收功率为：</p><script type="math/tex; mode=display">log^{-1}(-9)=1\times10^{-9}mW</script><p>容忍损耗为：</p><script type="math/tex; mode=display">10log_{10}(\frac{10^{-9}mW}{100mW})=-110dB</script><p>即：</p><script type="math/tex; mode=display">-110dB=32.4+20log_{10}(d_{[km]})+20log_{10}(800_{[MHz]})\to d=9.4822km</script><h3 id="简化路径损耗模型（Simplified-path-loss-model）"><a href="#简化路径损耗模型（Simplified-path-loss-model）" class="headerlink" title="简化路径损耗模型（Simplified path loss model）"></a>简化路径损耗模型（Simplified path loss model）</h3><p>为了对信号的路径损耗进行建模，模型有很多，自由空间损耗是其中之一，除此之外还有Two ray–model, General ray-tracking models等等。这里介绍一个Simplified path loss model</p><script type="math/tex; mode=display">P_R(d)=P_R(d_0)\bigg(\frac{d_0}{d}\bigg)^n</script><ul><li>$P_R(d)$：接收功率的函数</li><li>$d$：实际距离</li><li>$d_0$：参考距离（$P_R(d_0)$指参考距离处测得的功率）</li><li>$n$：路径损耗指数</li></ul><p>这个模型中，损耗的部分是$(\frac{d_0}{d})^n$，写成dB形式有：</p><script type="math/tex; mode=display">L_{dB}=10nlog_{10}\bigg(\frac{d_0}{d}\bigg)</script><p>这是一个经验模型，比较适用于室内，但是不是很准确。</p><p>对于路径损耗指数$n$，通常有以下数值：</p><div class="table-container"><table><thead><tr><th style="text-align:center">环境</th><th style="text-align:center">n值</th></tr></thead><tbody><tr><td style="text-align:center">自由空间</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">公寓、住宅</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">丘陵地带</td><td style="text-align:center">3.5</td></tr><tr><td style="text-align:center">郊区</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">城市</td><td style="text-align:center">4.5</td></tr><tr><td style="text-align:center">写字楼内（同一层）</td><td style="text-align:center">1.6-3.5</td></tr><tr><td style="text-align:center">写字楼内（不同层）</td><td style="text-align:center">2-6</td></tr></tbody></table></div><h2 id="大尺度衰落模型"><a href="#大尺度衰落模型" class="headerlink" title="大尺度衰落模型"></a>大尺度衰落模型</h2><p>大尺度衰落（Large scale fading）：大尺度衰落是由于<strong>阴影效应</strong>和<strong>路径损耗</strong>造成的，因此也被称为shadow fading。</p><ul><li>路径损耗是指当无线电信号在较远的距离上通过信道传输时，波能随介质扩散。传输路径增加，导致接收信号的平均功率衰减。距离越大，衰减越大。它是发送的平均功率和接收的平均功率之间的差。</li><li>阴影效应是指是建筑物、山丘、树木（甚至树叶）会削弱甚至阻挡信号。信号只能通过反射、散射等传播到阴影区域。经验测量表明，阴影通常遵循对数正态分布。</li></ul><h3 id="简化路径损耗模型"><a href="#简化路径损耗模型" class="headerlink" title="简化路径损耗模型"></a>简化路径损耗模型</h3><p>以简化的路径损耗模型为基础，将阴影对信号强度的影响记为函数$\psi$，可得到一个路径损耗和阴影的组合模型：</p><script type="math/tex; mode=display">P_R(d)=P_R(d_0)\bigg(\frac{d_0}{d}\bigg)^n\psi</script><script type="math/tex; mode=display">P_R(d)_{dB}=P_R(d_0)_{dB}-10nlog_{10}\bigg(\frac{d}{d_0}\bigg)+\psi_{dB}=\widehat P_R(d_0)+\psi_{dB}</script><p>其中$\psi_{dB}$是一个均值为0，方差为某个特定数值的高斯分布函数</p><h3 id="掉话率（Outage-probability）"><a href="#掉话率（Outage-probability）" class="headerlink" title="掉话率（Outage probability）"></a>掉话率（Outage probability）</h3><p>由于发射机和接收机之间的路径损耗和阴影呈现随机性，因此有一定概率接收机接收到的功率会小于其灵敏度。接收到的信号功率小于接收机灵敏度的概率被定义为掉话率。</p><script type="math/tex; mode=display">P_{out}=p(P_R(d)<P_{min})=1-p(P_R(d)>P_{min})=1-(\widehat P_R(d_0)+\psi_{dB}>P_{min})</script><script type="math/tex; mode=display">=1-p(\psi_{dB}>P_{min}-\widehat P_R(d_0))</script><p>现在它被转化为了高斯分布落在其尾部的概率，尾部和前部的界定值就是$x_0=P_{min}-\widehat P_R(d_0)$。如下图。这里面Q是标准正态分布的概率分布函数（一般通过查表获得值）。由于$\psi_{dB}$是一个均值为$\mu=0$的函数，因此有下式</p><script type="math/tex; mode=display">P_{out}=1-Q(\frac{P_{min}-P_R(d_0)_{dB}+10nlog_{10}(d/d_0)}{\sigma_{\psi}})</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623145101149.png" alt="image-20240623145101149" style="zoom:67%;" /></p><p>在掉话率中的这个路径损耗指数$n$是通过对采样的数据套用均方误差最小化的模型（minimum mean square error MMSE）拟合出来的。这里面均方误差（mean square error）的计算方法是：</p><script type="math/tex; mode=display">MSE=\frac{1}{m}\sum_{d=1}^{m} [\widehat P(d)-P_{measured}(d)]^2</script><p>其中m表示采样m个样本</p><p><em>举个例子，现采样到了下表，用MMSE拟合法求n</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623152412239.png" alt="image-20240623152412239"></p><p>这里取$d_0=100m$</p><script type="math/tex; mode=display">MSE=\frac{1}{4}\sum_{d=1}^{4} [\widehat P(d)-P_{measured}(d)]^2=\frac{1}{4}\sum_{d=1}^{m} [P_R(d_0)_{dB}-10nlog_{10}\bigg(\frac{d}{d_0}\bigg)-P_{measured}(d)]^2</script><script type="math/tex; mode=display">=\frac{1}{4}[(0-0)^2+(0-3.01n+20)^2+(0-10n+35)^2+(0-14.77n+70)^2]</script><p>这是一个凸函数，因此当其斜率为0时，n有最小值</p><script type="math/tex; mode=display">\frac{d}{d_n}MSE=0\to654.306n-2887.8=0\to n=4.4</script><h2 id="小尺度衰落模型"><a href="#小尺度衰落模型" class="headerlink" title="小尺度衰落模型"></a>小尺度衰落模型</h2><p>小尺度衰落 又称 多径衰落，用于描述无线电信号在短时间或短距离内幅度的快速波动。主要是由多径效应和多普勒效应引起的。</p><ul><li><strong>多径效应：</strong>当波在传输过程中遇到各种障碍物时，会发生反射、衍射和散射，形成多条传播路径。由于路径长度不同，波到达接收机的时间也不同，导致相移。多径效应引起信号的时间色散。</li><li><strong>多普勒效应：</strong>当接收机和发射机相互相对运动时，接收到的波会发生频移。如果接收器远离源(两者都远离)，则接收频率逐渐降低。如果接收器靠近源(两者更近)，接收到的频率将逐渐增加。</li></ul><h3 id="半波长移动导致的信号相消"><a href="#半波长移动导致的信号相消" class="headerlink" title="半波长移动导致的信号相消"></a>半波长移动导致的信号相消</h3><p>当同一个信号抵达接收机时，如果其波长相差了一半，则会导致信号相互抵消。如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623154928752.png" alt="image-20240623154928752"></p><h3 id="多普勒效应"><a href="#多普勒效应" class="headerlink" title="多普勒效应"></a>多普勒效应</h3><p>如果发射机或者接收机在移动，则会产生多普勒频移，多普勒频移会提高（靠近）或者减少（远离）载波的频率。其表达式是：</p><script type="math/tex; mode=display">f'=f\pm f_D, f_D=\frac{v}{\lambda}cos\theta</script><ul><li>靠近是+，远离是-</li><li>$v$表示发送机或者接收机移动的速度</li><li>$\lambda$表示载波波长</li><li>$\theta$表示波传播的方向和移动方向的夹角</li></ul><p><strong>Clarke model</strong></p><p>如果传输的信号是单一频率，那么多普勒效应会使得信号频谱展宽。Clarke模型就是用来描述信号受多普勒效应后频谱宽度的。在这个模型下，波从各个方向到达的概率是相等的，且服从瑞利衰落。</p><p>Clarke model的公式为：</p><script type="math/tex; mode=display">S_E(f)=\frac{1.5}{\pi f_m\sqrt{1-(\frac{f-f_c}{f_m})^2}}</script><p>其中：</p><ul><li>$S_E$是信号幅值</li><li>$f_m=max(\frac{v}{\lambda}cos\theta)=\frac{v}{\lambda}$，是多普勒频移的最大频移量</li><li>$f_c$是载波频率</li></ul><p>这个函数画出来图像长这样：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623160908079.png" alt="image-20240623160908079" style="zoom:67%;" /></p><h2 id="信道的分类"><a href="#信道的分类" class="headerlink" title="信道的分类"></a>信道的分类</h2><h3 id="时间选择和时间平坦信道"><a href="#时间选择和时间平坦信道" class="headerlink" title="时间选择和时间平坦信道"></a>时间选择和时间平坦信道</h3><p><strong>相干时间（Coherence time）：</strong>(其中$f_m$是最大多普勒频偏，$f_m=\frac{v}{\lambda}$，v是设备移动速度。)</p><script type="math/tex; mode=display">T_{coh}=\frac{1}{f_m}</script><p>对于50%相干时间：</p><script type="math/tex; mode=display">T_{coh}\approx\frac{9}{16\pi f_m}</script><p><strong>时间平坦（慢衰落）信道（Time-flat channel）：</strong>信号的周期远远小于信道相干时间，信道在不同时刻衰落不会经历剧变</p><p><strong>时间选择（快衰落）信道（Time-selective channel）：</strong>信号周期大于等于相干时间，其不同时刻经历的衰落差异很大。</p><h3 id="频率选择和频率选择信道："><a href="#频率选择和频率选择信道：" class="headerlink" title="频率选择和频率选择信道："></a>频率选择和频率选择信道：</h3><p><strong>相干带宽（Coherence bandwidth）</strong></p><p>相干带宽是由多径传播过来的信号的功率时间差来计算的。首先需要计算平均延迟$\mu$，然后再计算由在$\mu$扩散的RMS delay $\sigma_\tau$。下式中$P_{av}$表示平均总功率，这个平均指的是信号功率平均，所以如果提供了平均功率，就直接加起来。</p><script type="math/tex; mode=display">\mu=\frac{1}{P_{av}}\sum_{\tau=0}^{\infty}\tau P(\tau)</script><script type="math/tex; mode=display">\sigma_\tau=\sqrt{\frac{1}{P_{av}}\sum_{\tau=0}^{\infty}(\tau-\mu )^2P(\tau)}</script><p>对于0.5倍相干带宽，有：</p><script type="math/tex; mode=display">B_{coh}\approx\frac{1}{5\sigma_\tau}</script><p><em>举个例子</em></p><div class="table-container"><table><thead><tr><th>Power（dB）</th><th>0</th><th>-9.7</th><th>-19.2</th><th>-22.8</th></tr></thead><tbody><tr><td>Delay (ns)</td><td>0</td><td>110</td><td>190</td><td>410</td></tr></tbody></table></div><p>先将功率换算回去，分别是：1, 0.107，0.012，0.005</p><script type="math/tex; mode=display">P_{av}=1,+0.107+0.012+0.005=1.124</script><script type="math/tex; mode=display">\mu=\frac{0\times1+110\times0.107+190\times0.012+410\times0.005}{1.124}=14.3ns</script><script type="math/tex; mode=display">\sigma_{\tau}=\sqrt{\frac{((0-14.3)^2\times1+(110-14.3)^2\times0.107+(190-14.3)^2\times0.012+(410-14.3)^2\times0.005}{1.124}}</script><script type="math/tex; mode=display">B_{coh}\approx\frac{1}{5\sigma_\tau}=4.4MHz</script><p><strong>平坦衰落信道（Frequency-flat channel）</strong>：若信道带宽小于相干带宽，不同频率所经历的衰减基本相同，称平坦衰落。</p><p><strong>频率选择信道：（Frequency-selective channel）</strong>：若信号的周期大于想干带宽，则衰落呈现频率差异性，称频率选择衰落。</p><hr><h1 id="CH3-基本技术-Part1"><a href="#CH3-基本技术-Part1" class="headerlink" title="CH3-基本技术-Part1"></a>CH3-基本技术-Part1</h1><h2 id="无线信道中使用的基本技术"><a href="#无线信道中使用的基本技术" class="headerlink" title="无线信道中使用的基本技术"></a>无线信道中使用的基本技术</h2><p>为了控制信道中由前面介绍的衰落带来的错误，发展出了信道均衡、信道编码、分集技术。其中某一种信道均衡方法一般只适用于一种波形或调制方法，但是信道编码比普适。</p><h3 id="信道均衡"><a href="#信道均衡" class="headerlink" title="信道均衡"></a>信道均衡</h3><p>由于信道的频率选择性和多径传播，这会导致不同频率的电磁波被收到的时间不同，造成电磁波色散。电信传输一课中有详细介绍：<a href="https://www.kaysonz.top/posts/3f7b092c">电信传输理论-CH5-金属传输线理论 | 風</a>。色散体现频谱上就是波形展宽，再加之信道一般是带宽有限的，会滤除掉一部分频率，这二者会导致码间干扰（inter-symbol-interferences, ISI）</p><p>信道均衡就是为了针对不同频率的进行补偿。均衡的常用方法是线性电路、横向滤波器或 FIR 滤波器。例如下面这个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623163744876.png" alt="image-20240623163744876"></p><p>上图这个例子以均匀的时间间隔$\Delta$对信号进行采样，采样间隔通常通常为4倍或倍符号速率。然后由各个系数控制加权相加后再输出。回顾一下DSP，这其实就是一个FIR滤波器。</p><h3 id="信道编码"><a href="#信道编码" class="headerlink" title="信道编码"></a>信道编码</h3><p>信道上的差错控制编码主要有两大类：前向纠错码（Forward error-correction FEC）和 自动重传请求 （ Automatic-repeat request ARQ）</p><h4 id="FEC"><a href="#FEC" class="headerlink" title="FEC"></a>FEC</h4><p>FEC的工作原理如下:</p><ol><li>向发送的数据添加一些额外的位，这些位是纠错码，这些位和原本数据位之间有某种函数关联。</li><li>在接收端，接收端根据输入的数据位计算一个新的纠错码。如果新代码与传入代码匹配，则接收方认为该数据块中没有发生错误。</li><li>如果新的纠错码不匹配，且错误数量小于一个特定值时，接收机可以定位到错误并根据纠错码纠正它们。</li></ol><p>FEC可以分为</p><ul><li>分组码（block codes）：分组码一般写作：$(n,k)$，是指将k位数据设为一组，该组数据编码得n位编码后数据，即有$(n-k)$个冗余纠错位。实际是一组一组进行编码，每一组中的$(n-k)$位的冗余位的产生仅与k位信息位有关。其信道信息速率$R_0$，编码率（code rate）$\frac{k}{n}$，信源信息速率$R_S$的关系是:</li></ul><script type="math/tex; mode=display">R_0=\frac{n}{k}R_S</script><ul><li>卷积码（convolutional codes）：卷积码是一种有记忆的纠错码，它可以被看成是输入序列和encoder的进行离散卷积。输入序列被卷积的长度和encoder的存储大小有关（因此说，编码器内带内存的是卷积码）。由于在卷积码内输入的比特是被当做连续比特序列来进行卷积的（即，不是打包好一块走一块那种），因此卷积码可以以较高速度编码</li></ul><h4 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h4><p>ARQ技术和FEC想要实现的能通过加入冗余位在接收端恢复受损数据不同，它旨在让接收方仅仅检测错误的存在，发现错误存在后，再要求发送方重新发送数据（因此也称为后向纠错 backward error correction）。因此ARQ需要一个反馈信道，同时还有一定延迟。ARQ对于分组交换很有用。</p><p>ARQ用来判断数据是否出错的常见的错误检测技术之一是循环冗余校验(cyclic redundancy check CRC)：对于k位的数据块(message)，发送器生成一个(n-k)位冗余序列，称为帧校验序列(frame check sequence  FCS)。然后将其编码为由n位组成的编码后数据，这个数据被某个预定的数字完全整除。在接收端，用接收的比特除以该数字，如果没有余数，则认为没有错误。奇偶校验位是CRC的特殊情况。</p><h3 id="分集技术"><a href="#分集技术" class="headerlink" title="分集技术"></a>分集技术</h3><p><strong>为什么需要分集：</strong></p><ul><li>为了解决NLOS下Raylleigh和LOS下Ricean快衰落的问题</li><li>提高覆盖范围内的QoS</li></ul><p>分集的核心思想是：“不把鸡蛋放在同一个篮子里”。它使携带同一信息的多个信号<strong>衰落特性相互独立</strong>，并对这些信号进行特定的处理，从而减小衰落对信号影响的技术。也就是在发射机和接收机之间提供多个逻辑信道，然后在每个信道上发送部分信号。可以通俗地说是“<strong>分</strong>散传输，<strong>集</strong>中处理”。</p><p>总体来看，分集技术可以分为：</p><ul><li>空间分集</li><li>时间分集</li><li>频率分集</li></ul><h4 id="空间分集"><a href="#空间分集" class="headerlink" title="空间分集"></a>空间分集</h4><p>空间分集（space diversity）也叫天线分集（antenna diversity），是一种在发射端或（和）接收端安装多根不同位置的天线的分集技术。若这些天线的距离足够大，则电磁波受到衰落的影响就相互独立。用人话就是：用多个天线发送或接收同一个信号，然后集中处理。</p><h4 id="时间分集"><a href="#时间分集" class="headerlink" title="时间分集"></a>时间分集</h4><p>时间分集是通过对信道随时间的衰落进行平均来实现的，典型的就是交织技术（interleaving）。例如下图，假设编码有2bit的FEC纠错能力。将word1的后5个bit和word2的前5个bit交换拼接。在传输过程中拼接后的word2受到干扰错误4个bit，但是在接收逆交织后，就变成了2个bit错误，可以被更正。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240407114922778.png" alt="image-20240407114922778"></p><h4 id="频率分集"><a href="#频率分集" class="headerlink" title="频率分集"></a>频率分集</h4><p>频率分集的一个典型是扩频通信，让原有信号带宽分散在更大的频带上，然后利用Rake接收机（Rake接收机假设每个多径分量间隔一定时延，因此有多条接收之路，分别对不同时延迟的信号进行接扩，最后进行合并。）进行接收，以此达到分集目的。</p><p>另一个例子是OFDM（Orthogonal Frequency Division Multiplexing 正交频分复用），OFDM主要思想是：将信道分成若干<strong>正交子信道</strong>，将高速数据信号转换成<strong>并行</strong>的<strong>低速子数据流</strong>，调制到在每个<strong>子信道上进行传输</strong>。正交信号可以通过在接收端采用相关技术来分开，这样可以减少子信道之间的相互干扰(ISI) 。<strong>每个子信道上的信号带宽小于信道的相干带宽（Coherence Bandwidth），因此每个子信道上可以看成平坦衰落（flat fading）</strong>，从而可以消除码间串扰，而且由于每个子信道的带宽仅仅是原信道带宽的一小部分，信道均衡变得相对容易。</p><p>它的调制和解调是分别基于IFFT和FFT来实现的，是实现复杂度最低、应用最广的一种多载波传输方案。相较于频分复用（单纯使用频率划分子信道，而不正交），它可以实现更高的频谱利用率。下图是FDM的频谱和OFDM的频谱，可以看到，OFDM更为密集。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410104225740.png" alt="image-20240410104225740"></p><h2 id="无线通信中的复用技术"><a href="#无线通信中的复用技术" class="headerlink" title="无线通信中的复用技术"></a>无线通信中的复用技术</h2><p>分集技术是将一个一个信号分散到不同的子信道传输，来提高该信号的传输质量。而复用技术是使用不同的子信道传输不同的信号，目的是提高频谱利用效率。</p><p>复用技术主要在一下四个方向上进行复用</p><ul><li>时间 （时分复用 Time-Division Multiplexing TDM）</li><li>频率 （频分复用 Frequency-Division Multiplexing FDM）</li><li>编码 （码分复用 Code-Division Multiplexing CDM）</li><li>空间 （空分服用 Space-Division Multiplexing SDM）</li></ul><h3 id="频分复用（FDM）"><a href="#频分复用（FDM）" class="headerlink" title="频分复用（FDM）"></a>频分复用（FDM）</h3><p>描述：频分复用将信道在频域上划分成不同子信道，每一个信号占用一个频率。</p><p><strong>优点：</strong></p><ol><li>不需要动态协调，因为一个信号固定使用一个子频，该频永远属于该信号。</li><li>数字信号和模拟信号都可使用</li></ol><p><strong>缺点：</strong></p><ol><li>信道利用率低：不同信号之间的流量可能分布不均匀，造成部分子信道闲置，此时会浪费带宽。</li><li>灵活性差：每一个信号的频率固定。</li><li>频率间需要设置过渡带，不同频率需要有一个小间隔，造成资源浪费</li></ol><h3 id="时分复用（TDM）"><a href="#时分复用（TDM）" class="headerlink" title="时分复用（TDM）"></a>时分复用（TDM）</h3><p>描述：不同时间段发不同的信号，单一信号可占用介质中所有的可用带宽。</p><p><strong>优点：</strong></p><ol><li>不存在频间干扰：介质中只同时存在一个频率，因此不会有FDM中频率间相互干扰的问题。</li><li>对多用户场景，它有很高的吞吐量。</li></ol><p><strong>缺点：</strong></p><ol><li>需要非常精确的同步：需要从不同时间信道中分离出来自己的信号，因此对时间同步的要求非常高。</li></ol><h3 id="时频复用-（Time-and-Frequency-Multiplex）"><a href="#时频复用-（Time-and-Frequency-Multiplex）" class="headerlink" title="时频复用 （Time and Frequency Multiplex）"></a>时频复用 （Time and Frequency Multiplex）</h3><p>描述：将时分复用和频分复用结合起来。如下图所示，下图k1-k6被成为资源块，每一个资源块可以划分给一个用户。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240410112230934.png" alt="image-20240410112230934"></p><p>优点</p><ol><li>对于频率选择性干扰有一定保护效果。因为频率选择性干扰只在一个频率上持续。</li></ol><p>缺点：</p><ol><li>在时间和频率上都需要设置间隔带，会造成资源额外开销</li></ol><h3 id="码分复用-（CDM）"><a href="#码分复用-（CDM）" class="headerlink" title="码分复用 （CDM）"></a>码分复用 （CDM）</h3><p>描述：码分复用使得每一个子信道有自己的一段编码，通过该编码分离子信道信号。一个例子是直序扩频。在该复用模式下，用户可在同一时间使用同一频谱。</p><p><strong>优点：</strong></p><ol><li>频谱利用率高</li><li>不需要动态协调</li><li>抗干扰能力强</li></ol><p><strong>缺点：</strong></p><ol><li>需要在信号检测上引入更复杂的设计。</li></ol><h3 id="空分复用-（SDM）"><a href="#空分复用-（SDM）" class="headerlink" title="空分复用 （SDM）"></a>空分复用 （SDM）</h3><p>描述：空分复用使用空间划分频谱资源，在一定区域内，用户使用的频谱可与另一不互相影响区域重合。</p><p>空分复用可以非常有效地利用频谱，因此几乎所有无线系统中都在使用。</p><h2 id="数字调制技术"><a href="#数字调制技术" class="headerlink" title="数字调制技术"></a>数字调制技术</h2><p><strong>为什么需要调制：</strong>信息无法被原样传递</p><p><strong>什么是调制</strong>：将信息包含进电磁波内</p><p><strong>如何调制</strong>：对载波的一些参数进行改变，让其承载信息</p><h3 id="ASK"><a href="#ASK" class="headerlink" title="ASK"></a>ASK</h3><p>使用振幅调制二进制序列，如下图所示。</p><p><img src="C:\Users\17997\AppData\Roaming\Typora\typora-user-images\image-20240623201850496.png" alt="image-20240623201850496"></p><h3 id="FSK"><a href="#FSK" class="headerlink" title="FSK"></a>FSK</h3><p>使用不同的频率调制二进制序列。如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623202032709.png" alt="image-20240623202032709"></p><h3 id="PSK"><a href="#PSK" class="headerlink" title="PSK"></a>PSK</h3><p>使用不同相位调制二进制序列。如下图所示。如果是BPSK，则相位差异为$\pi$，QPSK则为$\frac{\pi}{2}$</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240623202236165.png" alt="image-20240623202236165"></p><h3 id="Quadrature-Amplitude-Modulation-QAM"><a href="#Quadrature-Amplitude-Modulation-QAM" class="headerlink" title="Quadrature Amplitude Modulation QAM"></a>Quadrature Amplitude Modulation QAM</h3><p>QAM是PSK和ASK的结合。使用星座图（constellation points）来映射二进制序列。例如下图是16-QAM（4bit/symbol）。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240417105955875.png" alt="QAM"></p><hr><h1 id="CH3-基本技术-Part2"><a href="#CH3-基本技术-Part2" class="headerlink" title="CH3-基本技术-Part2"></a>CH3-基本技术-Part2</h1><h2 id="扩频通信"><a href="#扩频通信" class="headerlink" title="扩频通信"></a>扩频通信</h2><div class="note info flat"><p>如果想更深入学习，可以参考<a href="https://www.kaysonz.top/posts/76361032">扩频通信简介 | 風 (kaysonz.top)</a></p></div><h3 id="扩频通信的优势："><a href="#扩频通信的优势：" class="headerlink" title="扩频通信的优势："></a>扩频通信的优势：</h3><ul><li>符号的频谱在传输过程中经常受到窄带信号的干扰，导致接收端无法正确识别符号。原本窄带信号频谱被扩宽之后，再接收端解扩，具有更好的抗窄带噪声的特性</li><li>扩频之后频谱隐藏在噪声中，难以监听</li><li>利用扩频码可以进行码分复用</li><li>良好的抗多径效应（Rake分集接收）</li></ul><p><strong>凡是看到码分的，就是用了扩频技术的。例如重庆邮电大学的第一颗TD-SCDMA3G芯片</strong></p><h3 id="直序扩频（Direct-Sequency-Spreading-Spectrum-DSSS）"><a href="#直序扩频（Direct-Sequency-Spreading-Spectrum-DSSS）" class="headerlink" title="直序扩频（Direct Sequency Spreading Spectrum DSSS）"></a>直序扩频（Direct Sequency Spreading Spectrum DSSS）</h3><p><strong>是什么：</strong>将原始信号与频率更高的伪随机序列（pseudo-random number ）或者叫扩频序列（chipping sequence）进行异或运算，以此将信号的频宽提高。在接收端再使用同样的伪随机序列异或运算解扩。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240115000300778.png" alt="img"></p><p><strong>优势：</strong></p><ol><li>减少频率选择性干扰</li><li>使用扩频序列（chipping sequence），提供了码分复用的能力，基站可以使用同一频率</li><li>多个基站可以检测和恢复信号(软切换增益 soft handover gain)</li></ol><p><strong>劣势：</strong></p><ol><li>需要精确的功率控制，因为不同扩频码的信号必须在大约相同的功率水平进行检测。</li></ol><p><strong>DSSS中的Rake Receiver（还在用传统接收机？）</strong>：DSSS抗多径效应的原理是选择信号功率最强的一个解扩，而其他路径分量相当与进行了扩频。这恰好就像是在做分集接收。Rake接收器就是将这个过程认为是分集来处理。Rake接收机假设每个多径分量间隔一定时延，因此有多条接收之路，分别对不同时延迟的信号进行接扩，最后进行合并。理想来说，瑞刻接收机使用MRC的方式进行合并，但具体的方式需要根据特定场景优化。</p><h3 id="跳频扩频（Frequency-Hopping-Spreading-Spectrum-FHSS）"><a href="#跳频扩频（Frequency-Hopping-Spreading-Spectrum-FHSS）" class="headerlink" title="跳频扩频（Frequency Hopping Spreading Spectrum FHSS）"></a>跳频扩频（Frequency Hopping Spreading Spectrum FHSS）</h3><p>传统的无线通信系统，发射机和接收机工作在单次通信过程中，载频一般是保持不变；例如通信频率是900MHz, 那么通信将一直使用这个频率进行。跳频（Frequency Hopping)系统则在单次通信中，载频在多个频率上跳变。如901MHz, 902MHz etc.</p><p>跳频通信通过伪随机序列（pseudo random number）确定跳频图案，即信号频率跳变的规律。然后通信频率按照跳频图案变化，如下图所示。</p><p><strong>跳频可以细分为：</strong></p><ul><li><strong>快跳频（Fast Hopping）</strong>：跳频周期小于符号周期(是Ts的约数)，一个符号传输需要多个频率</li><li><strong>慢跳频（Slow Hopping）</strong>：跳频周期大于符号周期(是Ts的倍数)，一个频率传输多个符号</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114233026923.png" alt="FHSS"></p><p><strong>优势：</strong></p><ol><li>频率选择性衰落的影响在众多频率跳变中被削弱</li><li>提供频率分集（Frequency Diversity）</li><li>实现简单</li><li>任何时候都只使用一小部分频谱（即可以用不同跳频图案实现码分复用）</li><li>比起DSSS更易被探测</li></ol><p><strong>劣势：</strong></p><ol><li>鲁棒性（robust）不如DSSS</li></ol><h3 id="跳时扩频（Time-Hopping-Spreading-Spectrum）"><a href="#跳时扩频（Time-Hopping-Spreading-Spectrum）" class="headerlink" title="跳时扩频（Time-Hopping Spreading Spectrum）"></a>跳时扩频（Time-Hopping Spreading Spectrum）</h3><p>与跳频相似，是使发射信号在时间轴上跳变。首先把时间轴分成许多时片。在一帧内哪个时片发射信号由扩频码序列去进行控制，主要用于时分多址（TDMA）通信。</p><p><strong>优点：</strong>实现简单，能效好</p><p><strong>缺点：</strong>同步困难</p><h2 id="多址技术（Multiple-Access）"><a href="#多址技术（Multiple-Access）" class="headerlink" title="多址技术（Multiple Access）"></a>多址技术（Multiple Access）</h2><p>多址接入是位于MAC层，物理层之上的一种实现点到多点的通信的技术。多址和复用的区别在于，多址技术是要根据不同的“址”来区分用户；复用是要给用户一个很好的利用公共资源的方式。复用针对资源，多址针对用户。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240419113836159.png" alt="image-20240419113836159" style="zoom:50%;" /></p><p>多址可以分为竞争协议和非竞争协议，如上图。</p><p>竞争：网络中的节点在网络中的地位是等同的，各节点通过竞争获得信道的使用权，典型的协议是Aloha。</p><p>非竞争：所有设备依据某一规则，编排发信顺序。有统一调度。这里面又可以分为：</p><ul><li>Dynamic allocation（动态分配）：有一中心节点根据当前状况，动态分配信道资源。</li><li>Static allocation（静态分配）：根据某种恒定的规则发信。例如前面提到的CDMA，SDMA等。</li></ul><p>多址和复用技术本质上是用的同一个物理技术来实现，因此这里只简单列举优缺点</p><h3 id="FDMA"><a href="#FDMA" class="headerlink" title="FDMA"></a>FDMA</h3><p><strong>优点：</strong></p><ol><li>低复杂度（例如：比TDMA或CDMA更容易同步）</li><li>所需的bit开销较少（ Fewer bits needed for overhead purposes）</li></ol><p><strong>缺点：</strong></p><ol><li>未使用的信道频谱会被闲置（stay idle），浪费资源</li><li>需要比较严格的滤波来降低不同信道之间的干扰</li></ol><h3 id="TDMA"><a href="#TDMA" class="headerlink" title="TDMA"></a>TDMA</h3><p><strong>优点：</strong></p><ol><li>低功耗</li><li>无需双工器即可实现双工（rx和tx在不同时隙）</li></ol><p><strong>缺点：</strong></p><ol><li>burst+guard slots 之间需要同步（带来了复杂性和比FDMA更大的开销)</li><li>通常需要自适应均衡，因为与 FDMA 相比，传输速率通常非常高</li></ol><h3 id="CDMA"><a href="#CDMA" class="headerlink" title="CDMA"></a>CDMA</h3><p>所有终端都可以使用相同频率发送，并占用信道的整个带宽。发送和接收方都有一个唯一的扩频码（spreading code），通过扩频码来对信号进行扩频和解扩。只有当扩频码相符合时，信号的频谱才能被恢复。这个扩频码就是码反复用的“码”。</p><p>出现缘由：当服务数量从纯语音增加到语音+数据时，FDMA/TDMA模式缺乏对稀缺频谱的高效利用。</p><p><strong>DS（Direct Sequence）-CDMA优点：</strong></p><ol><li>所有终端可以使用同一个频率而无需同步</li><li>可以根据用户数量调整扩频码，最大用户数量不定。提高了资源利用率。</li><li>更简单的载波生成（无需进行相移、时分等）</li></ol><p><strong>DS（Direct Sequence）-CDMA缺点：</strong></p><ol><li>需要功率控制来保证所有信号以相同强度到达接收器，否则较远用户可能被较近用户屏蔽（blocked），这被称为 <strong>near-far problem</strong></li><li>难以获取和维持码片时序（chip timing），这导致更复杂的接收器</li><li>自拥塞（self-jamming）：不同用户的扩频序列可能不完全正交（由于多径和扩频序列不同步导致），从而导致解扩问题</li></ol><p><strong>WCDMA</strong></p><p>WCDMA是一种频宽比较宽的DS-CDMA（典型值5MHz）。UMTS（Universal Mobile Telecommunications System）就是基于WCDMA提供multiple access机制。</p><p>如今，WCDMA也指UMTS的一组物理层规范(如编码类型、双工方案、检测/解调特性等)</p><p>WCDMA的DS-CDMA使用扩频码扩频（在WCDMA内第一次扩频的叫信道化码）的基础上，还添加扰码（Scrambling codes）。</p><ol><li>Channelization Codes（也称short code）<ul><li>长度取决于Spreading Factor</li><li>用于来自单一源的信道分离。上行链路上将控制通道（control channel）和专用通道（dedicated channels）分离；下行链路将一个cell/sector内的不同用户分离</li><li>因为不同cell内的不同用户可能有同样的short code，因此需要加扰码来区分cell</li></ul></li><li>Scrambling codes （也称long code）<ul><li>非常长（38400 chips）</li><li>上行链路：用于分离不同手机</li><li>下行链路：用于分离不同cell/sectors</li></ul></li></ol><h3 id="SDMA"><a href="#SDMA" class="headerlink" title="SDMA"></a>SDMA</h3><p>旨在将空间分割为cell/sectors，形成蜂窝结构（cell structure），在一个cell/sector内，只有一个对应的终端。</p><p><strong>优点：</strong></p><ol><li>简单</li><li>增加系统容量</li></ol><p><strong>缺点：</strong></p><ol><li>不灵活，需要定向天线，而天线通常是固定的</li></ol><p>SDMA通常需要与TDMA，FDMA，CDMA一起联合使用。例如WCDMA里面的扰码+信道化码实现SDMA</p><h3 id="OFDMA"><a href="#OFDMA" class="headerlink" title="OFDMA"></a>OFDMA</h3><p>前面在频率分集里面介绍过OFDM调制。在OFDM下，可以将子信道使用正交子载波调制，从而实现正交频分复用（Orthogonal Frequency Division Multiplex）。这里同样可以用于正交频分多址（Orthogonal Frequency Division Multiplexing）</p><p><strong>导频子载波（Pilot Subcarrier）</strong></p><p>导频信号是指不携带信息，双方已知的数据的一个信号。因为所有子载波会产生一定的幅度和相位偏移，在信号中插入导频是提供参考，来做接收信号时候的信道估计+补偿。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624103747667.png" alt="image-20240624103747667" style="zoom:50%;" /></p><h1 id="CH4-Part1-2G"><a href="#CH4-Part1-2G" class="headerlink" title="CH4-Part1-2G"></a>CH4-Part1-2G</h1><h2 id="蜂窝（Cellular）的概念"><a href="#蜂窝（Cellular）的概念" class="headerlink" title="蜂窝（Cellular）的概念"></a>蜂窝（Cellular）的概念</h2><h3 id="蜂窝的介绍"><a href="#蜂窝的介绍" class="headerlink" title="蜂窝的介绍"></a>蜂窝的介绍</h3><p><strong>什么是蜂窝：</strong>将无线电网络的功能（the functionality of radio network ）划分为几何上更小的区域，称为cells。无线电信号随着距离而衰减，因此相同的资源可以在一定区域外再次利用（resource reuse）。</p><p><strong>蜂窝的动力：</strong>有限的频谱资源（limited radio spectrum.）</p><p><strong>蜂窝的优势：</strong></p><ol><li><strong>更高的容量（Higher capacity）：</strong>可以更有效地利用资源，提高系统容量</li><li><strong>节省传输功率（Less Transmission power）：</strong>蜂窝的区域小，减少了需要覆盖尺寸。同时也减少了对基站传输放大器的要求。这同时也给移动终端带来了更好的电池寿命。</li><li><strong>被局限的干扰（Localized interface）：</strong>由于一个cell服务区域小，干扰也被局限在较小区域内</li><li><strong>鲁棒性好（Robustness）</strong>：如果一个cell坏掉了，cell的重叠保证了移动终端可以通过其他基站接入网络</li><li><strong>部署中技术难度小（Less technological challenges in deployment）：</strong>部署中遇到的主要问题是最小化系统的实施和运营开支（operational expenses）。因为技术上想要改进容量需要更小的cell面积带来更多的复用。</li></ol><p><strong>蜂窝的劣势</strong></p><ol><li><strong>需要大规模基础设施（Massive infrastructure）:</strong>如果需要更多的容量，基站的数量也会增(位置寄存器、交换机、管理服务器等)。</li><li><strong>更复杂的移动性管理（More complex mobility management）：</strong>必须提供整个网络的无缝连接，即，需要切换（Handover）。Handover的管理可能变得很复杂。</li><li><strong>资源规划和管理（Resource planning and management）：</strong>需要更严格（tight）的资源规划策略，例如对时隙（slots）和频率。</li></ol><h3 id="系统容量"><a href="#系统容量" class="headerlink" title="系统容量"></a>系统容量</h3><p>在蜂窝网络中，对每一个Cell分配一个频率，使用相同频率的cell被称为co-channel cells，使用不同频率的被称为adjacent cells。</p><p>使用不同频率的挨在一起，构成一个大的板块，这样大的板块重复出现，如下图所示。这样一个大的板块就被称为一簇（cluster）。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624112844832.png" alt="image-20240624112844832"></p><p>使用两个相同频率的cell的距离被称作复用距离（reuse distance），记作 $D$。</p><p>一个簇的内包含几个cell被称作簇大小（cluster size），记作 $N$。</p><p>如果一个大型蜂窝网络一共有S条全双工信道，可以给一个cell分配k条信道。那么S，k和簇大小N有如下关系：</p><script type="math/tex; mode=display">S=kN</script><p>如果一个cell被重复用了M次，那么系统的总容量就是：</p><script type="math/tex; mode=display">C=MkN=MS</script><p><em>举个例子：给定总带宽为10MHz，其中每个信道占用200KHz频带，计算系统使用时每个小区可用的信道数(a) 4-cell cluster，(b) 7-cell cluster，(c) 12-cell cluster。</em></p><p>(a) $S=\frac{10M}{200K}=50$，$k=50/4\approx12$</p><p>(b)$k=50/7=7$</p><p>(c)$k=50/12=4$</p><h3 id="蜂窝网络内的SIR"><a href="#蜂窝网络内的SIR" class="headerlink" title="蜂窝网络内的SIR"></a>蜂窝网络内的SIR</h3><p>SIR是指的signal interference ratio， 其中interference指相邻信道带来的干扰。如果所有cell发送功率相等，则通信到干扰与发射功率无关，仅与cell半径R和复用距离D有关。</p><p>假设$I_j$是从第$j$个co-channel cell收到的干扰，总共有J个co-channel cell，则SIR可以记为：</p><script type="math/tex; mode=display">SIR=\frac{S}{I}=\frac{S}{\sum_{j=0}^{J}I_j}</script><p>用传输功率+衰减来表达，记本cell基站（即S对应的基站）到终端的距离为$d_0$，记干扰基站到终端距离为$d_j$，记信号强度随距离衰减指数为n，有：</p><script type="math/tex; mode=display">SIR=\frac{Pd_0^{-n}}{\sum_{j=0}^{J}Pd_j^{-n}}=\frac{d_0^{-n}}{\sum_{j=0}^{J}d_j^{-n}}</script><p>根据六边形蜂窝的距离计算公式，这个公式最终可以被化简为：<strong>(单位非dB!,dB需要转换!)</strong></p><script type="math/tex; mode=display">SIR=\frac{(\sqrt{3N})^n}{6}</script><p>其中在自由空间下$n=2$，在密集城市环境下$n=4$</p><p><em>举个例子：在路径损耗因子 n=4 的环境中，实现 SIR 高于 18 dB 的最小集群大小是多少？</em></p><script type="math/tex; mode=display">SIR=\frac{(\sqrt{3N})^4}{6}>10^{1.8}\to N=6.48=7</script><h3 id="Handover"><a href="#Handover" class="headerlink" title="Handover"></a>Handover</h3><p>Handover是指一个基站决定将用于连接至一个终端的所有无线电资源交移给另一个基站（(all radio resources of a connection are  handed to another base station）。</p><p>在蜂窝网络中，Handover是移动性（Mobility）的保证。</p><p><strong>Handover过程中，需要考虑：</strong></p><ul><li>以什么方式触发Handover（power level, quality level, other reasons）</li><li>阈值（Thresholds）是多少</li><li>Target cell如何选择</li></ul><p><strong>切换过程如下：</strong></p><ol><li>终端移动到Cell边界，呼号信号（Call signal）下降到最小阈值，此时终端通知网络（network）。</li><li>网络在相邻基站上找到一个未使用的信道，并将其信息发送给终端</li><li>终端切换到新的信道</li></ol><p>这当中可能遇到：</p><ul><li>相邻基站满载(full capacity)：连接会被中断，因为没有可用的信道提供切换</li><li>Handover期间连接可能丢失：如果在第一个基站将它交移之前相邻基站没有对通信（call）进行锁定，则会丢失。</li></ul><p><strong>软切换的概念和优点</strong></p><p>如果是先断开和原基站的连接，再建立和新基站的连接，则称为硬切换。软切换类似于硬交接，只不过第一个基站不会先断开连接，而是等第二个基站确认已经连接之后再断开。</p><p>它带来的优点有：</p><ul><li>提升cell边缘的性能</li><li>通话中掉线数量减少</li></ul><h2 id="GSM（Global-System-for-Mobile-Communication）"><a href="#GSM（Global-System-for-Mobile-Communication）" class="headerlink" title="GSM（Global System for Mobile Communication）"></a>GSM（Global System for Mobile Communication）</h2><p>GSM规定网络架构如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624131044840.png" alt="image-20240624131044840" style="zoom:80%;" /></p><ul><li><strong>移动台/移动用户（Mobile Station MS）：</strong>用户使用的设备。包括移动设备ME和SIM卡，SIM卡存储了认证用户身份所需的所有信息以及与安全保密有关的重要信息。</li><li><strong>基站收发信机（base transceiver station BTS）:</strong>基站收发信机，负责无线信号的收发。</li><li><strong>基站控制器 (base station controller BSC)：</strong>处理所有的与无线信号有关的工作：小区的切换、无线资源管理等。</li><li><strong>转码器和速率适配单元 (transcoder and rate adaption unit TRAU)：</strong>执行转码和速率适配功能，它支持不同编解码器之间的语音通信，从而实现互操作性。</li><li><strong>移动交换中心(mobile switching center MSC)：</strong>它完成最基本的交换功能。能自动无线登记进程跟踪本系统内所有的无线用户，并能不断地监视与之相连的所有蜂窝基站的运行情况。</li><li><strong>归属位置寄存器(home location register HLR)：</strong>当用户选择一个网络运营商并购买了SIM卡之后，其相关的很多信息就被录入了HLR系统当中。HLR中记录了用户所有的原始开户信息，且不会因为用户从北京跑到了上海而将其号码和签约信息进行删除。</li><li><strong>拜访位置寄存器(visitor location register VLR)：</strong>保存用户的动态信息和状态信息，以及从HLR下载的用户的签约信息。例如当你到上海之后，手机会自动向上海的VLR发起位置更新（登记），上海的VLR会将你现在的位置报告到北京的HLR。当他人呼你时，交换机首先向HLR查询你现在所在的位置，然后就可以呼到你了。</li><li><strong>设备标识寄存器（Equipment Identity Register EIR）</strong>：手机用户发起呼叫，MSC和VLR向手机请求IMEI，并把它发送给EIR，EIR将收到的IMEI与白、黑、灰三种表进行比较，把结果发送给MSC/VLR，以便MSC/VLR决定是否允许该移动台设备进入网络。</li><li><strong>鉴权中心（Authentication Center AC）：</strong>负责用户的身份验证和加密所有无线通讯(语音、短信等)</li><li><strong>短信服务中心（Short Message Service Center）和语音邮件系统（Voice Mail System）：</strong>分别负责短信的存储和转发、语音邮件服务。</li><li><strong>公共交换电话网络(public switched telephone network PSTN)</strong>：一种以模拟技术为基础的电路交换网络，出现在GSM内是用于连接GSM网络与传统的固定电话网络。</li></ul><p>这个系统可以被分为数个子系统：</p><p><strong>RSS(radio system)</strong>：包含MS、BTS、BSC（BTS和BSC可以总称为BaseStation Subsystem，BSS）和TRAU。负责无线通信和信号处理。</p><p><strong>NSS(network and switching subsystem)：</strong>包含MSC、HLR、VLR、 AC、EIR、SMSC、VMS，负责交换、移动性管理、与其他网络的互连、系统控制等。</p><p><strong>OSS(operation subsystem)</strong>：如上图</p><hr><h1 id="CH4-Part2-3G-amp-4G"><a href="#CH4-Part2-3G-amp-4G" class="headerlink" title="CH4-Part2-3G&amp;4G"></a>CH4-Part2-3G&amp;4G</h1><h2 id="UMTS（Universal-Mobile-Telecommunications-System）"><a href="#UMTS（Universal-Mobile-Telecommunications-System）" class="headerlink" title="UMTS（Universal Mobile Telecommunications System）"></a>UMTS（Universal Mobile Telecommunications System）</h2><p>UMTS最初的规范是”Release 99”版本，下面介绍的都是”Release 99”。</p><h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><p>UMTS系统分为多个域，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624134904234.png" alt="image-20240624134904234"></p><p><strong>用户设备域（User Equipment Domain）</strong></p><ul><li><strong>Universal Subscriber Identity Module (USIM)</strong>：模块位于移动设备SIM卡内。负责用户鉴权（authentication）和通信加密（encryption）。</li><li><strong>Mobile Equipment Domain</strong>：用于发射无线电波、建立和用户的连接。ME（Mobile Equipment）里面包含TE（Terminal Equipment）和MT（Mobile Terminal）</li></ul><p><strong>基础设施域(Infrastructure Domain)</strong></p><ul><li><p><strong>Access Network Domain（UTRAN）：</strong>提供接入网的相关功能，管理接入网资源，为用户提供访问核心网域机制。</p></li><li><p><strong>Core Network Domain：</strong>由为网络功能和电信服务提供支持的设备组成：即管理用户位置信息、控制网络功能</p><ul><li><p><strong>Serving Network Domain：</strong></p><ul><li><p>服务网络是核心网络的一部分，负责处理用户设备（UE）的连接和服务。</p></li><li><p>Represent the core network functions that are local to user’s access point, thus, their location changes when the user moves. (Dependent on user location)</p></li><li><p>Responsible for routing calls and transport user data/information from source to destination</p></li></ul></li><li><p><strong>Home Network Domain</strong>：</p><ul><li>Location and access network independent functions</li><li>The USIM is related by subscription to the home network domain</li><li>Home network domain contains permanently user specific data and is responsible for management of subscription information</li><li>May also handle some services, potentially not offered by the serving network domain.</li></ul></li><li><p><strong>Transit Network Domain</strong>：</p><ul><li>Domain between Serving Network and remote party</li><li>If, for a given call, the remote party is located inside the same network as the originating User Equipment (UE), then no particular instance of the transit domain is activate</li></ul></li></ul></li></ul><h3 id="UTRAN"><a href="#UTRAN" class="headerlink" title="UTRAN"></a>UTRAN</h3><p>在3G网络中，接入网部分叫做UTRAN（UMTS Terrestrial Radio Access Network，UMTS陆地无线接入网）</p><ol><li><strong>接纳控制（Admission Control）</strong>：用于有选择地将呼叫接入系统，以最小化呼叫丢失和呼叫阻塞。</li><li><strong>拥塞控制（Congestion Control）</strong>：如果某个拥塞阈值被长时间超过，将标记单元为拥塞状态。</li><li><strong>系统信息广播（System Information Broadcasting）</strong>：用于维护用户设备（UE）与UTRAN之间的无线连接，并控制UTRAN。</li><li><strong>无线信道加密（Radio Channel Encryption）</strong>：例如，用于保护用户流量和敏感信令数据免受窃听。</li><li><strong>切换（Handover）</strong>：将用户连接从一个无线信道转移到另一个信道。</li><li><strong>服务无线网络子系统（SRNS）的移动/重定位</strong>：从服务无线网络子系统（SRNS）控制权转移到另一个无线网络子系统（RNS）。</li><li><strong>无线网络配置/规划</strong></li><li><strong>信道质量测量</strong>：用于Handover</li><li><strong>宏多样性（Macro diversity）</strong>：指的是多个无线链路同时处于活动状态，例如软切换（soft handover）。</li><li><strong>无线资源控制（Radio Resource Control，RRC）</strong>：执行连接建立和释放、系统信息广播、无线承载建立/重配置和释放、RRC连接移动过程、寻呼通知和释放、外环功率控制等功能。</li><li><strong>无线接口上的数据传输</strong></li><li><strong>外环功率控制（FDD和TDD）</strong>：UE（用户设备）能够将其输出功率设置为特定值。在UE接入网络时，用于设置初始上行和下行传输功率。</li><li><strong>内环功率控制（也称为快速闭环功率控制）</strong>：在上行链路中，UE发射机根据接收到的一个或多个下行传输功率控制命令来调整其输出功率，以保持所需的上行信号干扰比（SIR）。</li><li><strong>信道编码</strong>：提供减轻由无线信道传播引起的错误的机制。</li><li><strong>接入控制</strong>：提供medium access control scheme</li></ol><h3 id="UMTS信道"><a href="#UMTS信道" class="headerlink" title="UMTS信道"></a>UMTS信道</h3><p>UMTS将信道定义为三种类型：</p><ul><li><strong>逻辑信道(Logical channel)：</strong>定义所传输数据的类型。（控制信息，业务信息）</li><li>传输信道（Transport Channel）：定义物理层用何种方式传输数据 以及传输哪些数据</li><li>物理信道(Physical channel)：真正的射频信道，具有射频物理特征</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624151516163.png" alt="image-20240624151516163" style="zoom:50%;" /></p><h3 id="UMTS的三种切换类型"><a href="#UMTS的三种切换类型" class="headerlink" title="UMTS的三种切换类型"></a>UMTS的三种切换类型</h3><ol><li><strong>Intra RNC 软切换：</strong>不同RNC下提供软切换。如下图1，SRNC(Service RNC) 是当前服务.DRNC(Drift RNC) 是候选RNC，是即将切换过去的</li><li><strong>intra Node B 软切换：</strong>在同一个RNC控制下，在不同基站间交移提供软切换</li><li><strong>硬切换：</strong>在不同核心网之间的切换，是硬切换。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240624145401847.png" alt="image-20240624145401847" style="zoom:67%;" /></p><h3 id="HSDPA"><a href="#HSDPA" class="headerlink" title="HSDPA"></a>HSDPA</h3><p>HSDPA（高速下行分组接入，High-Speed Downlink Packet Access）旨在增强第三代（3G）移动网络的数据传输能力。</p><p><strong>它的主要特点是：</strong></p><ol><li>自适应信道编码（Adaptive Modulation and Coding），有QPSK和16QAM</li><li>混合自动重复请求(Hybrid Automatic Repeat Request HARQ)</li><li>基站（Node B）快速分组调度(Fast packet scheduling)</li><li>短帧大小（Short frame size）</li></ol><p><strong>优点：</strong></p><ol><li>更高的处理效率</li><li>由更快的纠错带来的更低延迟</li><li>更高效的资源管理</li><li>对环境有自适应能力</li><li>Handover失败率更低</li></ol><h2 id="LTE（long-term-evolution）"><a href="#LTE（long-term-evolution）" class="headerlink" title="LTE（long term evolution）"></a>LTE（long term evolution）</h2><p>LTE 是电信中用于手机及数据终端的高速无线通信标准.</p><ul><li>它在下行链路中使用OFDM</li><li>在上行链路中使用SC-FDMA（Single Carrier FDMA），利用单载波调制和正交频分复用，在发射机中使用 DFT 扩频，在接收机中使用频域均衡</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 移动通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年1-4月口语题库</title>
      <link href="/posts/51012.html"/>
      <url>/posts/51012.html</url>
      
        <content type="html"><![CDATA[<h1 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h1><h2 id="必考题"><a href="#必考题" class="headerlink" title="必考题"></a>必考题</h2><hr><h3 id="work-or-study"><a href="#work-or-study" class="headerlink" title="work or study"></a>work or study</h3><ol><li>What subjects are you studying?</li><li>Do you like your subject?</li><li>Why did you choose to study that subject?</li><li>Do you think that your subject is popular in your country?</li><li>Do you have any plans for your studies in the next five years?</li><li>What are the benefits of being your age?</li><li>Do you want to change your major?</li><li>Do you prefer to study in the mornings or in the afternoons?</li><li>How much time do you spend on your studies each week?</li><li>Are you looking forward to working?</li><li>What technology do you use when you study?</li><li>What changes would you like to see in your school?</li><li>What work do you do?</li><li>Why did you choose to do that type of work (or that job)?</li><li>Do you like your job?</li><li>What requirements did you need to meet to get your current job?</li><li>Do you have any plans for your work in the next five years?</li><li>What do you think is the most important at the moment?</li><li>Do you want to change to another job?</li><li>Do you miss being a student?</li><li>What technology do you use at work?</li><li>Who helps you the most? And how?</li><li>Do you like chatting with friends?</li></ol><hr><h3 id="hometown"><a href="#hometown" class="headerlink" title="hometown"></a>hometown</h3><ol><li>Where is your hometown?</li><li>Is that a big city or a small place?</li><li>Please describe your hometown a little.</li><li>How long have you been living there?</li><li>Do you think you will continue living there for a long time?</li><li>Do you like your hometown?</li><li>Do you like living there?</li><li>What do you like (most) about your hometown?</li><li>Is there anything you dislike about it?</li><li>What’s your hometown famous for?</li><li>Did you learn about the history of your hometown at school?</li><li>Are there many young people in your hometown?</li><li>Is your hometown a good place for young people to pursue their careers?</li></ol><hr><h3 id="Home-amp-Accommodation"><a href="#Home-amp-Accommodation" class="headerlink" title="Home &amp; Accommodation"></a>Home &amp; Accommodation</h3><ol><li>What kind of house or apartment do you want to live in in the future?</li><li>Are the transport facilities to your home very good?</li><li>Do you prefer living in a house or an apartment?</li><li>Please describe the room you live in.</li><li>What part of your home do you like the most?</li><li>How long have you lived there?</li><li>Do you plan to live there for a long time?</li><li>What’s the difference between where you are living now and where you have lived in the past?</li><li>Can you describe the place where you live?</li><li>What room does your family spend most of the time in?</li><li>What’s your favorite room in your apartment or house?</li><li>What makes you feel pleasant in your home?</li><li>Do you think it is important to live in a comfortable environment?</li><li>Do you live in an apartment or a house?</li><li>Who do you live with?</li><li>What do you usually do in your apartment?</li><li>What kinds of accommodation do you live in?</li></ol><hr><h2 id="新题"><a href="#新题" class="headerlink" title="新题"></a>新题</h2><ol><li><strong>Is there an advertisement that made an impression on you when you were a child?</strong></li><li><strong>Do you see a lot of advertising on trains or other transport?</strong></li><li><strong>Do you like advertisements?</strong></li><li><strong>What kind of advertising do you like?</strong></li><li><strong>Do you like to eat cakes or other sweet foods?</strong></li><li><strong>Did you like to eat cakes as a child?</strong></li><li><strong>Can you make cakes?</strong></li><li><strong>Are there any traditional Chinese cakes?</strong></li><li><strong>Do you like to have some desserts after meals?</strong></li><li>Do you collect things?</li><li>Are there any things you keep from childhood?</li><li>Would you keep old things for a long time? Why?</li><li>Where do you usually keep things you need?</li><li><strong>What’s your favorite colour?</strong></li><li><strong>What’s the colour you dislike? Why?</strong></li><li><strong>What colours do your friends like most?</strong></li><li><strong>What colour makes you uncomfortable in your room?</strong></li><li><strong>Is the city where you live crowded?</strong></li><li><strong>Is there a crowded place near where you live?</strong></li><li><strong>Do you like crowded places?</strong></li><li><strong>Do most people like crowded places?</strong></li><li><strong>When was the last time you were in a crowded place?</strong></li><li><strong>Do you often feel bored?</strong></li><li><strong>When would you feel bored?</strong></li><li><strong>What do you do when you feel bored?</strong></li><li><strong>Do you think childhood is boring or adulthood is boring?</strong></li><li><strong>Are you good at memorising things?</strong></li><li><strong>Have you ever forgotten something important?</strong></li><li><strong>What do you need to remember in your daily life?</strong></li><li><strong>How do you remember important things?</strong></li><li><strong>Do you prefer to save money or spend money?</strong></li><li><strong>How do you save money?</strong></li><li><strong>What do you think about payment apps or mobile payments?</strong></li><li><strong>Do you use a credit card to buy things?</strong></li><li><strong>Do you think cash will still be popular in the future?</strong></li><li><strong>Who is your favourite celebrity in your country?</strong></li><li><strong>What kind of famous people do you often see in the news?</strong></li><li><strong>Do you pay attention to famous people in the news?</strong></li><li><strong>Do you believe that the news about famous people in the media is true?</strong></li><li><strong>Would you like to be a famous person in the news?</strong></li><li><strong>Do you like singing? Why?</strong></li><li><strong>Have you ever learnt how to sing?</strong></li><li><strong>Who do you want to sing for?</strong></li><li><strong>Do you think singing can bring happiness to people?</strong></li><li><strong>When did you start using social media?</strong></li><li><strong>Do you think you spend too much time on social media?</strong></li><li><strong>Do your friends use social media?</strong></li><li><strong>What do people often do on social media?</strong></li><li><strong>Do you often wear sunglasses?</strong></li><li><strong>Do you spend a lot of money on sunglasses?</strong></li><li><strong>Do you give sunglasses as gifts?</strong></li><li><strong>Have you ever lost your sunglasses?</strong></li><li><strong>Do you play video games?</strong></li><li><strong>Would you watch others play video games?</strong></li><li><strong>Do you think people spend too much time playing video games?</strong></li><li><strong>Do you prefer playing video games alone or with others?</strong></li></ol><h2 id="老题"><a href="#老题" class="headerlink" title="老题"></a>老题</h2><ol><li>What kind of house or apartment do you want to live in in the future?</li><li>Are the transport facilities to your home very good?</li><li>Do you prefer living in a house or an apartment?</li><li>Please describe the room you live in.</li><li>What part of your home do you like the most?</li><li>How long have you lived there?</li><li>Do you plan to live there for a long time?</li><li>What’s the difference between where you are living now and where you have lived in the past?</li><li>Can you describe the place where you live?</li><li>What room does your family spend most of the time in?</li><li>What’s your favorite room in your apartment or house?</li><li>What makes you feel pleasant in your home?</li><li>Do you think it is important to live in a comfortable environment?</li><li>Do you live in an apartment or a house?</li><li>Who do you live with?</li><li>What do you usually do in your apartment?</li><li>What kinds of accommodation do you live in?</li><li>Do you like the area that you live in?</li><li>Where do you like to go in that area?</li><li>Do you know any famous people in your area?</li><li>What are some changes in the area recently?</li><li>Do you know any of your neighbours?</li><li>What do you usually chat about with friends?</li><li>Do you prefer to chat with a group of people or with only one friend?</li><li>Do you prefer to communicate face-to-face or via social media?</li><li>Do you argue with friends?</li><li><strong>What kind of clothes do you like to wear?</strong></li><li><strong>Do you prefer to wear comfortable and casual clothes or smart clothes?</strong></li><li><strong>Do you like wearing T-shirts?</strong></li><li><strong>Do you spend a lot of time choosing clothes?</strong></li><li>What films do you like?</li><li>Did you often watch films when you were a child?</li><li>Did you ever go to the cinema alone as a child?</li><li>Do you often go to the cinema with your friends?</li><li>Do you think going to the cinema is a good way to spend time with friends?</li><li>Is fishing popular in your country?</li><li>Do you like eating fish?</li><li>Have you ever been to a place where there are lots of fish around you?</li><li>Have you seen any movies with lots of fish?</li><li>How do you like geography?</li><li>Do you think geography is useful?</li><li>Have you ever learned geography?</li><li>Do you want to be a geography teacher?</li><li>Will you learn more about the geography of other countries?</li><li>Have you ever sent handmade gifts to others?</li><li>Have you ever received a great gift?</li><li>What do you consider when choosing a gift?</li><li>Do you think you are good at choosing gifts?</li><li>What gift have you received recently?</li><li>Do you usually help people around you?</li><li>How do you help people around you, such as neighbours, family and friends?</li><li>Do your parents teach you how to help others?</li><li>Did your parents help you a lot when you were young?</li><li>What have you done to help the elderly?</li><li><strong>Do you often use maps?</strong></li><li><strong>Do you use paper maps?</strong></li><li><strong>How often do you use maps on your phone?</strong></li><li><strong>Do you have maps at home?</strong></li><li><strong>When was the last time you used a map?</strong></li><li><strong>Have you ever learned to play a musical instrument?</strong></li><li><strong>What musical instruments do you enjoy listening to the most?</strong></li><li><strong>Do you think children should learn to play an instrument at school?</strong></li><li><strong>Do you think music education is important to children?</strong></li><li><strong>Do a lot of people like music?</strong></li><li><strong>Do schools in your country have music lessons?</strong></li><li>Do you like to stay in a place with a lot of noise?</li><li>What kinds of noises are there in the area where you live?</li><li>Do you want to move to a quieter place?</li><li>Do you think there is too much noise in today’s world?</li><li>Is making noise one of people’s rights?</li><li>Are robots important?</li><li>Would robots affect people’s lives?</li><li>Have you ever watched a movie about robots?</li><li>Should we let a robot drive for us for long journeys?</li><li>What can robots do for you at home?</li><li>Do you go running a lot?</li><li>Where do you usually go running?</li><li>When was the last time you went running?</li><li>What do you think of running as a sport?</li><li>Do people like tea and coffee nowadays?</li><li>Do you prefer to use tea or coffee to serve your guests?</li><li>When was the last time you had a cup of coffee or tea?</li><li>Do you usually buy your coffee in a coffee shop?</li><li>Do you enjoy inviting friends to your home for tea or coffee?</li><li>How do you go to work/school?</li><li>What’s the most popular means of transportation in your hometown?</li><li>How far is it from your home to work/school?</li><li>Do you think people will drive more in the future?</li><li><strong>Do you like travelling?</strong></li><li><strong>How often do you go travelling?</strong></li><li><strong>Where do you usually travel?</strong></li><li><strong>How do you feel when you are travelling?</strong></li></ol><h1 id="Part2-amp-Part3"><a href="#Part2-amp-Part3" class="headerlink" title="Part2&amp;Part3"></a>Part2&amp;Part3</h1><h2 id="帮助他人"><a href="#帮助他人" class="headerlink" title="帮助他人"></a>帮助他人</h2><h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time when you helped someone You should say:</p><ul><li><p>Where you helped him/her Why you helped</p></li><li><p>How you helped</p></li><li><p>And explain how you felt about it</p></li></ul><h3 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h3><ol><li><p>Should people be very kind when they help others?</p></li><li><p>Should children be taught to be kind to others?</p></li><li><p>Should parents help their kids with their homework?</p></li><li><p>What kind of advice should parents give to their children?</p></li><li><p>Should parents give children advice? Why?</p></li><li><p>Can kids provide any help to parents?</p></li></ol><hr><h2 id="不喜欢做的工作"><a href="#不喜欢做的工作" class="headerlink" title="不喜欢做的工作"></a>不喜欢做的工作</h2><h3 id="Part2-1"><a href="#Part2-1" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a job that youwould not like to do in the future</p><ul><li><p>You should say: What it is</p></li><li><p>How you know about the job Whether the job is difficult or not</p></li><li><p>And explain why you would not like to do it</p></li></ul><h3 id="Part3-1"><a href="#Part3-1" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What kind of jobs do young Chinese people like to do?</li><li>Do youn,g Chinese  people prefer to choose an interesting job or a job  with a high salary?</li><li>Do you think it is easier to get a job now than in the past?</li><li>Is it important to be successful in a job?</li><li>Do you think Al will take over many jobs?</li><li>Can Al improve people’s lives? If so, how?</li></ol><hr><h2 id="不寻常假期"><a href="#不寻常假期" class="headerlink" title="不寻常假期"></a>不寻常假期</h2><h3 id="Part2-2"><a href="#Part2-2" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an unusual holiday/vacation you had You should say:</p><ul><li><p>When and where you went Who you went with</p></li><li><p>What you did there</p></li><li><p>And explain why it was unusual</p></li></ul><h3 id="Part3-2"><a href="#Part3-2" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do you think people in your country have long enough holidays?</li><li>Which holidays are popular in your country?</li><li>Are there any popular places for holidays in your country?</li><li>What are the differences between old and young people when spending their holidays?</li><li>Do you think having holidays help people learn other countries’ cultures?</li><li>Why do some people dislike holidays?</li></ol><hr><h2 id="超有共鸣的电影"><a href="#超有共鸣的电影" class="headerlink" title="超有共鸣的电影"></a>超有共鸣的电影</h2><h3 id="Pat2"><a href="#Pat2" class="headerlink" title="Pat2"></a>Pat2</h3><p>Describe a movie/film that youfelt strongly about You should say:</p><ul><li><p>What it is about When you watched it Where you watched it</p></li><li><p>And explain why you felt strongly about it</p></li></ul><h3 id="Pat3"><a href="#Pat3" class="headerlink" title="Pat3"></a>Pat3</h3><ol><li>Do most people prefer to watch movies at home or in a cinema? Why?</li><li>What are the advantages of going to the cinema with friends?</li><li>Is going to the cinema still popular?</li><li>What kind of movies do you think need to be seen in the cinema to be fully appreciated?</li><li>What can cinemas do to attract more audiences?</li><li>Do you think people can learn new cultures through movies?</li></ol><hr><h2 id="给力队友"><a href="#给力队友" class="headerlink" title="给力队友"></a>给力队友</h2><h3 id="Part2-3"><a href="#Part2-3" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time when someone who did quite well in a team (e.g. schoolwork or a community)</p><ul><li><p>You should say: Who this person is</p></li><li><p>When you worked together What he/she did in the team</p></li><li><p>And explain why you think he/she was a great team player</p></li></ul><h3 id="Part3-3"><a href="#Part3-3" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What qualities should a leader have?</li><li>What should people do without a good team leader?</li><li>Does a team’s best player make a good leader?</li><li>Why do some people dislike teamwork?</li><li>Do you think young people are good team players?</li><li>What are the advantages of working as part of a team?</li></ol><hr><h2 id="家中重要物品"><a href="#家中重要物品" class="headerlink" title="家中重要物品"></a>家中重要物品</h2><h3 id="Part2-4"><a href="#Part2-4" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a useful object in your home that you cannot live without</p><ul><li><p>You should say: What it is</p></li><li><p>How long you have had it What you can do with it How often you use it</p></li><li><p>And explain why you cannot live without it</p></li></ul><h3 id="Part3-4"><a href="#Part3-4" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What equipment do you find difficult to use?</li><li>What can you do with a laptop?</li><li>What are the benefits of using technology in the workplace?</li><li>Why do some people in the workplace dislike technology?</li><li>Why do people buy a lot of household appliances?</li><li>What do people often do with electronic devices?</li></ol><hr><h2 id="捡到失物"><a href="#捡到失物" class="headerlink" title="捡到失物"></a>捡到失物</h2><h3 id="Part2-5"><a href="#Part2-5" class="headerlink" title="Part2"></a>Part2</h3><p>Please describe a time when you picked up an item that someone else lost</p><ul><li><p>You should say: What the item was</p></li><li><p>When and where you found it What you did after finding it</p></li><li><p>And explain how you felt about the experience</p></li></ul><h3 id="Part3-5"><a href="#Part3-5" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What kind of people tend to lose things more often than others?</li><li>What kind of things do people often lose?</li><li>Why do some people find lost things easier than others?</li><li>What do you think are the reasons why some people pick up lost things and don’t give them back?</li><li>Should parents teach their children to return things lost by others?</li><li>Why do some people enjoy collecting antiques or second- hand items?</li></ol><hr><h2 id="改善的公共设施"><a href="#改善的公共设施" class="headerlink" title="改善的公共设施"></a>改善的公共设施</h2><h3 id="Part2-6"><a href="#Part2-6" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a public facility (e.g. a museum, a library) that has been renovated and improved</p><ul><li><p>You should say: What the facility is</p></li><li><p>When it was renovated and improved</p></li><li><p>What has been renovated and improved And explain how you feel about it</p></li></ul><h3 id="Part3-6"><a href="#Part3-6" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What are the benefits of public facilities?</li><li>Why are some public transport methods popular, such as the subway?</li><li>Why are some public transport methods unpopular?</li><li>What kind of transport do young people and old people prefer?</li><li>Do you think people would feel happier when they are in a park or a coffee shop? Why?</li><li>Is a public park necessary in every area? Why?</li></ol><hr><h2 id="能说会道的人"><a href="#能说会道的人" class="headerlink" title="能说会道的人"></a>能说会道的人</h2><h3 id="Part2-7"><a href="#Part2-7" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a person you know who likes to talk a lot You should say:</p><ul><li><p>Who this person is</p></li><li><p>How you knew this person What he/she usually talks about</p></li><li><p>And explain how you felt about him/her</p></li></ul><h3 id="Part3-7"><a href="#Part3-7" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What communication skills does a talkative person have?</li><li>Is it good to be talkative?</li><li>How should parents encourage their children to talk more?</li><li>How should people encourage children to express themselves when being asked questions that they are afraid to answer?</li><li>On what occasion do you think a child should talk less than usual?</li><li>What jobs need employees to be talkative?</li></ol><hr><h2 id="年少学艺"><a href="#年少学艺" class="headerlink" title="年少学艺"></a>年少学艺</h2><h3 id="Part2-8"><a href="#Part2-8" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a useful skill that youlearned as a teenager</p><ul><li><p>You should say: What the skill is</p></li><li><p>When and how you learned it Who you learned it from Why you learned it</p></li><li><p>And explain how you felt about learning it</p></li></ul><h3 id="Part3-8"><a href="#Part3-8" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Where do children learn skills in your country?</li><li>What are the differences between learning skills on your own and from others?</li><li>What important skills should a child learn?</li><li>What skills do you think teenagers should have?</li><li>Who should teach teenagers skills?</li><li>What are the differences between children learning skills and adults learning skills?</li></ol><hr><h2 id="想去放松之地"><a href="#想去放松之地" class="headerlink" title="想去放松之地"></a>想去放松之地</h2><h3 id="Part2-9"><a href="#Part2-9" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a place you would like to go to relax You should say:</p><ul><li><p>Where it is</p></li><li><p>When you would like to go there What you would do there</p></li><li><p>And explain why you would like to go to this place to relax</p></li></ul><h3 id="Part3-9"><a href="#Part3-9" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do people have enough places to relax in your country?</li><li>What do people usually do when they are relaxed?</li><li>Is physical activity good for relaxation?</li><li>Do you think that spending time in front of a screen helps people relax?</li><li>Do people have to spend a lot of money to relax?</li><li>Do people nowadays have more ways to relax than in the past?</li></ol><hr><h2 id="小学活动"><a href="#小学活动" class="headerlink" title="小学活动"></a>小学活动</h2><h3 id="Part2-10"><a href="#Part2-10" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an interesting activity that youremember enjoying most in your primary school</p><ul><li><p>You should say:</p></li><li><p>What the activity was</p></li><li><p>How often you did the activity Who you did it with</p></li><li><p>And explain why you enjoyed doing it</p></li></ul><h3 id="Part3-10"><a href="#Part3-10" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What activities do children often do in your country?</li><li>At what time do children often have activities?</li><li>What are the differences between activities at home and at school?</li><li>Why do some people like to participate in activities?</li><li>What activities do people do in their free time?</li><li>Does technology affect children’s activities? If so, how?</li></ol><hr><h2 id="一次非常忙碌的经历"><a href="#一次非常忙碌的经历" class="headerlink" title="一次非常忙碌的经历"></a>一次非常忙碌的经历</h2><h3 id="Part2-11"><a href="#Part2-11" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time you were very busy You should say:</p><ul><li><p>When it happened Where you were What you did</p></li><li><p>And explain why you were busy</p></li></ul><h3 id="Part3-11"><a href="#Part3-11" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Are you often busy?</li><li>What are the advantages and disadvantages when people keep busy?</li><li>Do you think children should learn through playing games or under pressure?</li><li>What kind of pressure people may experience at work?</li><li>How does technology help with time management?</li><li>Does technology distract people?</li></ol><hr><h2 id="长久目标"><a href="#长久目标" class="headerlink" title="长久目标"></a>长久目标</h2><h3 id="Part2-12"><a href="#Part2-12" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a long- term goal you would like to achieve</p><ul><li><p>You should say:</p></li><li><p>How long you have had this goal What the goal is</p></li><li><p>How you will achieve it</p></li><li><p>And explain why you set this goal</p></li></ul><h3 id="Part3-12"><a href="#Part3-12" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What goals should a society have?</li><li>Do people need to have goals?</li><li>What goals do people at your age have?</li><li>Is it necessary to give advice to children?</li><li>What goals do young people usually have?</li><li>What should people do to achieve their goals?</li></ol><hr><h2 id="制服"><a href="#制服" class="headerlink" title="制服"></a>制服</h2><h3 id="Part2-13"><a href="#Part2-13" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a uniform you wear (e.g. at school, at work)</p><ul><li><p>You should say:</p></li><li><p>Where you wear the uniform How long you need to wear it What it looks like</p></li><li><p>Who bought it for you</p></li><li><p>And explain how you feel about it</p></li></ul><h3 id="Part3-13"><a href="#Part3-13" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Why should students wear uniforms?</li><li>Why should people at work wear uniforms?</li><li>What are the advantages and disadvantages of wearing a uniform?</li><li>Can people tell a person’s personality by his or her clothes?</li><li>On what occasion sho uld people wear uniforms?</li><li>Should companies ask for employees’opinions about the design of uniforms?</li></ol><hr><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><h3 id="Part2-14"><a href="#Part2-14" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an occasion when you used a map (e.g. a paper map, an electronic map) that was useful You should say:</p><ul><li><p>When and where you used the map What it was like</p></li><li><p>How useful it was Why you used it</p></li><li><p>And explain how you felt about the experience</p></li></ul><h3 id="Part3-14"><a href="#Part3-14" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What do people usually do when they get lost?</li><li>What are the differences between paper and digital maps?</li><li>What do you think of in- car GPS navigation systems?</li><li>What do people often do with a map?</li><li>Why do most people prefer to use a paper map?</li><li>How does learning to read a map help you learn more about your country?</li></ol><hr><h2 id="对学习工作有助的事情"><a href="#对学习工作有助的事情" class="headerlink" title="对学习工作有助的事情"></a>对学习工作有助的事情</h2><h3 id="Part2-15"><a href="#Part2-15" class="headerlink" title="Part2"></a>Part2</h3><p>Describe something you do to help you study or work</p><ul><li><p>You should say: What it is</p></li><li><p>How you learn it When you do it</p></li><li><p>And how you feel about the method</p></li></ul><h3 id="Part3-15"><a href="#Part3-15" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do you think everyone’s routine is different?</li><li>Which jobs need a morning routine?</li><li>Is a daily routine important?</li><li>How do people organize their routines after getting up in the morning and after work?</li><li>Do you think children need to have a routine too?</li><li>Do you think routine is important for companies?</li></ol><hr><h2 id="好客之人"><a href="#好客之人" class="headerlink" title="好客之人"></a>好客之人</h2><h3 id="Part2-16"><a href="#Part2-16" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a person who is good at making people feel welcome in his/her home</p><ul><li><p>You should say: Who this person is</p></li><li><p>How you knew him/her</p></li><li><p>How he/she makes you feel welcome</p></li><li><p>And explain why you think he/she is good at making people feel welcome</p></li></ul><h3 id="Part3-16"><a href="#Part3-16" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do people in your country often invite others to their homes? Why?</li><li>What do you think of serving food to visitors?</li><li>What kind of people do you think are more likely to invite others to their homes?</li><li>Who are more likely to invite others to their homes, people in the countryside or people in the city?</li><li>Are tourist attractions in the countryside more popular than those in the cities?</li><li>What facilities are there in the tourist attractions in your country?</li></ol><hr><h2 id="和老人的有趣谈话"><a href="#和老人的有趣谈话" class="headerlink" title="和老人的有趣谈话"></a>和老人的有趣谈话</h2><h3 id="Part2-17"><a href="#Part2-17" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an interesting conversation you had with a very old person</p><ul><li><p>You should say: Who this person is</p></li><li><p>When and where you had the conversation What you talked about</p></li><li><p>And explain why you think it was interesting</p></li></ul><h3 id="Part3-17"><a href="#Part3-17" class="headerlink" title="Part3"></a>Part3</h3><ol><li>How do people have a conversation with an elderly person?</li><li>What can young people learn from old people?</li><li>Do you think old people can work better than young people?</li><li>What are the advantages of having people of different ages living in the same house?</li><li>Has old people’s life quality improved when compared to the past?</li><li>Do old people share the same interest with young people?</li></ol><hr><h2 id="户外活动"><a href="#户外活动" class="headerlink" title="户外活动"></a>户外活动</h2><h3 id="Part2-18"><a href="#Part2-18" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an outdoor activity you did You should say:</p><ul><li><p>What the activity was When and where you did it Who you did it with</p></li><li><p>And explain why you enjoyed it</p></li></ul><h3 id="Part3-18"><a href="#Part3-18" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Is having outdoor activities important to people?</li><li>Do people go outdoors more or less now than in the past?</li><li>What can people do outdoors besides exercising?</li><li>When do people usually go outdoors to get close to nature?</li><li>What can people do to get close to nature?</li><li>Do people like doing outdoor activities in the winter time?</li></ol><hr><h2 id="速战速决的事"><a href="#速战速决的事" class="headerlink" title="速战速决的事"></a>速战速决的事</h2><h3 id="Part2-19"><a href="#Part2-19" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time you had to finish something quickly</p><ul><li><p>You should say: What it was</p></li><li><p>When it happened How you finished it</p></li><li><p>Why you had to finish it quickly And explain how you felt about it</p></li></ul><h3 id="Part3-19"><a href="#Part3-19" class="headerlink" title="Part3"></a>Part3</h3><ol><li>On what occasions do people have to do things in a hurry?</li><li>Why do some people spend a long time on having a meal?</li><li>Would people feel more satisfied if they finished doing something quickly?</li><li>What kinds of jobs need to be done quickly?</li><li>What are some examples of work that needs to be done quickly?</li><li>What might make some people more productive than others in completing tasks?</li></ol><hr><h2 id="投诉"><a href="#投诉" class="headerlink" title="投诉"></a>投诉</h2><h3 id="Part2-20"><a href="#Part2-20" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an occasion when you heard someone complaining about something in a restaurant/store or other business places</p><ul><li><p>You should say:</p></li><li><p>When and where it happened What he/she complained about What the result was</p></li><li><p>And explain how you felt about the experience</p></li></ul><h3 id="Part3-20"><a href="#Part3-20" class="headerlink" title="Part3"></a>Part3</h3><ol><li>How do companies train their staff to deal with complaints?</li><li>What do people usually complain about?</li><li>How do most people complain, in writing or by other methods?</li><li>How do people often respond to poor customer service?</li><li>How would you react if you received a poor service at a restaurant?</li><li>Who are more likely to make complaints, older people or younger people?</li></ol><hr><h2 id="延期旅行"><a href="#延期旅行" class="headerlink" title="延期旅行"></a>延期旅行</h2><h3 id="Part2-21"><a href="#Part2-21" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a travel you were looking forward to but was delayed</p><ul><li><p>You should say:</p></li><li><p>Where you planned to travel to Why you were looking forward to it Why it had to be delayed</p></li><li><p>And explain how you felt about the experience</p></li></ul><h3 id="Part3-21"><a href="#Part3-21" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What are the main means of transport in your country?</li><li>What can the government do to improve transport in your country?</li><li>Do you think travelling was better in the past than it is now?</li><li>Do you think that tourist attractions help people learn about new cultures?</li><li>What difficulties do people often face when travelling?</li><li>Do you think technology makes travelling more difficult?</li></ol><hr><h2 id="噪音"><a href="#噪音" class="headerlink" title="噪音"></a>噪音</h2><h3 id="Part2-22"><a href="#Part2-22" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time when some people near you made a lot of noise</p><ul><li><p>You should say:</p></li><li><p>When and where it happened Who made the noise</p></li><li><p>How you reacted to the noise</p></li><li><p>And explain how you felt about the noise</p></li></ul><h3 id="Part3-22"><a href="#Part3-22" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What kinds of places should be noise- free?</li><li>On what occasions do people need to be quiet?</li><li>Can people bring children to these noise- free places?</li><li>Why can’t people make noise in places like libraries and museums?</li><li>What public morals should people follow in your country?</li><li>Do you think we should allow children to make noise in public places?</li></ol><hr><h2 id="街市购物"><a href="#街市购物" class="headerlink" title="街市购物"></a>街市购物</h2><h3 id="Part2-23"><a href="#Part2-23" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time you bought something from a street (or outdoor) market</p><ul><li><p>You should say: When it was</p></li><li><p>Where the market was What you bought</p></li><li><p>And how you felt about it</p></li></ul><h3 id="Part3-23"><a href="#Part3-23" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What kinds of markets are there in China?</li><li>Do you think small markets will disappear in the future?</li><li>Have people1s shopping habits changed in recent years?</li><li>What are the differences between shopping in street markets and big shopping malls?</li><li>Do you think the goods sold at discount stores do not have good values or qualities?</li><li>Why do some people like to buy expensive goods?</li></ol><hr><h2 id="成功商人"><a href="#成功商人" class="headerlink" title="成功商人"></a>成功商人</h2><h3 id="Part2-24"><a href="#Part2-24" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a successful businessperson you know (e.g. running a family business)</p><ul><li><p>You should say: Who this person is</p></li><li><p>How you knew him/her What business he/she does</p></li><li><p>And explain why he/she is successful</p></li></ul><h3 id="Part3-24"><a href="#Part3-24" class="headerlink" title="Part3"></a>Part3</h3><ol><li>What factors lead to success?</li><li>What do people need to sacrifice for success?</li><li>Which is more likely to be successful, family businesses or large corporations?</li><li>Is it easy for a business to be successful without affecting the environment</li><li>Can you provide some examples of family businesses in your country?</li><li>What qualities should be considered when recruiting employees?</li></ol><hr><h2 id="城里的公园或花园"><a href="#城里的公园或花园" class="headerlink" title="城里的公园或花园"></a>城里的公园或花园</h2><h3 id="Part2-25"><a href="#Part2-25" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a park or a garden in your city You should say:</p><ul><li><p>How often you go there Where it is</p></li><li><p>Who you often go there with What it is like</p></li><li><p>And explain why you like to visit it</p></li></ul><h3 id="Part3-25"><a href="#Part3-25" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do young people like to go to parks?</li><li>What do old people like to do in parks?</li><li>What benefits can parks bring to a city?</li><li>What are the benefits of going to the park for young people and old people?</li><li>Why do some people like planting flowers?</li><li>Would you say people should help maintain public parks and gardens?</li></ol><hr><h2 id="等待美好事情"><a href="#等待美好事情" class="headerlink" title="等待美好事情"></a>等待美好事情</h2><h3 id="Part2-26"><a href="#Part2-26" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an occasion when you waited a long time for a nice thing</p><ul><li><p>You should say: When it happened</p></li><li><p>What the nice thing was How long you waited</p></li><li><p>Why you waited for a long time</p></li><li><p>And explain how you felt about the experience</p></li></ul><h3 id="Part3-26"><a href="#Part3-26" class="headerlink" title="Part3"></a>Part3</h3><ol><li>On what occasions do people have to wait for a long time?</li><li>What do people do while waiting?</li><li>Are most people patient while waiting?</li><li>Do you like to wait for a long time? Why?</li><li>Why do most children have difficulties waiting for a long time?</li><li>Do people queue consciously while waiting for the subway train?</li></ol><hr><h3 id="电脑罢工"><a href="#电脑罢工" class="headerlink" title="电脑罢工"></a>电脑罢工</h3><h3 id="Part2-27"><a href="#Part2-27" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time when you had a problem with using the computer</p><ul><li><p>You should say: When it happened Where it happened</p></li><li><p>What the problem was</p></li><li><p>And explain how you solved the problem at last</p></li></ul><h3 id="Part3-27"><a href="#Part3-27" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Why do people often have problems when using new products?</li><li>How do people use digital devices to help them with their studies?</li><li>Do people spend too much time looking at digital screens? Why?</li><li>Do you think that parents should limit the time that their children spend using the mobile phones?</li><li>What do people do with mobile phones?</li><li>What do you think of people who are addicted to playing computers?</li></ol><hr><h2 id="感觉累的活动"><a href="#感觉累的活动" class="headerlink" title="感觉累的活动"></a>感觉累的活动</h2><h3 id="Part2-28"><a href="#Part2-28" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an activity that made you feel tired You should say:</p><ul><li><p>When and where it took place Why you took part in it</p></li><li><p>What the activity was</p></li><li><p>And explain why it made you feel tired</p></li></ul><h3 id="Part3-28"><a href="#Part3-28" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Does studying and learning make people tired today?</li><li>When do people usually feel tired?</li><li>What do you think about striving for learning and striving for sports?</li><li>Do people have fewer holidays now than in the past?</li><li>What are the differences between feeling tired after studying and after exercising?</li><li>How can people solve the problem of old people easily getting tired?</li></ol><hr><h2 id="感兴趣的科学领域"><a href="#感兴趣的科学领域" class="headerlink" title="感兴趣的科学领域"></a>感兴趣的科学领域</h2><h3 id="Part2-29"><a href="#Part2-29" class="headerlink" title="Part2"></a>Part2</h3><p>Describe an area of science (biology, robotics, etc.) that youareinterested in and would like to learn more about</p><ul><li><p>You should say: Which area it is</p></li><li><p>When and where you came to know this area How you get information about this area</p></li><li><p>And explain why you are interested in this area</p></li></ul><h3 id="Part3-29"><a href="#Part3-29" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Why do some children not like learning science at school?</li><li>Is it important to study science at school?</li><li>Which science subject is the most important for children to learn?</li><li><p>Should people continue to study science after graduating from school?</p></li><li><p>How do you get to know about scientific news?</p></li><li>Should scientists explain the research process to the public?</li></ol><hr><h2 id="好的人生变化"><a href="#好的人生变化" class="headerlink" title="好的人生变化"></a>好的人生变化</h2><h3 id="Part2-30"><a href="#Part2-30" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a time that something changed your life in good ways</p><ul><li><p>You should say:</p></li><li><p>When and where it happened What happened</p></li><li><p>How you felt about it</p></li><li><p>And explain how it changed your life in good ways</p></li></ul><h3 id="Part3-30"><a href="#Part3-30" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do you like new things or changes in life?</li><li>Why do some people quit and change jobs?</li><li>How do you adapt to changes in life?</li><li>Who can adapt better to changes, children or adults?</li><li>When things like getting married or moving home happen, what kinds of things would you consider?</li><li>What are the disadvantages when people keep making changes?</li></ol><hr><h2 id="好建议"><a href="#好建议" class="headerlink" title="好建议"></a>好建议</h2><h3 id="Part2-31"><a href="#Part2-31" class="headerlink" title="Part2"></a>Part2</h3><p>Describe a piece of good advice that yougave to someone</p><ul><li><p>You should say:</p></li><li><p>Who you gave the advice to What the advice was</p></li><li><p>Why you gave the advice</p></li><li><p>And explain how he/she followed your advice</p></li></ul><h3 id="Part3-31"><a href="#Part3-31" class="headerlink" title="Part3"></a>Part3</h3><ol><li>Do you think parents should give their children advice?</li><li>Should teachers give students advice?</li><li>Do you think it is necessary for us to listen to friends’advice?</li><li>How do people give young people and old people advice?</li><li>Who are more willing to listen to advice? And who are less willing?</li><li>Have you ever received any advice from professional people, like a doctor, a lawyer or a teacher?</li></ol><hr><h2 id="聚会"><a href="#聚会" class="headerlink" title="聚会"></a>聚会</h2><h3 id="Par2"><a href="#Par2" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a party that you enjoyed You should say:</p><ul><li><p>When and where the party was held Who attended the party</p></li><li><p>What kind of party it was What you did in the party</p></li><li><p>And explain why you enjoyed this party</p></li></ul><h3 id="Part2-32"><a href="#Part2-32" class="headerlink" title="Part2"></a>Part2</h3><ol><li>Why do people like parties?</li><li>Why do some people not like going to parties?</li><li>Do you think those who tend to stay at home are less healthy than those who often attend parties?</li><li>Do you think music and dancing are a must at a party?</li><li>What would you do if you were disturbed by a neighbour’s party?</li><li>What are the differences between holding a party at home and in a public place?</li></ol><hr><h2 id="克服困难而自豪"><a href="#克服困难而自豪" class="headerlink" title="克服困难而自豪"></a>克服困难而自豪</h2><h3 id="Par2-1"><a href="#Par2-1" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a difficult task that youcompleted at work/study that youfelt proud of</p><ul><li><p>You should say: What the task was</p></li><li><p>How you completed it Why the task was diff icult</p></li><li><p>Why you were proud of the completion of the task</p></li></ul><h3 id="Part2-33"><a href="#Part2-33" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What are the things that make people feel proud?</li><li>Do people often feel proud of themselves when they complete a difficult task?</li><li>What challenges do young people face today?</li><li>How do young people handle difficult or challe nging tasks?</li><li>What kinds of rewards do people receive from work?</li><li>What are the most difficultjobs that people do?</li></ol><hr><h2 id="美丽城市"><a href="#美丽城市" class="headerlink" title="美丽城市"></a>美丽城市</h2><h3 id="Par2-2"><a href="#Par2-2" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a beautiful city You should say:</p><ul><li><p>Where the city is</p></li><li><p>How you knew about the city What buildings the city has What it is famous for</p></li><li><p>And explain why you think this city is beautiful</p></li></ul><h3 id="Part2-34"><a href="#Part2-34" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What are the differences between modern towns and modern cities?</li><li>Why do some people like to visit historical sites?</li><li>How can people preserve historic cities and historic buildings?</li><li>Is it the government’s responsibility to preserve historic cities and historic buildings?</li><li>Does historic preservation contradict economic development?</li><li>What do you think will happen to historic places or buildings in the future? Why?</li></ol><hr><h2 id="钦佩的运动员"><a href="#钦佩的运动员" class="headerlink" title="钦佩的运动员"></a>钦佩的运动员</h2><h3 id="Par2-3"><a href="#Par2-3" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a successful sportsperson you admire You should say:</p><p>Who he/she is</p><p>What you know about him/her What he/she is like in real life</p><p>What achievement he/she has made And explain why you admire him/her</p><h3 id="Par3"><a href="#Par3" class="headerlink" title="Par3"></a>Par3</h3><ol><li>Should students have physical education and do sports at school?</li><li>What qualities should an athlete have?</li><li>Is talent important in sports?</li><li>Is it easy to identify children’s talents?</li><li>What is the most popular sport in your country?</li><li>Why are there so few top athletes?</li></ol><hr><h2 id="让你开心的照片"><a href="#让你开心的照片" class="headerlink" title="让你开心的照片"></a>让你开心的照片</h2><h3 id="Par2-4"><a href="#Par2-4" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a photo that makes you feel happy You should say:</p><ul><li><p>When and where you took the photo What the photo is like</p></li><li><p>How often you look at the photo</p></li><li><p>And explain why it makes you feel happy</p></li></ul><h3 id="Part2-35"><a href="#Part2-35" class="headerlink" title="Part2"></a>Part2</h3><ol><li>Do you think people are taking too many photos these days?</li><li>What kinds of photos do people like to take?</li><li>Do you think people take more photos now than in the past?</li><li>Do you think equipment is important for photography?</li><li><p>Do you think being a professional photographer is a good job? Why?</p></li><li><p>Why do some people like to post their photos on social media?</p></li></ol><hr><h2 id="擅长说中文的外国人"><a href="#擅长说中文的外国人" class="headerlink" title="擅长说中文的外国人"></a>擅长说中文的外国人</h2><h3 id="Par2-5"><a href="#Par2-5" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a foreigner who speaks Chinese very well You should say:</p><ul><li><p>Who this person is Where he/she is from</p></li><li><p>How he/she learns Chinese</p></li><li><p>And explain why he/she can speak Chinese well</p></li></ul><h3 id="Part2-36"><a href="#Part2-36" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What foreign languages do Chinese children learn?</li><li>Why do Chinese children learn English?</li><li>Why are so many people learning English?</li><li>How can you help children learn English?</li><li>Do you think the way people learn English today is the same as in the past?</li><li>What are the benefits of the Internet for people’s learning?</li></ol><hr><h2 id="喜欢烹妊的人"><a href="#喜欢烹妊的人" class="headerlink" title="喜欢烹妊的人"></a>喜欢烹妊的人</h2><h3 id="Par2-6"><a href="#Par2-6" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a person who enjoys cooking for others You should say:</p><ul><li><p>Who this person is</p></li><li><p>What he/she likes to cook Who he/she cooks for</p></li><li><p>And explain why he/she enjoys cooking</p></li></ul><h3 id="Part2-37"><a href="#Part2-37" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What do we need to prepare when we need to cook?</li><li>Do you agree that food is an important part of Chinese festivals and ceremonies?</li><li>Which dishes are a must at festivals?</li><li>Should students learn to cook at school?</li><li>Do you think cooking should be a compulsory or an elective course? Why?</li><li>Are there any differences between cooking today and in the past?</li></ol><hr><h2 id="想法有趣的人"><a href="#想法有趣的人" class="headerlink" title="想法有趣的人"></a>想法有趣的人</h2><h3 id="Par2-7"><a href="#Par2-7" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a person who always has interesting ideas or opinions</p><ul><li><p>You should say: Who this person is</p></li><li><p>What this person does How you knew him/her</p></li><li><p>And explain why you think his/her ideas or opinions are interesting</p></li></ul><h3 id="Part2-38"><a href="#Part2-38" class="headerlink" title="Part2"></a>Part2</h3><ol><li>When do you think children start to have their own opinions?</li><li>Are children’s opinions influenced by their parents?</li><li>Who are likely to influence smart children?</li><li>How do inventors or philosophers come up with new ideas?</li><li>Do you think ideas from books or writers in the past are all outdated?</li><li>What kind of people have lots of great ideas in your country?</li></ol><hr><h2 id="想见的有趣的人"><a href="#想见的有趣的人" class="headerlink" title="想见的有趣的人"></a>想见的有趣的人</h2><h3 id="Par2-8"><a href="#Par2-8" class="headerlink" title="Par2"></a>Par2</h3><p>Describe an interesting person that youhave not met in person and would like to know more about You should say:</p><ul><li><p>Who this person is How you knew him/her</p></li><li><p>What interesting things he/she has done</p></li><li><p>And explain what you would like to know more about him/her</p></li></ul><h3 id="Part2-39"><a href="#Part2-39" class="headerlink" title="Part2"></a>Part2</h3><ol><li>Are there any differences in the relationship between you and your friends and between you and other people?</li><li>Do people feel lonely in crowded cities?</li><li>Where and how can people get to know new people?</li><li>Can clothing tell and reveal a person’s personality?</li><li>Why do individuals from the same family have different personalities?</li><li>How does society influence a person·s personality?</li></ol><hr><h2 id="学校／工作中的重要规则"><a href="#学校／工作中的重要规则" class="headerlink" title="学校／工作中的重要规则"></a>学校／工作中的重要规则</h2><h3 id="Par2-9"><a href="#Par2-9" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a rule that is important in your school or at work</p><ul><li><p>You should say:</p></li><li><p>What the rule is about</p></li><li><p>What happens when people break the rule Why you think it is an important rule</p></li><li><p>And explain how you feel about the rule</p></li></ul><h3 id="Part2-40"><a href="#Part2-40" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What rules should children follow at home in your country?</li><li>On what occasions can children be forgiven if they don’t follow some rules?</li><li>What rules should people follow when using public transport?</li><li>What kinds of rules do people need to follow in public places?</li><li>What are the reasons that cause people to break rules?</li><li>When people break rules, how would they be punished in your country?</li></ol><hr><h2 id="一幅画"><a href="#一幅画" class="headerlink" title="一幅画"></a>一幅画</h2><h3 id="Par2-10"><a href="#Par2-10" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a drawing/painting that youlike You should say:</p><ul><li><p>When you first saw this painting What the painting is about</p></li><li><p>Who drew/painted it</p></li><li><p>And explain why you like this drawing/painting</p></li></ul><h3 id="Part2-41"><a href="#Part2-41" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What are the differences between painting and drawing?</li><li>Why do some people keep a painting for a long time?</li><li>How does building style affect people’s lives?</li><li>Should children learn to draw and paint? Why?</li><li>How do young people share arts with others?</li><li>Do you think the objects we use in our daily lives should be beautifully designed?</li></ol><hr><h2 id="有趣的地方"><a href="#有趣的地方" class="headerlink" title="有趣的地方"></a>有趣的地方</h2><h3 id="Par2-11"><a href="#Par2-11" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a place in your country that youthink is interesting</p><ul><li><p>You should say: Where it is</p></li><li><p>How you knew it</p></li><li><p>What special features it has</p></li><li><p>And explain why you think it is interesting</p></li></ul><h3 id="Part2-42"><a href="#Part2-42" class="headerlink" title="Part2"></a>Part2</h3><ol><li>How can people access travel information?</li><li>Do people have different personalities in different regions of your country?</li><li>What causes the differences between different regions of your country?</li><li>Is it just youngsters who like to try new things, or do people of your parents· age also like to try new things?</li><li>Is a great tourist destination also a good place to live?</li><li>Why do people who go to live in small towns think these towns are more interesting than the big cities?</li></ol><hr><h2 id="有用的广告"><a href="#有用的广告" class="headerlink" title="有用的广告"></a>有用的广告</h2><h3 id="Par2-12"><a href="#Par2-12" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a good advertisement that youthink is useful</p><ul><li><p>You should say:</p></li><li><p>Where you can see it What it shows</p></li><li><p>Why you think it is useful</p></li><li><p>And explain how you feel about it</p></li></ul><h3 id="Part2-43"><a href="#Part2-43" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What do you think of online advertising?</li><li>Are there any great online advertisements?</li><li>What do people usually buy?</li><li>Why does buying new things make people happy?</li><li>Do people watch useless advertisements in this day and age?</li><li>Do you think there is too much advertising in our daily lives?</li></ol><hr><h2 id="糟糕服务"><a href="#糟糕服务" class="headerlink" title="糟糕服务"></a>糟糕服务</h2><h3 id="Par2-13"><a href="#Par2-13" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a bad service you received in a restaurant/shop</p><ul><li><p>You should say:</p></li><li><p>When and where it happened What happened</p></li><li><p>How you reacted</p></li><li><p>And explain how you felt about the experience</p><h3 id="Part2-44"><a href="#Part2-44" class="headerlink" title="Part2"></a>Part2</h3></li></ul><ol><li>How do most people respond to bad services?</li><li>Do you think services are better now than in the past?</li><li>What kind of services are bad services?</li><li>Why do some people choose to remain silent when they receive bad services?</li><li>Who should be responsible for bad services?</li><li>What can employers do to improve the service that their employees provide?</li></ol><hr><h2 id="一起学习／工作的成功人士"><a href="#一起学习／工作的成功人士" class="headerlink" title="一起学习／工作的成功人士"></a>一起学习／工作的成功人士</h2><h3 id="Par2-14"><a href="#Par2-14" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a successful person who you once studied or worked with</p><ul><li><p>You should say: Who this person is</p></li><li><p>When you studied/worked with this person What you did together</p></li><li><p>What this person did to become successful And explain how you felt about studying or working with this person</p></li></ul><h3 id="Part2-45"><a href="#Part2-45" class="headerlink" title="Part2"></a>Part2</h3><ol><li>Is money the only measure of success in your country?</li><li>How do you define whether one is a successful person?</li><li>What is the standard of success in your country?</li><li>Is there a contradiction between success and happiness?</li><li>Is it easy to succeed in the national tests in your country?</li><li>What are the factors that influence students’ grades at school?</li></ol><hr><h2 id="一同参加的兴奋活动"><a href="#一同参加的兴奋活动" class="headerlink" title="一同参加的兴奋活动"></a>一同参加的兴奋活动</h2><h3 id="Par2-15"><a href="#Par2-15" class="headerlink" title="Par2"></a>Par2</h3><p>Describe an exciting activity that youexperienced with someone else</p><ul><li><p>You should say:</p></li><li><p>What the activity was Who you were with</p></li><li><p>When and where it happened Why you went for it</p></li><li><p>And explain how you felt about it</p></li></ul><h3 id="Part2-46"><a href="#Part2-46" class="headerlink" title="Part2"></a>Part2</h3><ol><li>What kinds of activities do young people like to do?</li><li>Why do some young people like adventurous activities?</li><li>Do you think old people would like to have changes?</li><li>Why can exciting activities relieve people’s stress?</li><li>Can you give some (other) examples of adventurous or risky activities?</li><li>What skills do people need to take part in adventurous activities?</li></ol><hr><h2 id="历史时期"><a href="#历史时期" class="headerlink" title="历史时期"></a>历史时期</h2><h3 id="Par2-16"><a href="#Par2-16" class="headerlink" title="Par2"></a>Par2</h3><p>Describe a historical period/moment you would like to learn more about</p><ul><li><p>You should say:</p></li><li><p>What you are interested in When it happened</p></li><li><p>What you know about it</p></li><li><p>And why you would like to learn more</p></li></ul><h3 id="Part2-47"><a href="#Part2-47" class="headerlink" title="Part2"></a>Part2</h3><ol><li>Should everyone know history?</li><li>In what ways can children learn history?</li><li>What are the differences between learning history from books and from videos?</li><li>Is it difficult to protect and preserve historic buildings?</li><li>Who should be responsible for protecting historic buildings?</li><li>Who should pay for the preservation of historic buildings?</li></ol>]]></content>
      
      
      <categories>
          
          <category> 雅思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-CH3-传输介质</title>
      <link href="/posts/9b43b6f.html"/>
      <url>/posts/9b43b6f.html</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>（听 Baoninghai 讲讲故事的小节）</p><ul><li>如同Overview中介绍，用于信息传输的介质可以分为引导式(guided)和非引导式(unguided, 通常其实就是无线)。</li><li>双绞线一直是传统通信的主力，但是双绞线对长距离高频信号的传递不行。同轴线可以弥补这个缺点，但是造价较为高昂。现在价格更低又对大容量长距离传输更友好的光纤占据了很大的市场，曾经广泛使用的双绞线和同轴线逐渐被光纤取代了。现在的趋势是将光纤向用户侧衍伸。</li><li>光纤因为自己材质是二氧化硅，因此对外部保护要求较高，且不能大幅度弯曲。现在有了新的材料，类似于“塑料”，解决了这个问题。因此现在光线入户得到了进一步推进。</li><li>光纤还有一些独特的优势，一是成本低；二是要窃听光纤内的内容，必须要在光纤接头处作出特殊处理，无法直接并联一根线进行窃听。</li></ul><h1 id="频段和其缩写"><a href="#频段和其缩写" class="headerlink" title="频段和其缩写"></a>频段和其缩写</h1><div class="note info flat"><p>这一页不作具体的要求，只需要大家熟悉</p></div><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240321172556582.png" alt="image-20240321172556582" style="zoom: 50%;" /></p><p>其中，几个比较重要的是：</p><ul><li>语音通信的频带范围：300-3KHz</li><li>双绞线传输范围: 小于$10^8Hz$，这也就是为什么说双绞线对高频信号传输不友好</li><li>光纤和可见光都在$10^{14}%$至$10^{15}$，可见光通信（例如日光灯）现在也有很多人研究，数据下行较为容易实现，但是数据上行困难。</li></ul><h1 id="传输介质的分类"><a href="#传输介质的分类" class="headerlink" title="传输介质的分类"></a>传输介质的分类</h1><p>引导式传输介质一般都指有线传输信道，非引导式一般是无线传输信道。一般来说：</p><ul><li>有线传输信道各项参数不会发生较大变化，因此认为有限传输是<strong>恒参信道</strong>。</li><li>而无线传输会受到环境，路径等影响，因此是<strong>非恒参信道</strong></li></ul><h1 id="引导式-有线-传输介质"><a href="#引导式-有线-传输介质" class="headerlink" title="引导式(有线)传输介质"></a>引导式(有线)传输介质</h1><div class="table-container"><table><thead><tr><th></th><th>频率范围</th><th>衰落率典型值</th><th>延迟典型值</th><th>理论传输最远距离</th></tr></thead><tbody><tr><td>双绞线</td><td>0-3.5Khz</td><td>0.2dB/Km@1Khz</td><td>50us/km</td><td>5km</td></tr><tr><td>双绞线（多条）</td><td>0-1Mhz</td><td>0.7dB/Km@1Khz</td><td>5us/km</td><td>5km</td></tr><tr><td>同轴线</td><td>0-500Mhz</td><td>7dB/Km@10Mhz</td><td>4us/km</td><td>1~9km</td></tr><tr><td>光纤</td><td>186-370Thz</td><td>0.2~0.5dB/Km</td><td>5us/km</td><td>40km</td></tr></tbody></table></div><p><em>双绞线对语音通信传输距离，标准的上限是5Km。PPT上的表格写的是2km，这里与国内实际情况有出入。</em></p><h2 id="双绞线-（Twisted-pair）"><a href="#双绞线-（Twisted-pair）" class="headerlink" title="双绞线 （Twisted pair）"></a>双绞线 （Twisted pair）</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240321174201447.png" alt="image-20240321174201447"></p><p><strong>双绞线</strong>：双绞线由两条铜线拧在一起。一条双绞线（两条铜线）构成一个完整的通信回路。两条线拧在一起是为了让内部传输的信号尽可能正交（完全正交就没法向前延伸了），<strong>来减少互相的串扰</strong>。因此绕在一起的“斜率”其实是经过特别计算的。</p><p><strong>串扰产生的原因</strong>：两条相邻的并行的线产生了互相电磁干扰其实就是串扰产生的原因。最初的时候，语音信号是模拟信号，因此产生传绕时你可以听到别人说话的声音。</p><p><strong>用户环路（subscriber loop）:</strong>在局部电话系统中（例如政府），会有一个内部的交换机，内部电话通过双绞线连接至内部交换机，这些线路被称为“用户环路”。（现在也用不太上了，可以不用记）</p><p><strong>双绞线的优缺点：</strong></p><ul><li>优：便宜</li><li>优：可弯折性好</li><li>缺：距离上受到限制</li><li>缺：对干扰特别敏感（举个例子，家庭网络布双绞线时，强电和弱电需要分开布线，以此减少干扰）</li><li>缺：频率受到限制（主要的限制）</li></ul><p>从下图可以看出，在几种典型的线传输介质中，双绞线的衰减随频率增加严重。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325193250533.png" alt="image-20240325193250533" style="zoom: 80%;" /></p><p><em>在后续研究双绞线时，会认为双绞线是两条平直，线距一致的线。因为研究传输线基于微积分，当把双绞线切分成无数个小段之后，每一小段近似与平行。</em></p><p><strong>不同规格的双绞线</strong></p><p><em>（看看就可以，了解）</em></p><p>双绞线可以分为屏蔽（shielded twisted pair, STP）的和非屏蔽(unshielded twisted pair, UTP)的，屏蔽线的抗电磁干扰能力较好，但成本较高；因此日常使用的都是非屏蔽线。</p><p>双绞线依据其最高传输带宽，被分为了几类（以下只列举了典型两类）：</p><ul><li>3类线：最高传输带宽16Mhz的UTP线缆</li><li>5类线：最高传输带宽100Mhz的UTP线缆</li></ul><p>三类线和五类线的核心区别是双绞线的绕合率</p><h2 id="同轴线（coaxial-cable）"><a href="#同轴线（coaxial-cable）" class="headerlink" title="同轴线（coaxial cable）"></a>同轴线（coaxial cable）</h2><p><strong>同轴线的构成</strong>：类似于双绞线有两条线，同轴线也有两条线，这是其也被称之为双导体的原因。如下图所示，有Inner conductor 和 Outer conductor，两层导线轴心相同。</p><p>目前，同轴线广泛运用于射频信号的传播。</p><p><strong>双导体和单导体</strong>：双导体构成回路，可双向传输直流信号（恒电磁波），而单导体内信号是以电磁波的形式在传播</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240321174407017.png" alt="image-20240321174407017"></p><p><strong>同轴线的传输特征：</strong>同轴线能传输高频的信号，如下图所示。与双绞线相比，同轴电缆可以用于更长的距离，并支持线路上接入更多站点</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325193250533.png" alt="image-20240325193250533" style="zoom:50%;" /></p><h2 id="光纤（optical-fiber）"><a href="#光纤（optical-fiber）" class="headerlink" title="光纤（optical fiber）"></a>光纤（optical fiber）</h2><p>光纤的结构如下图所示，其由三层基本结构组成：纤芯（core），包层（cladding），涂敷层(外护套)（coating）。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325202232756.png" alt="image-20240325202232756"></p><p>一般来说，有两种光纤：支持的多种传播路径或横向模式的光纤被称为多模光纤(multi-mode)，而支持单一模式的被称为单模光纤（single-mode）。</p><ul><li>单模光纤主要用来承载具有长波长的激光束，单模只传输一种模式。和多模光纤相比，他的<strong>色散要少</strong>。由于使用更小的玻璃芯和单模光源，所以单模光纤支持很长的距离，传输距离可达10km甚至几十km。</li><li>多模光纤主要使用短波激光，具有50nm或者62.5nm的玻璃芯以及125nm的覆盖层。多模允许传输同时多个模式，覆盖层的反射限制了玻璃芯中的光，使他不会泄漏。短波长的激光束由那些从缆芯中以不同角度反射出来的光模所组成。<strong>由于不同模式的波速度，性质有差异，在接收端可能出现波形展宽，也就是色散。这种色散效果</strong>降低了可以恢复的原始信号的最长距离。</li></ul><p>其中，多模光纤又分为阶跃折射率和渐变折射率，其区别是线芯的折射率是阶跃变化还是渐进变化，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325203205788.png" alt="image-20240325203205788"></p><p>下图由上至下展示：多模阶跃光纤，多模渐进光纤，单模光纤，内光信号的传播路径。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325202924107.png" alt="image-20240325202924107" style="zoom:67%;" /></p><p>一般来说，多模的光纤线径大于单模</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240325202348684.png" alt="image-20240325202348684"></p><div class="note danger flat"><p>下面3个窗口五星级</p></div><p><strong>光纤通信中的发光器件：</strong> 光纤通信的复用方式是波分复用。光纤有3个衰减比较小的“透射窗口”，<strong>分别是850nm, 1310nm 1550nm</strong>。最初使用的是850nm的波长，如今许多本地通信使用的是850nm LED光源，这种方案比较便宜，但通常只适用于100Mbps以下的数据速率和几公里的距离；更高速率和距离需要1310nm的LED或是激光光源；下图展示了3个波长窗口，注意，图中单位为um（位于中文书102页）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/C4BA64DB26654D81E9EDF1C5319B175E.jpg" alt="C4BA64DB26654D81E9EDF1C5319B175E" style="zoom: 33%;" /></p><p>上面这个图不好看，这个图清晰一点：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240606031856814.png" alt="image-20240606031856814" style="zoom: 80%;" /></p><h1 id="非引导（无线）通信（五星级！）"><a href="#非引导（无线）通信（五星级！）" class="headerlink" title="非引导（无线）通信（五星级！）"></a>非引导（无线）通信（五星级！）</h1><div class="note info flat"><p>bnh的小知识：微波是电磁波的一个分支，特指频率很高波长很短的电磁波，其频率在300MHz-300GHz。</p></div><h2 id="天线"><a href="#天线" class="headerlink" title="天线"></a>天线</h2><p>（这一段在吹水）</p><p>通常我们在讨论天线时，主要关注快衰落和慢衰落（详见移动通信）。</p><p>在讨论天线时，多径效应影响明显（属于快衰落）。为了解决这个问题，有一种较为传统有效的方法，是分级接收：一个发送端和两个接收端，两个接收数据合并处理后再使用；这种技术要求两个天线水平摆放或是垂直摆放，通常来说垂直摆放效果更好。另一种方法是使用均衡技术，对衰落进行补偿。</p><p>在这门课中，主要讨论抛物面天线。</p><p>常见的微波天线是抛物面“碟形”。典型的尺寸约为直径3米，天线为刚性天线，有一个焦点，适用于窄波束LOS传输。微波天线通常位于地面以上相当高的位置，以扩大天线覆盖范围并避开障碍物。为了实现远距离传输，使用了一系列微波中继塔，点对点微波链路在所需距离上串在一起。</p><p>微波的另一个日益普遍的用途是用于建筑物之间的短点对点链路。这可以用于闭路电视或作为局域网之间的数据链路。短程微波也可以用于旁路应用。企业可以绕过当地电信公司，建立与同一城市远程电信设施的微波链路。</p><h3 id="天线的增益（五星级）"><a href="#天线的增益（五星级）" class="headerlink" title="天线的增益（五星级）"></a>天线的增益（五星级）</h3><div class="note danger flat"><p>天线增益五星级公式</p></div><p>天线的增益是它在接收某一方向信号时，该方向信号的功率和天线接收出的功率的比值。在天线传输理论一课中对下面这个公式已经进行过了推导。天线的增益可以用如下公式描述：</p><script type="math/tex; mode=display">G=\frac{4\pi A_e}{\lambda^2}=\frac{4\pi f^2A_e}{c^2}</script><p>其中：</p><ul><li>G: 天线增益</li><li>$A_e$: 天线有效面积</li><li>$f$: 载波频率</li><li>c: 真空中光速</li><li>$\lambda$: 载波波长</li></ul><p>抛物面天线有效面积的公式是：(其中A指圆面积，例如半径为r就是$2\pi r^2$)</p><script type="math/tex; mode=display">A_e=0.56A</script><p>理想全向增益为1的天线有效面积是：</p><script type="math/tex; mode=display">A_e=\frac{\lambda^2}{4\pi}</script><p>由于$4\pi\times0.57\approx7$, 因此抛物面天线的增益公式可以简化：</p><script type="math/tex; mode=display">G_{抛物面}=\frac{7A}{\lambda^2}</script><p><em>举个例子，一个抛物面天线直径为2m, 工作频率为12GHz, 天线的有效面积是多少？增益是多少？</em></p><script type="math/tex; mode=display">A=\pi r^2=\pi, A_e=0.56\pi</script><script type="math/tex; mode=display">\lambda=c/f=((3\times10^8)/(12\times10^9))=0.025m</script><script type="math/tex; mode=display">G=(7A)/\lambda^2=35186=45.46dB</script><h2 id="地表微波通信"><a href="#地表微波通信" class="headerlink" title="地表微波通信"></a>地表微波通信</h2><h2 id="卫星微波通信"><a href="#卫星微波通信" class="headerlink" title="卫星微波通信"></a>卫星微波通信</h2><p><strong>卫星通信核心问题：</strong>卫星通信最核心的问题是功耗问题，卫星一般都是携带电池，并通过太阳能电池板进行补能，电能非常有限。</p><p><strong>上下行的频段划分：</strong>在基站和手机的通信中，因为手机对功耗较为敏感，发射功率有限，因此在与基站的通信中终端上行数据会采用较低频率，以减少衰减。在卫星通信中，卫星是功耗敏感方，因此卫星通信的下行会采用较低频率。</p><p>在这门课中，还认为是使用微波进行卫星通信。但是其实现在非常多的学者已经在研究激光卫星/星间通信。激光对波的束缚能力要显著好于微波。但也正是因此，要对准发射端和接收端较难。</p><h2 id="无线通信电磁波的传播"><a href="#无线通信电磁波的传播" class="headerlink" title="无线通信电磁波的传播"></a>无线通信电磁波的传播</h2><h3 id="地波传播（Ground-Wave）（了解）"><a href="#地波传播（Ground-Wave）（了解）" class="headerlink" title="地波传播（Ground Wave）（了解）"></a>地波传播（Ground Wave）（了解）</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408194113961.png" alt="image-20240408194113961"></p><p>地波指贴着地面，随着地表弧度弯曲传播的电磁波，它的传播距离可以远超视觉地平线。地波的频率大约为2MHz，属于长波通信，有很强的绕射能力。它会沿着地面传播的原因，是受地表感应电流影响，导致其波前（wavefont）向下倾斜，从而遵循地球的曲率。</p><p>典型的地波通信是AM广播。</p><h3 id="天波传播（Sky-Wave）（了解）"><a href="#天波传播（Sky-Wave）（了解）" class="headerlink" title="天波传播（Sky Wave）（了解）"></a>天波传播（Sky Wave）（了解）</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408194617027.png" alt="image-20240408194617027"></p><p>天波依靠电离层反射传播，同样可以实现NLOS传播，但由于其经过反射，因此能量衰减巨大。其频率范围是2-30MHz</p><h3 id="Line-of-Signt-传播（重点）"><a href="#Line-of-Signt-传播（重点）" class="headerlink" title="Line-of-Signt 传播（重点）"></a>Line-of-Signt 传播（重点）</h3><div class="note danger flat"><p>五星级知识点！</p></div><p>对于高于30MHz的波，地波和天波就不管用了，需要视线传播。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408195724164.png" alt="image-20240408195724164"></p><p>视线传播中，发射和接受端需要在“有效”的视线范围内，这个“有效的视线范围”其实不是完完全全一条直线，因为大气中空气密度不同而折射率不同，所以其实它是略微弯曲的，由于这种弯曲，微波其实能传到比视线略远的地方。</p><p>在没有空气散射的情况下,高度为h的天线，LOS传播的最大距离是</p><script type="math/tex; mode=display">d=3.57\sqrt{h}</script><p>有了空气散射之后需要加一个修正K，K的经验值是$4/3$</p><script type="math/tex; mode=display">d=3.57\sqrt{Kh}</script><p>假设天线1高$h_1$，天线2高$h_2$，那么传播距离是：</p><script type="math/tex; mode=display">d=3.57(\sqrt{Kh_1}+\sqrt{Kh_2})</script><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240408200057096.png" alt="image-20240408200057096"></p><p><strong>自由空间(Free space) 损耗</strong></p><div class="note danger flat"><p>五星级知识点！</p></div><p>对于任何类型的无线通信，信号都会随距离而分散，而接收面积恒定，因此，即使没有其他衰减或损伤，信号也会随着距离增加，传播范围越来越大，单位平均功率越来越少，产生衰减。这样的衰减被成为自由空间损耗。</p><p>理论来说，无线通信的最大中继距离是10-100km，但是在实际应用中，一般50km内就需要进行信号中继。</p><p>假设在各向同性天线下，天线的辐射是一个标准的球，考虑纯理想信道无衰减，只有能量分散带来的损耗。假设发射机发送功率为$P_t$。那么距离为d处球的单位面积接收的能量$S_{av}$就是：</p><script type="math/tex; mode=display">S_{av}=\frac{P_t}{4\pi d^2}</script><p>使用增益为1的各向同性天线接收，这样的天线$A_e=\frac{\lambda^2}{4\pi}$，在距离为d处，接收到的功率$P_r$为：</p><script type="math/tex; mode=display">P_r=S_{av}\cdot A_e=(\frac{\lambda}{4\pi d})^2P_t</script><p>对于各向同性天线，自由空间损耗为：</p><script type="math/tex; mode=display">\frac{P_t}{P_r}=\frac{(4\pi d)^2}{\lambda^2}=\frac{(4\pi fd)^2}{c^2}</script><p>其中：</p><ul><li>$P_t$: 发送端功率</li><li>$P_r$: 接收端功率</li><li>$\lambda$：载波波长</li><li>$d$: 距离（m）</li><li>$c$: 光速（m）= $3\times10^8m/s$</li></ul><p>如果以dB形式改写，这个公式为:</p><script type="math/tex; mode=display">L_{dB}=10log\bigg(\frac{P_t}{P_r}\bigg)=10log\bigg(\frac{(4\pi fd)^2}{c^2}\bigg)=10log\bigg(\frac{(4\pi d)^2}{\lambda^2}\bigg)</script><script type="math/tex; mode=display">=-20log(\lambda (m))+20log(d(m))+21.98dB</script><script type="math/tex; mode=display">=20log\bigg(\frac{4\pi f d}{c}\bigg)=20log(f{(Hz)})+20log(d{(m)})-147.56dB</script><p><em>例子：考虑一个电离层传播信号，频率4GHz，发送接收间距为35863km, 求其损耗</em></p><script type="math/tex; mode=display">\lambda=(3\times10^8)/(4\times 10^9)=0.075m</script><script type="math/tex; mode=display">L_{dB}=-20log(0.075)+20log(35.853\times10^6)+21.98=195.6dB</script><p>如果发送天线和接收天线增益不为1：</p><script type="math/tex; mode=display">P_r=S_{av}\cdot A_eG_rG_t=(\frac{\lambda}{4\pi d})^2G_rG_tP_t</script><script type="math/tex; mode=display">L_{dB}=10log\bigg(\frac{(4\pi d)^2}{G_rG_t\lambda^2}\bigg)=10log\frac{(cd)^2}{f^2A_rA_t}</script><script type="math/tex; mode=display">=−20log(𝑓(Hz))−10log(𝐴_r𝐴_𝑡)+20log(𝑑(m))+169.54</script>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC2-基本通信协议及其应用</title>
      <link href="/posts/2f9f2f75.html"/>
      <url>/posts/2f9f2f75.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本节对应参考书章节CH2</p></div><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><h2 id="通信协议的功能和结构"><a href="#通信协议的功能和结构" class="headerlink" title="通信协议的功能和结构"></a>通信协议的功能和结构</h2><h3 id="通信协议的多层级化"><a href="#通信协议的多层级化" class="headerlink" title="通信协议的多层级化"></a>通信协议的多层级化</h3><p>通信协议倾向于分为很多层，每层分管不同功能。这样每次需要升级时，<strong>只需要在单独的层上做改变</strong>，保证层对外暴露的接口不变即可。我们把这样很多层的协议系统称为”纵向栈(vertical stack)”。</p><h3 id="通信协议的定义"><a href="#通信协议的定义" class="headerlink" title="通信协议的定义"></a>通信协议的定义</h3><p><strong>什么是通信协议(Protocol)？</strong>协议是允许<strong>对等层（peer layer）进行通信的一组规则或约定。</strong></p><p>如何理解这个对等层呢？例如我们通过QQ互相发送消息，那人与人就是对等层，QQ与QQ就是对等层。我发送消息你看到消息是人与人这个对等层的通信。我们通过软件界面与QQ交互，QQ拿到要发送的消息并显示接收到的消息，这是QQ这一对等层。</p><p><strong>协议必须包含（重点！）</strong>：</p><div class="note danger flat"><p>五星级</p></div><ul><li>语法（Syntax） - 即，数据块由哪些组成，由什么开始，由什么结束，有效载荷如何解析等等。</li><li>语义（Semantics）- 即，数据帧内的控制信息，纠错Header等。包含</li><li>时序（Timing） - 即，事件<strong>顺序</strong>的详细说明</li></ul><div class="note info flat"><p>其中这个Timing 单独强调一下：</p><p>在<strong>电信传输理论与工程</strong>一课中，在中继时提到了“retiming”, 这里的timing<strong>强调时间上“同步”</strong>，要在接收信号的允许抖动范围内进行采样，否则会产生滑码。<strong>而本课程（现代通信网络）中</strong>，这里的timing强调的是事件的<strong>先后顺序</strong>。</p></div><p>通常来说，一个协议规定的一帧数据由如下结构组成：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Header</th><th style="text-align:center">Payload</th><th style="text-align:center">Trailer(footer)</th></tr></thead><tbody><tr><td style="text-align:center">通常包含控制信息、地址信息等</td><td style="text-align:center">有效数据载荷</td><td style="text-align:center">对于精简的协议来说，可以省去Trailer。包含校验信息，纠错信息等</td></tr></tbody></table></div><h2 id="层"><a href="#层" class="headerlink" title="层"></a>层</h2><p>前面提到，通信协议倾向于分为很多层，总体而言，通信这个动作可以被<strong>大体</strong>抽象为以下三个相互独立的层（划分为3层是非常粗糙的）：</p><ul><li><p><strong>网络接入层（Network access layer）</strong>：专注于数据的交换：其提供目的地地址；特定服务，例如优先级；使网络中的终端互通并路由其数据；连接到同一网络的两个终端系统跨网络访问和路由数据</p></li><li><p><strong>传输层（Transport layer）</strong>: 物理路径上的传输：这一层级只负责把收到的比特一个一个发出去，通过握手，流控，校验等，控制其传输可靠性，并不需要理解其中意义。</p></li><li><p><strong>应用层（Application layer）</strong>：对交由应用程序理解信息意义，并呈现的层。例如QQ显示消息，或者网页浏览器将收到的HMTL文件数据以HTML格式解析后显示成网页。</p></li></ul><p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240322151503019.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240322151601874.png"></center></td>    </tr></table><br>上面两张图很好的阐释了这三个抽象的层，首先<strong>应用层</strong>想要发送数据“data”，<strong>传输层</strong>收到信息并将其打包，添加上来自哪里，去往哪里的信息等信息的“头”，并携带data本身，<strong>传给网络接入层</strong>。网络接入层再根据自己的网络协议，添加上路由，链接等信息的“头”，从网络上发出去。</p><h3 id="层间寻址（Addressing）"><a href="#层间寻址（Addressing）" class="headerlink" title="层间寻址（Addressing）"></a>层间寻址（Addressing）</h3><p>在网络上的每一个终端设备，都应当有一个唯一的网络地址</p><p>同时，终端上的每一个应用又有一个它自己的唯一地址</p><p><strong>↑用人话解释就是：不同层之间可以有自己的地址。</strong>这也就是说，不同层可以有自己的地址信息，他们以套娃的形式包裹在一次。在接收时一层协议一层协议解析时，一层一层解读出最终地址。</p><p>如何理解这个呢？你的电脑上同时装了QQ，你的QQ和微信都收到了一条消息，那么会先根据你的终端唯一网络地址，送到你的电脑上（这是传输层），然后再在你的电脑上分捡，QQ的消息QQ显示，微信的消息微信显示（这是应用层）。</p><div class="note info flat"><p>举个例子：我们是重庆|邮电大学|国际学院|通信工程|3409210x班|的学生Z*，你的6级考了329分，那么你的成绩单会先分到重庆，忽略后续的地址，然后下一层交换再分给虫游，忽略后续；以此类推，最后给到Z同学手机里面，手机分析出这个是要交给浏览器的，最后通过浏览器显示在屏幕上。这由粗到细的分拣就对应不同层间的数据传输。（理解到了，让我们说谢谢Z同学）</p></div><h3 id="协议数据单元（Protocol-Data-Unit-PDU）"><a href="#协议数据单元（Protocol-Data-Unit-PDU）" class="headerlink" title="协议数据单元（Protocol Data Unit, PDU）"></a>协议数据单元（Protocol Data Unit, PDU）</h3><p>通信协议中的不同“层”之间是服务与被服务的关系。在发送时，本层协议服务其上层协议，将上层协议传入的内容加上自己的header，传入下层，同时本层的下层协议服务本层协议。在接收时，<strong>对应层的header被对应层解析</strong>，<strong>并将其内含的data传给上一层</strong>，上一层又剥离出上一层的header，解析后传入给上二层。因此在逻辑层面而言，通信是层与层之间对等的。</p><p>协议数据单元PDU（Protocol Data Unit）就是指<strong>对等层</strong>之间传递的<strong>数据单位</strong>，通常包含：控制讯息，地址讯息，或者数据。其中，header部分通常包括：源端口、目标端口、序列号和错误检测代码。这些控制信息将会由接受端的对等协议层理解解析。</p><p><em>用信封的例子来解释这个套娃关系：</em></p><p><em>不同层各有一个信封，信封上写得有不同的内容，在传递给下一层封装时，会把上一层的信封塞到下一层内，并在下一层的信封上贴上这一层所需信息。</em></p><p><em>因此，每一层包好的这一封信，就是这一层的PDU。这一层会抱着这个信封发送，接受时打开这一层信封，并将该信封内套娃的信封交给它的上层。</em></p><h3 id="服务数据单元（Service-Data-Unit-SDU）"><a href="#服务数据单元（Service-Data-Unit-SDU）" class="headerlink" title="服务数据单元（Service Data Unit, SDU）"></a>服务数据单元（Service Data Unit, SDU）</h3><p>PDU是拿到要传输的数据再套上本层信息之后的数据单元。SDU就是指的一坨传输数据。传送到接收方的时候同一协议层时数据没有发生变化。在N层和N-1层间传递的数据单元，记为(N)SDU。</p><h1 id="TCP-IP-协议栈"><a href="#TCP-IP-协议栈" class="headerlink" title="TCP/IP 协议栈"></a>TCP/IP 协议栈</h1><h2 id="TCP-IP-五层协议栈"><a href="#TCP-IP-五层协议栈" class="headerlink" title="TCP/IP 五层协议栈"></a>TCP/IP 五层协议栈</h2><p>通常TCP/IP模型有以下五层，但也有部分参考文献将网络接入层和物理层和在一起，说其为4层。TCP/IP只是一个笼统的协议栈，还可以细分出很多的协议，TCP/IP是利用 IP 进行通信时所必须用到的协议群的统称，其主要是<strong>传输层使用TCP协议</strong>，<strong>网络层使用IP协议</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240327164014287.png" alt="image-20240327164014287" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240607112112849.png" alt="image-20240607112112849"></p><h3 id="不同层的功能"><a href="#不同层的功能" class="headerlink" title="不同层的功能"></a>不同层的功能</h3><p><em>这些层的功能不需要死记硬背，结合后面实际的协议进行理解即可。</em></p><div class="table-container"><table><thead><tr><th><strong>物理层(Physical)</strong></th><th><strong>负责信号的调制，编码方式（例如高电平还是低电平表达1），传输速率，物理接头，带宽指定等与电磁波在物理介质中传播相关的部分。该层只管比特的透明传输，负责保证二进制比特的正确传输。</strong></th></tr></thead><tbody><tr><td><strong>数据链路层（Network Access）</strong></td><td><strong>负责规定比特流的格式，头部通常带有地址及纠错信息。（MAC层属于该层的子层，有部分文献会用MAC层代替该层）（注：这一层的一个数据单位通常被成为“帧”，也被说成MAC帧）</strong></td></tr><tr><td><strong>网络层（Internet）</strong></td><td><strong>负责为两个网络中的节点选择一条传输通路。这一层可提供路由，网络接入，Qos控制（优先级控制）等服务。在数据链路层，数据开始有格式有地址了，而网络层让信息能送到指定的地址去。</strong></td></tr><tr><td><strong>传输层（Transport）</strong></td><td><strong>负责两个节点间数据的传输，确保数据正确地传递。提供流控，错误控制等功能。在一层中，最常用的是协议是Transmission Control Protocol(TCP)</strong></td></tr><tr><td><strong>应用层（Application）</strong></td><td><strong>负责最后应用程序层面，打开信封看里面的信纸，解析其信息的含义的操作</strong></td></tr></tbody></table></div><p>每一层都有自己层对应的控制信息，也就是每一层自己的header，如下图所示。每一层负责解读自己的header，并将灰色部分传给其上层。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240403162847291.png" alt="image-20240403162847291" style="zoom: 67%;" /></p><p>上图中，对某一层而言，某一层的一整条数据（灰的加白的）就是前面介绍的PDU，而灰色部分就是SDU。</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><h3 id="在协议栈中扮演的角色"><a href="#在协议栈中扮演的角色" class="headerlink" title="在协议栈中扮演的角色"></a>在协议栈中扮演的角色</h3><p>TCP是一种面向连接的协议，适合可靠性要求高，长时间连续的通信业务。TCP协议在通信协议中的位置如下图所示，<strong>是位于传输层的协议</strong>。</p><div class="note info flat"><p>在这里涉及传输层有点抽象，但是这门课没有成体系的教案，知识都是这样零零散散的。个人建议最后再来看这里，把网络层看完之后。（这里也不是很重要</p></div><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240327174640187.png" alt="image-20240327174640187" style="zoom:67%;" /></p><h3 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h3><p>TCP协议规定的Header如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240403163850086.png" alt="image-20240403163850086" style="zoom:67%;" /></p><p><em>上图中，octets表示8bit。</em></p><ul><li><p>Source Port：16bit源端口号</p></li><li><p>Destination Port: 16位接收方端口号</p></li><li><p>Sequence Number：帧的序列号，用于数据包重新组装。在接收端，根据这个序列号将拆分的数据重新组装在一起。</p></li><li><p>Acknowledgement Number：应答序列号。</p></li><li><p>Header Length：TCP Header的长度</p></li><li><p>Reserved：保留位，不使用</p></li><li><p>Flags：标志位，用于通信双方维护一些控制信息，例如是否启用Acknowledgement Number，是否为连接请求报文等等。有URG、ACK、PSH、RST、SYN、FI六种。详细功能就不介绍了。</p></li><li><p>Windows：接收机窗口大小，参见滑窗流控。</p></li><li><p>Checksum：校验和，差错控制使用</p></li><li><p>Urgent Pointer：紧急指针，是一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号</p></li><li><p>Options+Padding：可变长可选信息的预留位。总共有7种kind，内涵不同的控制信息，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/QQ_1724116993221.png" alt="QQ_1724116993221"></p></li></ul><div class="note info flat"><p><strong>为什么用octet不用byte?</strong></p><p>Octet 总是表达8个bit ，当我们在谈论网络通信上的问题时，更喜欢使用这个词而不是Byte。</p><p>Byte 通常情况下也表示8个bit，但是准确的说，Byte表示的是<strong>CPU可以独立的寻址的最小内存单位</strong>（不过通过移位和逻辑运算，CPU也可以寻址到某一个单独的bit）。曾几何时，有些电脑的寻址单位不是8Bit的。而现在，大多数情况下byte可以和octet等价。<strong>但是如果你想要强调准确的8bit时，你就应该使用octet而不是byte。</strong></p></div><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><p><strong>例子：理解TCP面向连接——握手过程</strong></p><p><em>有A和B两军在打仗，A占领了两边的山峰，想要明天早上6点两边同时下去把B干掉。因此排出一个传信员，左边将这个消息告诉右边，也就就是路径1。但是传信员存在穿越B时被噶掉的风险，因此右边的A收到后，让传信员再返回左边的A去告诉左边的司令管他们收到了，这也就是路径2。但是此次穿越B还有被噶掉的风险，如果传信员此时被噶掉，右A收并不能确定左A是否收到了“右A已收到”的消息，因此当传信员成功回到左A时，左A的司令管让它再回到右A去告诉：“我们收到了‘你们收到我们的消息’的消息了”，这也就是路径3</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240327180456586.png" alt="image-20240327180456586"></p><p>在TCP中也是一样，假设有A和B两台机器，A先朝B发送数据请求建立连接。B再朝A发送ACK进行回应。A收到B的回应时，A知道它与B之间收发数据均可达，A再朝B发送一次回应，此时B知道它和A之间的收发也是正常的。</p><p><strong><em>说TCP是面向连接的，就是因为它规定了三次这样的握手过程。</em></strong></p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP是面向无连接的协议，也就是管发但不管收没收到那种，适用于“突然来一下”的通信，简短，即时性高的通信。</p><h3 id="UDP-Header"><a href="#UDP-Header" class="headerlink" title="UDP Header"></a>UDP Header</h3><p>UDP协议的头如下图所示，可见，其相对于TCP简短很多。只包含了发送站端口号，接收机端口号，帧长度，和校验和。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240403164844234.png" alt="image-20240403164844234"></p><h1 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h1><p>OSI的全称是：Open System Interconnection (开放系统互联模型)。OSI定义了网络互连的七层模型（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层），如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/v2-794aa7d2b0da939f8559f29ae28136c7_r.jpg" alt="img" style="zoom:50%;" /></p><h2 id="不同层的功能-1"><a href="#不同层的功能-1" class="headerlink" title="不同层的功能"></a>不同层的功能</h2><div class="table-container"><table><thead><tr><th style="text-align:center">层</th><th style="text-align:center">关键词</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">应用层</td><td style="text-align:center">被应用程序调用</td><td style="text-align:left">为应用程序提供网络服务接口。与TCP/IP五层协议中同义。</td></tr><tr><td style="text-align:center">表示层</td><td style="text-align:center">数据编码、格式转换、数据加密。</td><td style="text-align:left">提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一</td></tr><tr><td style="text-align:center">会话层</td><td style="text-align:center">创建、管理和维护会话</td><td style="text-align:left">接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">传输数据</td><td style="text-align:left">提供可靠的数据传输，流控等。与TCP/IP五层协议中同义。</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">路由、寻址</td><td style="text-align:left">负责终端之间建立，保持，挂断通信。</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">封装为待发送“帧”</td><td style="text-align:left">将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">电磁波发送</td><td style="text-align:left">传输介质为数据链路层提供物理连接，实现比特流的透明传输。与TCP/IP五层协议中同义。</td></tr></tbody></table></div><p>其中，在真正的协议中，很少有协议会单独定义<strong>会话层</strong>和<strong>表示层</strong>的，其功能多并入上层和下层。<strong>因此这两层独立存在情况极少</strong>。</p><p>（其实没有协议会完整地遵照OSI这个模型去设计，经常都是几层协议和在一起或者一层协议剥开几层。TCP/IP更好理解一些。）</p><h3 id="与TCP-IP比较"><a href="#与TCP-IP比较" class="headerlink" title="与TCP/IP比较"></a>与TCP/IP比较</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/OIP-C.aqECjESRywFaKW0siDxWGQHaFj" alt="网络OSI七层模型及各层作用"></p>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于拉氏变换的连续系统分析</title>
      <link href="/posts/5018.html"/>
      <url>/posts/5018.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> default </category>
          
      </categories>
      
      
        <tags>
            
            <tag> default </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉普拉斯变换</title>
      <link href="/posts/cc687296.html"/>
      <url>/posts/cc687296.html</url>
      
        <content type="html"><![CDATA[<p>[施工中..]</p><h1 id="引入——为什么有拉普拉斯变换"><a href="#引入——为什么有拉普拉斯变换" class="headerlink" title="引入——为什么有拉普拉斯变换"></a>引入——为什么有拉普拉斯变换</h1><p>傅里叶变换将时域信号转化到了频域，傅里叶逆变换又实现了频域到时域的过程。根据傅里叶变换的性质，我们发现，使用傅里叶来处理微分方程时，可以消除其中的微分项（时域微分性质）。那如果我们将一个信号从时域变换到频域，在频域处理完后再逆变换回去，那便可以跳过微分项的计算，从而简化计算过程。</p><p>然而，要对一串信号作用傅里叶变换，它就必须要遵循狄利克雷收敛条件。这个条件不利于我们处理一些信号。为了使得更多的信号绝对可积，在傅里叶变换的变换对的基础上给信号施加一个<strong>衰减因子</strong>，又不影响其可以跳过微分的性质，那么我们便可以更轻易地处理系统函数了和求解微分方程。因此，产生了拉普拉斯变换</p><p>因此，我们定义了一个$e^{-\sigma t}$ 做为衰减因子，作用于傅里叶变换的基础上，成为拉氏变换。</p><h1 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="双边拉普拉斯变换"><a href="#双边拉普拉斯变换" class="headerlink" title="双边拉普拉斯变换"></a>双边拉普拉斯变换</h3><p>拉普拉斯变换对的定义如下（双边）</p><ul><li><strong>正变换</strong></li></ul><script type="math/tex; mode=display">F(s)=L[f(t)]=\int_{-\infty}^{\infty}f(t)e^{-st}dt, s=\sigma+j\omega</script><ul><li><strong>逆变换</strong></li></ul><script type="math/tex; mode=display">f(t)=L^{-1}[F(s)]=\frac{1}{2\pi j}\int_{\sigma -j\infty}^{\sigma+j\infty} F(s)e^{st}ds</script><p>正如引入中所介绍，傅里叶变换的定义式是：</p><script type="math/tex; mode=display">F(\omega)=F[f(t)]=\int_{-\infty}^{\infty}f(t)e^{-j\omega t}dt</script><p>如果将傅里叶变换定义中的$e^{-j\omega t}$ 乘上衰减因子$e^{-\sigma t}$，它就变成了$e^{-j\omega t}\times e^{-\sigma t}=e^{-(j\omega+\sigma)t}$， 记复数$j\omega + \sigma =s$，就可以写成$e^{-st}$，这就变成了拉普拉斯变换</p><p>这个衰减因子的 $\sigma$ 是做为常数存在的，也就是可以通过控制 $\sigma$ 来控制衰减的大小。</p><h3 id="单边拉普拉斯变换"><a href="#单边拉普拉斯变换" class="headerlink" title="单边拉普拉斯变换"></a>单边拉普拉斯变换</h3><p>双边拉普拉斯变换中，把 $t&lt;0$ 的范围也算进去了。在现实中，可以将信号开始产生的时刻记为 $t = 0$, 那么$t&lt;0$时没有信号因此$f(t)= 0, t&lt;0$。因此，只需要对$[0, +\infty]$ 区间内的信号进行处理即可。这也就成了单边拉普拉斯变换。(这个$0^-$表示从左侧无限趋近于0开始，从工程的角度解释，就是包含了电感电容等储能元件在 t=0 时的初始条件)</p><ul><li><strong>正变换</strong></li></ul><script type="math/tex; mode=display">F(s)=L[f(t)]=\int_{0^-}^{\infty}f(t)e^{-st}dt, s=\sigma+j\omega</script><p>（逆变换同双边变换，因为逆变换的积分是作用于 s 上的，所以不受 t 的影响）</p><p><strong>在分析实际的系统时，一般都使用单边拉普拉斯变换，因为实际系统具有信号开始产生的 t=0 时刻，t&lt;0 时信号为0，下方所有的讨论也都是适用于单边拉普拉斯变换的</strong></p><h2 id="收敛域（Range-of-Convergence-ROC）"><a href="#收敛域（Range-of-Convergence-ROC）" class="headerlink" title="收敛域（Range of Convergence ROC）"></a>收敛域（Range of Convergence ROC）</h2><p>纵然乘上了个$e^{-\sigma t}$，也只是增加了$f(t)$收敛的可能性，仍不能保证其收敛。因此拉普拉斯变换存在收敛范围，仅在收敛范围内时，$F(s)$ 存在</p><p>那么对于一个施加了衰减因素的信号 $f(t)e^{-\sigma t}$, 其收敛就是当 $t \rightarrow \infty$ 时，$\lim_{t\rightarrow\infty}f(t)e^{-\sigma t}=0$ </p><p>假设存在一个$\sigma_0$, 当$\sigma &gt; \sigma_0$时（也就是衰减速度比$\sigma_0$控制的衰减速度更大时），$\lim_{t\rightarrow\infty}f(t)e^{-\sigma t}=0$ ；  $\sigma &gt; \sigma_0$这个区间便被称为拉普拉斯变换的收敛域，记作$Rs[s] = \sigma &gt; \sigma_0$</p><p><em>举个例子</em></p><p><em>$f(t)=e^{-2t}, t&gt;0$ 求收敛域</em></p><script type="math/tex; mode=display">f(t)e^{-\sigma t}= e^{-2t}e^{-\sigma t}=e^{-(2+\sigma)t}</script><script type="math/tex; mode=display">\lim_{t\rightarrow\infty}e^{-(2+\sigma)t}=0</script><p><em>故$(2+\sigma) &gt; 0$</em>，<em>因此拉氏变换敛域是$\sigma &gt; -2$</em></p><h2 id="典型信号的拉普拉斯变换"><a href="#典型信号的拉普拉斯变换" class="headerlink" title="典型信号的拉普拉斯变换"></a>典型信号的拉普拉斯变换</h2><div class="note danger flat"><p>下面这些都是五星级的，拉普拉斯变换的计算通常使用变换对，下面这些都是常用的变换对</p></div><h3 id="单位阶跃信号（step-signal）"><a href="#单位阶跃信号（step-signal）" class="headerlink" title="单位阶跃信号（step signal）"></a>单位阶跃信号（step signal）</h3><p>信号$f(t) = u(t)$</p><p>因为单边拉式变换从0开始，单位阶跃信号 u(t) 在 $[0,+\infty]$ 范围内都是1，所以下式直接带1</p><script type="math/tex; mode=display">\int_{0}^{\infty}1\times e^{-st}dt=-\frac{1}{s}e^{-st}\bigg|_{0}^{\infty} =\frac{1}{s}</script><h3 id="指数信号-exponential-signal"><a href="#指数信号-exponential-signal" class="headerlink" title="指数信号 (exponential signal)"></a>指数信号 (exponential signal)</h3><p>信号$f(t) = e^{-(\alpha+j\beta)t}$</p><script type="math/tex; mode=display">\int_{0}^{\infty}e^{-(\alpha+j\beta)t}\times e^{-st}dt=\frac{e^{-(s+\alpha+j\beta)t}}{-(s+\alpha+j\beta)}\bigg|^{\infty}_{0}= \frac{1}{(s+\alpha+j\beta)}</script><p>如果$\beta= 0 $，即这是一个实数指数：</p><script type="math/tex; mode=display">F(s)=\frac{1}{(s+\alpha)}, (\sigma > \alpha)</script><p>其中$(\sigma &gt; \alpha )$ 是其收敛域</p><h3 id="单位冲击信号（unit-sample-signal）"><a href="#单位冲击信号（unit-sample-signal）" class="headerlink" title="单位冲击信号（unit sample signal）"></a>单位冲击信号（unit sample signal）</h3><p>信号$f(t) = \delta (t)$</p><script type="math/tex; mode=display">\int_{0^-}^{\infty}\delta(t)\times e^{-st}dt= 1</script><p>如果有时移时：</p><script type="math/tex; mode=display">\int_{0^-}^{\infty}\delta(t-t_0)\times e^{-st}dt= e^{-st_0}</script><h3 id="斜坡信号-ramp-signal"><a href="#斜坡信号-ramp-signal" class="headerlink" title="斜坡信号 (ramp signal)"></a>斜坡信号 (ramp signal)</h3><p>$f(t)= r(t)=t\times u(t)$，在$t&gt;0$时可写成$f(t)=t$</p><p>(下面用了分部积分)</p><script type="math/tex; mode=display">\int_{0^-}^{\infty} t \times e^{-st}dt= -\frac{1}{s}\int_{0}^{\infty}t\ d{e^{-st}}= -\frac{1}{s}\bigg[ t\cdot e^{-st}\bigg|^{\infty}_{0}- \int_{0}^{\infty}e^{-st}dt \bigg]=\frac{1}{s^2}</script><h2 id="拉普拉斯变换的性质"><a href="#拉普拉斯变换的性质" class="headerlink" title="拉普拉斯变换的性质"></a>拉普拉斯变换的性质</h2><div class="note danger flat"><p>下面这些都是五星级的，证明请参考Dr. Ruiheng Wu 的 PPT 或是百度，方法千奇百怪的，这里不再赘述。</p></div><h3 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h3><p>若：</p><script type="math/tex; mode=display">L[f_1(t)]=F_1(s), L[f_2(t)]=F_2(s)</script><p>有：</p><script type="math/tex; mode=display">L[k_1f_1(t)+k_2f_2(t)]=k_1F_1(s)+k_2F_2(s)</script><h3 id="时移"><a href="#时移" class="headerlink" title="时移"></a>时移</h3><p>若：</p><script type="math/tex; mode=display">L[f(t)]=F(s)</script><p>有：</p><script type="math/tex; mode=display">L[f(t-t_0)]=F(s)e^{-st_0}</script><h3 id="频移"><a href="#频移" class="headerlink" title="频移"></a>频移</h3><p>若：</p><script type="math/tex; mode=display">L[f(t)]=F(s)</script><p>有：</p><script type="math/tex; mode=display">L[f(t)e^{-\alpha t}]=F(s+\alpha)</script><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>若：</p><script type="math/tex; mode=display">L[f(t)]=F(s)</script><p>有：</p><script type="math/tex; mode=display">L[f(at)]=\frac{1}{a}F(\frac{s}{a}), a>0</script><p><em>如果同时时移和缩放：</em></p><script type="math/tex; mode=display">L[f(at-b)u(at-b)]=\frac{1}{a}F(\frac{s}{a})e^{-s\frac{b}{a}}</script><h3 id="时域微分（一重和二重必记）"><a href="#时域微分（一重和二重必记）" class="headerlink" title="时域微分（一重和二重必记）"></a>时域微分（一重和二重必记）</h3><p>一重</p><script type="math/tex; mode=display">L\bigg[\frac{df(t)}{dt}\bigg]=sF(s)-f(0_-)</script><p>二重</p><script type="math/tex; mode=display">L\bigg[\frac{df^2(t)}{dt}\bigg]=s^2F(s)-sf(0_-)-sf^{'}(0_-)</script><p>通式</p><script type="math/tex; mode=display">L\bigg[\frac{df^n(t)}{dt}\bigg]=s^nF(s)-\sum ^{n-1}_{r=0}s^{n-r-1}f^{r}(0_-)</script><h3 id="初值定理（时域趋近于0时的s域）"><a href="#初值定理（时域趋近于0时的s域）" class="headerlink" title="初值定理（时域趋近于0时的s域）"></a>初值定理（时域趋近于0时的s域）</h3><script type="math/tex; mode=display">\lim_{t\rightarrow0^+}f(t)=f(0_+)=\lim_{s\rightarrow\infty}sF(s)</script><h3 id="终值定理（时域趋近于无穷时的s域）"><a href="#终值定理（时域趋近于无穷时的s域）" class="headerlink" title="终值定理（时域趋近于无穷时的s域）"></a>终值定理（时域趋近于无穷时的s域）</h3><script type="math/tex; mode=display">\lim_{t\rightarrow \infty}f(t)=\lim_{s\rightarrow0}sF(s)</script><h3 id="卷积定理"><a href="#卷积定理" class="headerlink" title="卷积定理"></a>卷积定理</h3><script type="math/tex; mode=display">L[f_1(t)*f_2(t)]=F_1(s)\cdot F_2(s)</script><h3 id="s域微分"><a href="#s域微分" class="headerlink" title="s域微分"></a>s域微分</h3><script type="math/tex; mode=display">L[t^nf(t)]=(-1)^n\frac{d^nF(s)}{ds^n}</script><h3 id="s域积分"><a href="#s域积分" class="headerlink" title="s域积分"></a>s域积分</h3><script type="math/tex; mode=display">L\bigg[\frac{f(t)}{t}\bigg]=\int_{s}^{\infty}F(s)ds</script><h1 id="拉普拉斯反变换"><a href="#拉普拉斯反变换" class="headerlink" title="拉普拉斯反变换"></a>拉普拉斯反变换</h1><h2 id="变换的两种方法"><a href="#变换的两种方法" class="headerlink" title="变换的两种方法"></a>变换的两种方法</h2><p>要从F(s)变回f(t)，通常来说有两种方法：</p><ul><li>部分分式展开法</li><li>留数定理计算：留数定理指出，如果一个函数在某个点处有一个孤立奇点（例如拉普拉斯变换里面的极点），那么该函数在该点的留数就是拉普拉斯反变换的系数。因此，通过计算其所有极点的留数，即可求得拉普拉斯反变换表达式。</li></ul><p>正如前面提及，拉普拉斯变换常用变换对进行计算，将f(t)或F(s)往变换对上凑，以此来简便计算实现变换。而部分分式展开法就是为此而设计的，该课程仅介绍该方法。</p><p>下面是常用的拉普拉斯变换对：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/3695f24fdd864ef5a57ac31601b2168b.png" alt="img"></p><h2 id="部分分式展开法"><a href="#部分分式展开法" class="headerlink" title="部分分式展开法"></a>部分分式展开法</h2><p>对于任意一个式子，都可以写成分数的形式，无论是真分数还是假分数，总之它是可以的。也就是说，我们可以把F(s)拆分成分母和分子两部分</p><script type="math/tex; mode=display">F(s)=\frac{A(s)}{B(s)}=\frac{a_ms^m+a_{m-1}s^{m-1}+...+a_{1}s+a_0}{b_ns^n+b_{n-1}s^{n-1}+...+b_{1}s+b_0}</script><h3 id="F-s-为真分式"><a href="#F-s-为真分式" class="headerlink" title="F(s)为真分式"></a>F(s)为真分式</h3><p>若F(s)为真分式，即，其分子的次数低于分母的次数，那么可作如下处理：</p><p>$B(s)$ 这一组多项式可以被因式分解<em>（因式分解就是：多项式$3x^2-2x-1 = (3x+1)(x-1)$）</em></p><p>因此F(s)可以被写成：</p><script type="math/tex; mode=display">F(s)=\frac{A(s)}{(s-p_1)(s-p_2)...(s-p_n)}</script>]]></content>
      
      
      <categories>
          
          <category> 大二下 </category>
          
          <category> 信号与系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟信号分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信传输理论-CH2-Data Transmission</title>
      <link href="/posts/5b823d72.html"/>
      <url>/posts/5b823d72.html</url>
      
        <content type="html"><![CDATA[<h1 id="传输技术简介"><a href="#传输技术简介" class="headerlink" title="传输技术简介"></a>传输技术简介</h1><p>数据传输是以电磁波为数据载体，在发射器和接收器之间通过传播介质进行传播。这种传播可以被分为:</p><ul><li>有引导（guided wave）：将波束引导至一个特定的物理路径</li><li>无引导（unguided wave）：波束自由传播</li></ul><p>能够将电磁波导向的传播介质称为 guided media, 例如双绞线，同轴线，光纤等，波导（Wave guide）等。在讨论传输的时候，会有一个名词叫“介质波导”，它通常是指的有别于导体的波导介质，如光纤。</p><p>无法对电磁波进行导向的传播介质成为unguided media, 也称为 wireless（无线）, 例如空气，真空，海水等。</p><div class="note info flat"><p>下面的介绍还包含：频率，频谱和带宽; 模拟信号和数字信号;</p><p>频谱和频率是什么（一般取大于半功率点的部分作为主频分量）;</p><p>数据速率(Data Rate)和带宽(Bandwidth) 的关系（这个关系其实就是通信原理里面那些，这里简单说了一下，特别强调了一下数字信号带宽和波形的影响（参考通信原理讲耐奎斯特带宽那节）；</p><p>$\uarr$ 这些内容都属于基础必备知识，前面的课程都已经涉及太多太多遍了，这里就不写了。要是有不记得的去百度一下$\uarr$</p></div><div class="note info flat"><p>signaling: 这个单词可以 1.表达物理层面的传播; 2. 表示发送一个信令（部分文献写作signalling来强调信令）; <strong>在这门课程中，它表示物理上的电磁波传播</strong></p></div><h1 id="数据和信号"><a href="#数据和信号" class="headerlink" title="数据和信号"></a>数据和信号</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><strong>模拟数据：</strong> 模拟数据是由数据源产生的，在某个区间内连续的值。例如语音，温度，压力等。</p><p><strong>数字数据</strong>：数据数据时离散值，例如文本或是字符串（离散二进制编码如ASCII，部分编码还包含校验码）。</p><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>在通信系统中，数据通过信号进行传输</p><h3 id="模拟信号"><a href="#模拟信号" class="headerlink" title="模拟信号:"></a>模拟信号:</h3><p>模拟信号是连续的可以通过各种介质传播的变化的电磁波。例如光纤内传播的信号，无线信号等。</p><ul><li>典型：语音信号的标准频谱范围：300-3400Hz。这是在保真和带宽成本间取的平衡值（原始语音频谱大约在300-7kHz）。</li></ul><h3 id="数字信号："><a href="#数字信号：" class="headerlink" title="数字信号："></a>数字信号：</h3><p>数字信号是通过线缆传播的一串电压脉冲(Voltage Pulses)。例如用低电平表示0，高电平表示1。理想的方波脉冲FT之后是Sa函数，因此占有无限的频宽；在带限信道中传输之后，会失真。</p><ul><li><p>一个数字信号失真的例子</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240314165920255.png" alt="image-20240314165920255" style="zoom:50%;" /></p></li></ul><h3 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h3><p>上面提及的模拟数据，数字数据，模拟信号，数字信号之间是可以相互装换的。模拟信号可以承载模拟数据，也可以承载数字数据；同样地，数字信号也可以承载模拟数据或数字数据。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240314170833680.png" alt="image-20240314170833680" style="zoom: 33%;" /></p><p><em>一个拓展：modem（调制解调器）</em></p><p><em>以前会去运营商办我网络会接一个电modem，现在普遍时光modem，又称光猫。其作用就是为光信号做调制解调</em></p><h3 id="模拟和数字传输"><a href="#模拟和数字传输" class="headerlink" title="模拟和数字传输"></a>模拟和数字传输</h3><p>模拟传输是将模拟数据调制成想要的形式的信号（如AM）后发射，其可以在guided media或unguided media上传输。信号模拟信号在长途传输过程中需要引入放大器来解决衰减。但放大器会连噪声一起放大。</p><p>数字传输是高点电压方波脉冲，其在未经调制成模拟信号前，只能在guided media内传输。<strong>而数字传输则可使用repeater将通信信息解码后重新调制无损发出，因此模拟传输相较于数字传输，有“不适配再生”的劣势。</strong>且传输成本比模拟信号更加便宜。但其主要缺点是数字信号传输比模拟信号传输更容易受到衰减的影响。</p><h1 id="传输损伤-五星级"><a href="#传输损伤-五星级" class="headerlink" title="传输损伤(五星级)"></a>传输损伤(五星级)</h1><div class="note danger flat"><p>下面这段五星级，但是私以为这一段的PPT就是百度百科的英文版，可以搜索“传输损伤”的百度百科看看…</p><p>传送门: <a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E6%8D%9F%E4%BC%A4/6118208#3">百度百科</a></p></div><p>对于任何通信系统，由于各种传输损伤，所接收的信号可能与所发送的信号不同。对于模拟信号，这些损伤会降低信号质量。对于数字信号，可以引入比特误差，使得二进制1被转换为二进制0，反之亦然。</p><p>最显著的三个损伤：</p><ul><li>衰减(Attenuation)和衰减失真(Attenuation distortion)</li><li>延迟失真(Delay distortion)</li><li>噪声(Noise)</li></ul><h2 id="衰减-Attenuation"><a href="#衰减-Attenuation" class="headerlink" title="衰减(Attenuation)"></a>衰减(Attenuation)</h2><p>在任何传输介质上，信号的强度都会随着距离的推移而下降。对于guided media，这种衰减通常是指数级的，因此通常表示为每单位距离的恒定分贝数。对于unguided media，衰减更大</p><p>衰减的损伤会作用于三个层面：</p><ul><li>信号的强度</li><li>信噪比降低</li><li>非线性失真(不同频段衰减程度不一样，attenuation various with frequency)</li></ul><p>强度的衰减和信噪比问题都可以通过放大器或中继器( amplifiers or repeaters)来解决。<strong>而非线性失真需要用均衡器来解决（equalizing），均衡器可以给不同的频段给予不同强度的补偿</strong>，这也就是音乐发烧友常说的”调eq”。</p><h2 id="延迟失真-Delay-distortion"><a href="#延迟失真-Delay-distortion" class="headerlink" title="延迟失真(Delay distortion)"></a>延迟失真(Delay distortion)</h2><div class="note info flat"><p>在通信系统中，有两种延迟：delay和latency ; latency强调是一个信号输入一个系统，系统处理造成的延迟。delay则是下文介绍的</p></div><p>时延失真的产生是由于在导向媒体上信号传播速度随频率的不同而改变。对频带有限的信号来说，在靠近中心频率的地方其传播速度趋于最快，而越靠近频带的两侧，传播速度越慢。因此，信号的不同频率成分到达接收器的时间也不同，从而导致了不同频率之间的相移。</p><p>也就是说，时延失真是接收到的信号因其频率成分延迟的不同而产生了失真。时延失真对数字信号尤为严重。不管用的是模拟信号还是数字信号来传输一个比特串，由于延迟失真的存在，某个比特的一些频率成分会溢出到其他比特上，因此会产生<strong>码间串扰</strong>。它是传输信道上最高比特速率受限的一个主要因素。</p><h2 id="噪声-Noise"><a href="#噪声-Noise" class="headerlink" title="噪声(Noise)"></a>噪声(Noise)</h2><p>噪声主要可分为：</p><ul><li>热噪声（Thermal noise）:</li><li>互调噪声（Intermodulation noise）</li><li>串扰（Crosstalk）</li><li>冲激噪声（Impulse noise）</li></ul><h3 id="热噪声"><a href="#热噪声" class="headerlink" title="热噪声"></a>热噪声</h3><p><strong>热噪声（thermal noise）</strong>是由电子的热运动造成的。热噪声存在于所有的电子设备和传输媒体中，并且是温度的函数。热噪声均匀地分布在通信系统常用的频率范围内，因此它通常称为<strong>白噪声</strong>。热噪声是无法消除的，这就为通信系统的性能带来一个上限。由于卫星地面接收到的信号本来就很弱，因此热噪声对卫星通信的影响最为严重。</p><p>在任何设备和导体中，1Hz带宽内存在的热噪声的值都是：</p><script type="math/tex; mode=display">N_0=kT(W/Hz)</script><p>其中：</p><p>$N_0$ =每1Hz的噪声功率密度</p><p>k=玻尔兹曼常数$1.38\times 10^{-23}J/k$</p><p>T =开氏温度</p><p><em>举个例子</em></p><p><em>在17摄氏度（290K）的房间内，每1Hz噪声功率密度是：</em></p><script type="math/tex; mode=display">N_0=(1.38\times 10^{-23}\times 290=4\times10^{-21}W/Hz</script><p>有了单位密度，乘上带宽即可得到频带内的白噪声功率$N$</p><script type="math/tex; mode=display">N=kTB</script><p>写成dB形式就是（单位:dBW）</p><script type="math/tex; mode=display">N=10logK+10logT+10logB</script><p><em>举个例子：</em></p><p><em>温度为294K, 带宽为10Mhz时，接收器热噪声为：</em></p><script type="math/tex; mode=display">N=-228.6dBW+10log(294)+10log(10^7)</script><h3 id="互调噪声（intermodulation-noise）"><a href="#互调噪声（intermodulation-noise）" class="headerlink" title="互调噪声（intermodulation noise）"></a>互调噪声（intermodulation noise）</h3><p>当不同频率的信号共享同一传输媒体时，可能会产生<strong>互调噪声（intermodulation noise）</strong>。互调噪声带来的影响是产生了额外的信号，其频率为两个原频率之和或差，也可能是若干倍的原频率。例如，将频率分别为f1和f2的信号混合在一起，就有可能产生频率为f1+f2的能量。这一生成信号有可能会干扰频率为f1+f2的正常信号</p><p>互调噪声的产生由于在发送器、接收器中存在非线性因素，或者是传输系统受到干扰。理想情况下，这些系统组成器件以线性系统方式工作，就是说，输出等于输入的常倍数。然而在任何实际系统中，输出是输入的较复杂函数。过度非线性的产生可能是由于元器件发生了故障或加载的信号过强。也正是在这些情况下会出现频率相加或相减的情况。</p><p><strong>串扰（crosstalk）</strong></p><p>如果你曾经在打电话时听到过别人的对话，那么你对<strong>串扰（crosstalk）</strong>已经有过亲身经历。它是我们不希望看到的信号通道之间的耦合现象。它的产生是由于载有多路信号的相邻双绞线之间发生电耦合，有时在同轴电缆之间也会发生，不过很少见。当微波天线收到不需要的信号时也可能发生串扰现象。</p><p><strong>冲激噪声（impulse noise）</strong></p><p>以上讨论的所有类型的噪声都是可预测的，并有着比较固定的强度。因此在设计传输系统时有可能妥善处理这些问题。然而是非连续的，由不规则的脉冲或持续时间短而振幅大的噪声尖峰组成。它的产生有多种原因，包括外部电磁波干扰（如雷电）以及通信系统本身的故障和缺陷。</p><p>通常对模拟数据来说，冲激噪声引起的麻烦并不大。例如，话音传输可能被短暂的咔嚓声打扰，但并不影响对话音的理解。然而，在数字数据通信中，冲激噪声是差错的主要原因。例如，一个持续时间为0.01s的能量尖峰不会破坏任何话音数据，但有可能会毁掉560bits的以56kbps速率传输的数字数据。</p><h1 id="信道容量-五星级，但是不是难点"><a href="#信道容量-五星级，但是不是难点" class="headerlink" title="信道容量(五星级，但是不是难点)"></a>信道容量(五星级，但是不是难点)</h1><div class="note danger flat"><p>五星级小节！</p></div><p>信道容量的定义：道能无错误传送的最大信息率。对于只有一个信源和一个信宿的单用户信道，它是一个数，单位是比特每秒或比特每符号。</p><p>信道容量与：1.数据速率；2.带宽; 3.噪声 4. 误码率 有关</p><h2 id="耐奎斯特带宽："><a href="#耐奎斯特带宽：" class="headerlink" title="耐奎斯特带宽："></a>耐奎斯特带宽：</h2><p>奈氏准则指出在带宽有限下，<strong>码元传输</strong>的速率是受限的（<strong>不考虑噪声</strong>）。详见通信原理，就是理论最大符号率2B</p><p>（注意！这里不是信息传输速率，而是码元，可以通过增加调制的电平数量，也就是每个码元包含的比特数量来提高信息传输速率）</p><p><em>举个例子：</em></p><p><em>假设一个经过modem调制的数字语音信号，带宽为3100Hz, 那么耐奎斯特信道容量就是2B=6200Baud，假设使用M=8的调制（M同通信原理数字信号频带调制部分，例如QPSK M=4, 8PSK M=8）那么信道最大比特速率就是18600bps</em></p><h2 id="香农信道容量公式"><a href="#香农信道容量公式" class="headerlink" title="香农信道容量公式"></a>香农信道容量公式</h2><p>香农公式带宽受限且<strong>有高斯白噪声干扰</strong>的信道极限、无差错的<strong>信息传输速率</strong>。公式为：</p><script type="math/tex; mode=display">C=B\times log_2(1+SNR)</script><p>从这门课的角度来看，香农公式考虑的噪声主要是热噪声，而缺失了串扰，冲击噪声等。因此香浓噪声其实也是一个较为理想的上限容量（在考虑香农公式时，耐奎斯带宽是纯纯的理想容量）。</p><p><em>举个例子：</em></p><p><em>假设信道始于3MHz止于4Mhz, SNR=24dB(二进制信道，M=2)</em></p><script type="math/tex; mode=display">带宽B=4-3=1MHz,SNR=10^{2.4}=251</script><p><em>香农容量下：</em></p><script type="math/tex; mode=display">C=10^6 \times log_2(1+251)=10^6\times 8=8Mbps</script><p><em>这个是该噪声环境下的极限容量，耐奎斯特带宽指出了一定带宽下无噪声的码元速率，那么一个码元需要包含多少比特才能达到香农公式指出的极限比特速率呢？</em></p><script type="math/tex; mode=display">C=2Blog_2M=8\times10^6</script><p><em>算出M=16。也就是需要16电位等级的调制，来达到香农传输带宽上限。</em></p><h2 id="和误码率的强相关项：-E-b-N-0"><a href="#和误码率的强相关项：-E-b-N-0" class="headerlink" title="和误码率的强相关项：$E_b/N_0$"></a>和误码率的强相关项：$E_b/N_0$</h2><p>在$E_b/N_0$这个式子中，<strong>$E_b$代表每个bit蕴含的能量，而$N_0$代表每Hz的噪声能量密度</strong></p><p>假设数据的bit传输速率为$R(bit/s)$，则单bit持续时间为$T_b=1/R$</p><p>若信号的功率密度为$S(W)$，那么，每个bit蕴含的能量就是：$E_b=S\times T_b=S/R$</p><p>前面提到过，在热噪声模型下，单位Hz噪声密度$N_0=kT$，其中 玻尔兹曼常数$k=1.38\times 10^{-23}J/k$</p><p><strong>1.那么$E_b/N_0$可以阐释为和信号功率S相关的表达式：</strong></p><script type="math/tex; mode=display">\frac{E_b}{N_0}=\frac{S/R}{N_0}=\frac{S}{kTR}</script><p>以dB形式可以写成：</p><script type="math/tex; mode=display">\bigg(\frac{E_b}{N_0}\bigg)_{dB}=S_{dBW}-10log(R)-10log(k)-10logT</script><script type="math/tex; mode=display">=S_{dBW}-10log(R)+228.6dBW-10logT</script><p>因为$E_b/N_0$和误码率存在某种函数关系，假设在已知误码率为n时对应$E_b/N_0=m$，根据上述信号功率S相关的表达式，即可算出接收信号的强度$S_{dBW}$。</p><p><em>举个例子：</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240616150256068.png" alt="image-20240616150256068"></p><p><strong>2.这个式子还可变成和频谱效率(spectral efficiency)相关的表达式：</strong></p><p>因为信道噪声$N=N_0B$ (B是带宽)</p><script type="math/tex; mode=display">\frac{E_b}{N_0}=\frac{S/R}{N_0}=\frac{S}{N}\cdot\frac{B}{R}</script><p>上式中$S/N$恰好就是信噪比。将香农公式$C=B\times log_2(1+SNR)$逆推出来：</p><script type="math/tex; mode=display">SNR=2^{C/B}-1</script><p>香农公式这中的C代表信道最高传输bit速率，恰好就是这里的R。因此，$\frac{E_b}{N_0}$可以写成：</p><script type="math/tex; mode=display">\frac{E_b}{N_0}=(2^{C/B}-1)\cdot\frac{B}{C}</script><p>这个$C/B$，意为单位带宽的比特传输速率，恰好就是频谱效率(spectral efficiency)</p><p><em>例题：Suppose we want to find the minimum $E_b/N_0$ required to achieve a spectral efficiency of 6 bps/Hz</em></p><script type="math/tex; mode=display">E_b/N_0=(2^6-1)\cdot\frac{1}{6}=10.5</script><p>化为dB形式：</p><script type="math/tex; mode=display">10log(10.5)=10.212dB</script>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 电信传输理论与工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代通信网络-LC1-Overview</title>
      <link href="/posts/cfa858d3.html"/>
      <url>/posts/cfa858d3.html</url>
      
        <content type="html"><![CDATA[<div class="note danger flat"><p>本篇笔记是鲍宁海老师上课的口述记录而成，纯纯他如何讲我如何记。没有经过过多整理，所以内容可能有些乱且杂糅。但是考试重点均有cover</p></div><div class="note info flat"><p>本节对应参考书章节CH1</p></div><h1 id="三个时代"><a href="#三个时代" class="headerlink" title="三个时代"></a>三个时代</h1><h2 id="三个时代-1"><a href="#三个时代-1" class="headerlink" title="三个时代"></a>三个时代</h2><p>（这一部分讲了2个星期 -&gt; _ -&gt;）</p><h3 id="横向对比"><a href="#横向对比" class="headerlink" title="横向对比"></a>横向对比</h3><div class="table-container"><table><thead><tr><th></th><th style="text-align:center">Generation-1</th><th style="text-align:center">Generation-2</th><th style="text-align:center">Generation-3</th></tr></thead><tbody><tr><td>描述</td><td style="text-align:center">仅又很少的终端，能够接入网络的用户有限。采用模拟信号，Qos不太好</td><td style="text-align:center">终端的价格开始逐渐下降（经历了一段时间才降下来），用户可以承担。但服务的费用很高，用户安装了终端却不舍得用。开始采用数字信号。在技术层面遇到了频率容量(capacity) 和 交移 (handover) 问题</td><td style="text-align:center">传统电信业务的资费下降，用户可以承受。要继续扩大市场就需要发展更多的服务。</td></tr><tr><td>关注的技术</td><td style="text-align:center">Transmission</td><td style="text-align:center">Switching</td><td style="text-align:center">Soft-switch</td></tr><tr><td>关键词</td><td style="text-align:center">Reachability</td><td style="text-align:center">Accessibility</td><td style="text-align:center">Realizability</td></tr><tr><td>拓补结构</td><td style="text-align:center">mesh</td><td style="text-align:center">star</td><td style="text-align:center">hybrid (mesh + star)</td></tr></tbody></table></div><h3 id="第二时代存在的两个问题的解释"><a href="#第二时代存在的两个问题的解释" class="headerlink" title="第二时代存在的两个问题的解释"></a>第二时代存在的两个问题的解释</h3><ul><li>Handover:</li></ul><p>当你处于两个基站的覆盖交界地带时，在基站与基站间的切换存在问题。这个在2G的网络网络技术基础上无法解决。</p><ul><li>Capacity</li></ul><p>相同频率间存在干扰，可使用的频段容量不足，一旦遇到人员密集区域，网络会直接被拖崩溃，这是第二阶段衍生至第三阶段的关键原因。为解决这个问题，产生了SDMA (Space Division Multiple Access, 空分复用) 技术</p><h3 id="第三时代的网络拓补"><a href="#第三时代的网络拓补" class="headerlink" title="第三时代的网络拓补"></a>第三时代的网络拓补</h3><p>正如第三个阶段中 hybrid 这个拓补结构所言，在第三个时代中传输网络被分为了接入网（Access Network, AN）和骨干网（Core Network, CN）。</p><h3 id="通信发展——性能和经济的平衡"><a href="#通信发展——性能和经济的平衡" class="headerlink" title="通信发展——性能和经济的平衡"></a>通信发展——性能和经济的平衡</h3><ul><li>在第一个时代，节点之间的交换能力不强，为了保证可达性，采用mesh拓补提高性能。纵然mesh部署成本高，最开始的用户有点，并未产生很大问题。</li><li>在第二个时代，用户数量开始增长，mesh拓补的成本升高。为了提高可接入性，网络主要使用star拓补。</li><li>第三个时代，业务多样化发展，通信用户众多。为了保证用户可接入性，用户链接使用star拓补，其余网络使用可靠性更高的其他混合拓补方式。</li></ul><h1 id="广域网（Wide-Area-Networks-WAN）"><a href="#广域网（Wide-Area-Networks-WAN）" class="headerlink" title="广域网（Wide Area Networks WAN）"></a>广域网（Wide Area Networks WAN）</h1><h2 id="基本交换技术（理论）"><a href="#基本交换技术（理论）" class="headerlink" title="基本交换技术（理论）"></a>基本交换技术（理论）</h2><p>交换技术有很多种，但是基本都基于<strong>电路交换</strong>和<strong>分组交换</strong>这两种。</p><h3 id="电路交换（circuit-switching）"><a href="#电路交换（circuit-switching）" class="headerlink" title="电路交换（circuit switching）"></a>电路交换（circuit switching）</h3><p>电路交换(circuit switching)是指使用专用物理通信路径连接通信终端的交换技术。连接建立开始时，通信系统分配给它的资源（通道、带宽、时隙、码字等等），通信活动的整个过程中，这个连接将始终占用着。电路交换总体可以分为这三步：</p><ol><li><strong>建立连接：</strong>分配通信资源。即在使用电路交换打电话前，必须先拨号请求<strong>建立连接</strong>。当被叫用户听到电话交换机送来的拨号音并摘机后，从主叫端建立连接，即一条<strong>专用的物理通路</strong>。线路一旦被分配，在未释放之前，其他站点将无法使用，即使某一时刻线路上并没有数据传输。</li><li><strong>通话：</strong>一直占用通信资源。</li><li><strong>释放连接：</strong>归还通信资源</li></ol><p>在要求数据按先后顺序且以恒定速率快速传输的情况下，使用电路交换是较为理想的选择。因此，当传输实时数据时，诸如音频和视频；或当服务质量（QOS）要求较高时，通常使用电路交换网络。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240315145652897.png" alt="image-20240315145652897"></p><p>那么这个物理线路在实际电话通信上是如何体现的呢？以TDM举例，就是分配一个 Ts 给你。例如上图电话①被分配了Ts1,那么在这个通信结束之前，Ts1永远属于它。</p><p>物理通路将不同的终端连接，这个物理通路又被分为Ts0-Ts31个逻辑信道，每个终端只从物理信道传输的信号中提取中属于自己的逻辑信道的东西。例如下图电话①提取Ts1，电话②提取Ts31，这就是”Logical channel dedicated on each link”的意思</p><p><strong>这种交换方式数据接收到的顺序和实时性都能保证</strong></p><p>我们成这样的交换”立即损失制”，意为无法发起一次服务，就无法通信</p><p><em>电路交换最常见的例子是电话网络，但时至今日，电话通信背后的交换技术已经更新了。</em></p><h3 id="分组交换（packet-switching）"><a href="#分组交换（packet-switching）" class="headerlink" title="分组交换（packet switching）"></a>分组交换（packet switching）</h3><p>分组交换（packet switching）是将数据打包成分组（Packets）进行传输、交换。数据包包含标头(Header)，和负载(Payload)。标头包含分组的基本信息，例如地址信息，管理信息等，类似于快递面单上  “收货地址：重庆邮电大学”（地址） 和 “买家要求保密发货”（控制信息等） ；负载即是数据，也就是包裹内”保密发货”的东西。</p><p>分组通过最优路径（取决于 路由算法）路由到目标。两个主机之间传送的分组不一定要沿着相同的路径传送，即，你的巨型手办可能头发一个包裹，身体发一个包裹，腿又是一个包裹，三个包裹沿着不同路径送过来。๑乛◡乛๑</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240315151346721.png" alt="image-20240315151346721"></p><p>在这样的交换技术下物理通路上的不同设备共享该通路上的资源，且仅当有通信发生时，才占用资源。</p><p>分组交换又可以拓展两种网络：虚电路(Virtual Ciruit)和数据报（Datagram）</p><p><em>这两种网络后续会结合协议讲路由时深入阐述，这里看个概念即可。</em></p><ul><li><strong>虚电路（VC）</strong>:属于一条虚电路的分组将在它的首部携带一个 VC 号。因为一条虚电路在每条链路上可能具有不同的VC号，所以每台中间路由器必须用一个新的VC号替代每个传输分组的VC号。 这个新的 VC 号从转发表中获得。VC连接下，会确保信息已经送达。</li><li><strong>数据报（Datagram）</strong>:在数据报网络中，每当一个端系统要发送分组时，它就为该分组加上目的地端系统的地址，然后将该分组推进网络中。数据报网络没有虚电路的概念，分组从源向目的地传输通过一系列路由器。路由器中的每个都使用该分组的目的地址来转发该分组。路由器有一个将目的地址映射到链路接口的转发表，当分组到达路由器时，该路由器使 用该分组的目的地址在该转发表中查找适当的输出链路接口。然后，路由器有意识地将该分 组向该输出链路接口转发。数据报连接下，数据是否送达不会被确认。</li></ul><p><strong>这种交换方式可以更高效地利用资源</strong></p><h3 id="电路交换和分组交换的对比"><a href="#电路交换和分组交换的对比" class="headerlink" title="电路交换和分组交换的对比"></a>电路交换和分组交换的对比</h3><ul><li>电路交换：一个连接双方的恒定的物理上的管道已经存在，只需要朝这个塞数据即可传达给对方。</li><li>分组交换：每一个数据包都需要检查它需要去哪里，该朝哪里转发，并为其选择路径。</li></ul><p><em>这也就是之前的电话都是按分钟计费（资源一直分配给你），但是网络却是按流量计费（有包才占用资源）的的原因</em></p><h2 id="典型的交换技术（实际）-了解"><a href="#典型的交换技术（实际）-了解" class="headerlink" title="典型的交换技术（实际）(了解)"></a>典型的交换技术（实际）(了解)</h2><h3 id="帧中继（frame-relay）"><a href="#帧中继（frame-relay）" class="headerlink" title="帧中继（frame relay）"></a>帧中继（frame relay）</h3><p>帧中继（frame relay）采用的是分组交换（Packet Switching），它将数据放在可变大小的“帧”内。帧除分组交换必须的地址外，还包含一些纠错信息。网络在传送过程中对帧结构、传送差错等情况进行检查，同时，通过对帧中地址段（DLCI）识别，实现用户信息的统计复用。</p><ul><li>其可以在在一对一或者一对多的应用中快速而低廉的传输数位信息。</li><li>它可以使用于语音、数据通信。既可用于局域网（LAN）也可用于广域网（WAN）的通信（这个技术现在已经淘汰了）</li></ul><h3 id="异步传输模式（-Asynchronous-Transfer-Mode-ATM）"><a href="#异步传输模式（-Asynchronous-Transfer-Mode-ATM）" class="headerlink" title="异步传输模式（ Asynchronous Transfer Mode, ATM）"></a>异步传输模式（ Asynchronous Transfer Mode, ATM）</h3><div class="note warning flat"><p>ATM这里是重点，将在后面章节里面详细介绍。这里只需要知道有这个存在就行。</p></div><p>异步传输模式（ATM）是指一种采用异步时分复用，是<strong>电路交换和分组交换</strong>的融合，以<strong>信元</strong>（cell）为单位的通信方式，信元在这里就对应分组交换中的packet. </p><p>这个技术目前只在部分私有部署网络中使用。（而且使用原因是重新部署需要成本）</p><h2 id="面向连接和面向无连接"><a href="#面向连接和面向无连接" class="headerlink" title="面向连接和面向无连接"></a>面向连接和面向无连接</h2><p>在后续的学习中，还会看到面向连接和面向无连接两种类型的协议。面向连接和面向无连接的核心区别是发送数据之前是否需要建立连接（也就是和对方打个招呼先，对方会话了再继续通话），现在听起来似乎有点抽象，不妨在学习到了TCP/UDP的时候再回过头来看看它。比较严格地定义来说，它们的区别在于：</p><ul><li>面向连接（connection-oriented）：在发送之前需要先建立连接（知道对方存在并准备好接收），再进行传输。在通信完成时，需要断开连接。</li><li>面向无连接（connectionless）：不需要和对方建立连接（无需知道对方是否存在），直接在网络上传输数据。网络尽最大可能保证数据到达。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大三下 </category>
          
          <category> 现代通信网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part1-Timer</title>
      <link href="/posts/346c9b2.html"/>
      <url>/posts/346c9b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Recall：RC电路的充放电公式"><a href="#Recall：RC电路的充放电公式" class="headerlink" title="Recall：RC电路的充放电公式"></a>Recall：RC电路的充放电公式</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014210159555.png" alt="image-20241014210159555"></p><ul><li>时间常数:$τ=RC $</li><li>充电：$V_c=(1-e^{-t/τ})$</li><li>放电：$V_c=V_i\cdot e^{-t/τ}$</li><li>充放电时间：5τ</li></ul><p>上面这个充放电的e就是下式中提到$ln$的来源。</p><h1 id="555定时器"><a href="#555定时器" class="headerlink" title="555定时器"></a>555定时器</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>555定时器内部电路结构图如下</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014210630457.png" alt="image-20241014210630457"></p><p>其有以下几种工作模式：</p><ul><li><p>非稳态：做为一个电子振荡器，输出PWM波。</p></li><li><p>单稳态：类似于延时开关，收到一个输入脉冲时，电平跳变一段时间，随后跳回原来电平</p></li><li><p>双稳态：受到两个输入控制，第一个收到脉冲时使芯片保持高电平输出，第二个收到脉冲时使芯片保持低电平输出。</p></li><li><p>施密特触发器：稳定输入电平。</p></li></ul><p>555timer支持流入或流出最高200ma的电流（具体的可能不一样，需要参考制造商手册），驱动更高电流需要放大电路。</p><h2 id="非稳态-A-Stable-电路"><a href="#非稳态-A-Stable-电路" class="headerlink" title="非稳态(A-Stable)电路"></a>非稳态(A-Stable)电路</h2><h3 id="电路分析"><a href="#电路分析" class="headerlink" title="电路分析"></a>电路分析</h3><p>非稳态电路图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014210906958.png" alt="image-20241014210906958"></p><ol><li>在上电一瞬间，$Vc=0,$ 比较器1输出0 (reset=0)，比较器2输出1 (set=1)；所以SR Flip-Flop输出高电平，同时Q1关闭使C充电。</li><li>当充电$VTL&lt;Vc&lt;VTH$时，比较器1和2都输出0，此时SR锁存器保持。</li><li>当充电vc&gt;VTH时，比较器1输出1 （reset=1），比较器2输出0 (set=0)；输出低电平，同时Q1打开使得C放电。</li><li>当放电至$VTL&lt;Vc&lt;VTH$，保持。</li><li>当放电至vc&lt;VTL时，比较器1输出0 (reset=0)，比较器2输出1 (set=1)；此时输出高电平，Q关闭使得C充电。</li></ol><p>因此，其波形为：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014211012792.png" alt="image-20241014211012792"></p><p>电容充电时，$R=R_A+R_B$，故时间常数$τ=C(R_A+R_B)$</p><p>电容放电时，$R=R_B$,故$τ=R_B C$</p><p>由于$V_{TH}=\frac{2}{3} VCC,V_{TL}=\frac{1}{3} VCC$,得到充电时间$T_H$和放电时间$T_L$的公式（下式中0.69来自于$ln(2)\approx0.69$）：</p><script type="math/tex; mode=display">T_H=0.69C(R_A+R_B )</script><script type="math/tex; mode=display">T_L=0.69CR_B</script><p>震荡周期T为：</p><script type="math/tex; mode=display">T=T_H+T_L=0.69C(R_A+2R_B)</script><p>占空比D为：</p><script type="math/tex; mode=display">Duty\ cycle=\frac{T_H}{(T_H+T_L )}=\frac{(R_A+R_B)}{(R_A+2R_B )}</script><p>如果RA和RB相等，那么67%T的时间会是高电平33%T的时间会是低电平。</p><h3 id="50-占空比设计方法"><a href="#50-占空比设计方法" class="headerlink" title="50%占空比设计方法"></a>50%占空比设计方法</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014211436645.png" alt="image-20241014211436645"></p><p>上图电路在加上二极管后允许电容直接通过RA充电，但也因为二极管产生了0.7V的压降，造成RB有一定的漏电流，因此公式变为</p><script type="math/tex; mode=display">T_H=0.8R_A C</script><script type="math/tex; mode=display">T_L=0.7R_B C</script><script type="math/tex; mode=display">T=0.7(R_A+R_B)C</script><script type="math/tex; mode=display">D=\frac{R_A}{R_A+R_B}</script><p>这里$T_H,T_L$充放电收到二极管影响不均，因此再改进一下:</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014211635561.png" alt="image-20241014211635561"></p><p>此时充放电都需要收到二极管的压降影响，而且杜绝了漏电流的存在。新的公式也变为：</p><script type="math/tex; mode=display">T_H=0.8R_A C</script><script type="math/tex; mode=display">T_L=0.8R_B C</script><script type="math/tex; mode=display">T=0.8(R_A+R_B)C</script><script type="math/tex; mode=display">D=\frac{R_A}{R_A+R_B}</script><h2 id="单稳态-Monostable-电路："><a href="#单稳态-Monostable-电路：" class="headerlink" title="单稳态(Monostable)电路："></a>单稳态(Monostable)电路：</h2><p>单稳态电路图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014211817923.png" alt="image-20241014211817923"></p><ol><li>在上电开始时，Vtrigger（上图中蓝色方波的位置）保持高电平，vc&lt;VTH，两个比较器都输出0；保持现状（输出0），Q打开接地，电容无法充电。</li><li>当Trigger收到低电平脉冲时，比较器1输出0 （reset=0），比较器2输出1（set=1）；输出1，同时Q关闭C开始充电。</li><li>当VTL&lt;vc&lt;VTH时，比较器1输出0（reset=0），同时Trigger因为脉冲时间很短已经回到0 (set=0)，保持现状（输出1）。</li><li>当vc&gt;VTH，比较器1输出1 （reset=1），比较器2输出0（set=0）；输出0，同时Q打开让电容再次接地无法充电</li></ol><p>整个充放电波形如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014212127266.png" alt="image-20241014212127266"></p><p><strong>电容充电时间(高电平保持时间)$T=CRln(3)≈1.1CR$</strong></p><h2 id="双稳态-Bistable-电路："><a href="#双稳态-Bistable-电路：" class="headerlink" title="双稳态(Bistable)电路："></a>双稳态(Bistable)电路：</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20241014212210229.png" alt="image-20241014212210229"></p><p>双稳态电路非常简单。</p><ol><li>在没有按键按下时，两个比较器输入都等于VCC&gt;VTH&gt;VTL，所以比较器输出0；输出保持现状。</li><li>在Trigger被按下时，比较器1输出0 （reset=0），比较器2输出1 （set=1），故输出高电平。释放按键后回到状态1稳定。</li><li>在Reset被按下时，比较器1输出1 (reset=1)，比较器2输出0 （set=0）;故输出低电平。释放按键后回到状态1稳定。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大三上 </category>
          
          <category> 电子系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滤波器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part1-Filter</title>
      <link href="/posts/a7a0e2d0.html"/>
      <url>/posts/a7a0e2d0.html</url>
      
        <content type="html"><![CDATA[<h1 id="滤波器基本参数"><a href="#滤波器基本参数" class="headerlink" title="滤波器基本参数"></a>滤波器基本参数</h1><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226174510849.png" alt="image-20240226174510849"></p><p>上图展示了滤波器通带、阻带、过渡带。</p><h3 id="特征角频率和特征频率-f-0-f-n-pole-frequency-nature-frequency"><a href="#特征角频率和特征频率-f-0-f-n-pole-frequency-nature-frequency" class="headerlink" title="特征角频率和特征频率($f_0/f_n$) pole frequency/ nature frequency"></a>特征角频率和特征频率($f_0/f_n$) pole frequency/ nature frequency</h3><p>它只与滤波用的电阻和电容元件的参数有关，通常对于带通(带阻）滤波器，称为带通(带阻）滤波器的中心角频率或中心频率$f_0$，是通带(阻带）内电压增益最大(最小）点的频率。</p><h3 id="滤波器的截止频率（-f-c-）cut-off-frequency"><a href="#滤波器的截止频率（-f-c-）cut-off-frequency" class="headerlink" title="滤波器的截止频率（$f_c$）cut-off frequency"></a>滤波器的截止频率（$f_c$）cut-off frequency</h3><p>一般地是指幅度响应比通带低3 dB时的频率。无论是什么样的滤波器，截止频率一般都是指-3db的位置，也就是说从滤波器的通带的增益算起，下降-3db的位置。</p><p><strong>Chenqiao原话：但是一些文献里面认为$f_0$就是截止频率$ f_c $，截止频率不一定需要在-3dB point。这里需要根据实际情况讨论。</strong></p><hr><h1 id="无源滤波器-Passive-Filter"><a href="#无源滤波器-Passive-Filter" class="headerlink" title="无源滤波器(Passive Filter)"></a>无源滤波器(Passive Filter)</h1><p>电容、电抗和阻抗的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226174753964.png" alt="image-20240226174753964"></p><p>所有滤波器的公式都是将电容和电抗表现成阻抗的形式，代入电路得出的。</p><h2 id="一阶无源滤波器"><a href="#一阶无源滤波器" class="headerlink" title="一阶无源滤波器"></a>一阶无源滤波器</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226174630689.png" alt="image-20240226174630689"></p><h3 id="低通"><a href="#低通" class="headerlink" title="低通:"></a>低通:</h3><p>一阶低通滤波器：输出的电压等于夸在电容两端的电压，输出信号的相位</p><script type="math/tex; mode=display">\psi=\phi_0-arctan⁡(R/X_C )=\phi_0-arctan⁡(2πfRC)。</script><p><strong>因此，当到达截止频率$X_C=R$时，相位移动为-45°</strong></p><h3 id="高通："><a href="#高通：" class="headerlink" title="高通："></a>高通：</h3><p>输出的电压等于夸在电阻两端的电压，相位：</p><script type="math/tex; mode=display">\psi=\phi_0+π/2-arctan⁡(2πfRC)</script><p><strong>因此，当到达截止频率$X_C=R$时，相位移动为+45°</strong></p><h2 id="二阶滤波器"><a href="#二阶滤波器" class="headerlink" title="二阶滤波器"></a>二阶滤波器</h2><p>对于高阶滤波器，可以看成多个一阶串联，因此相位移动是叠加的。例如二阶高通滤波器截止频率的相位移动就是+90°</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175143051.png" alt="image-20240226175143051"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175159970.png" alt="image-20240226175159970"></p><h3 id="增益下降slope比较"><a href="#增益下降slope比较" class="headerlink" title="增益下降slope比较"></a>增益下降slope比较</h3><p>二阶滤波器可以看做两个一阶滤波器串联。因此假设对于某一频率，一个二阶滤波器由两个同样的一阶滤波器串联而成。一阶滤波器的slope=-20dB/Decade, 那么二阶滤波器slope就是一阶滤波器的平方也就是-40dB/ Decade. (Decade=f/fc(3dB))</p><p>对于二阶带通滤波器而言，两端的slope是两个独立的一阶滤波器，因此还是-20dB/ Decade.</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175308020.png" alt="image-20240226175308020"></p><hr><h1 id="有源滤波器-Active-Filter"><a href="#有源滤波器-Active-Filter" class="headerlink" title="有源滤波器(Active Filter)"></a>有源滤波器(Active Filter)</h1><p>有源滤波器带有运放，因此可以实现增益大于1（0dB）。且提供更好的输入输出阻抗。</p><h2 id="有源低通滤波器"><a href="#有源低通滤波器" class="headerlink" title="有源低通滤波器"></a>有源低通滤波器</h2><table>    <tr>        <td><center><img src= "https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175432892.png"></center></td>            <td><center><img src= "https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175447274.png"></center></td></table><p>其截止频率$f=1/2πRC$, </p><p>增益$DC Gain=(1+R_2/R_1 )$,</p><p>如果把低通滤波器的电阻放在反馈电阻上，同样能通过影响不同频率的放大倍数进行滤波。这样可以得到更好的输入阻抗。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175650304.png" alt="image-20240226175650304"></p><p>一阶有源HPF只需要把电容更换位置，放在信号输入端即可（也就是R1前面）。</p><h2 id="有源高通滤波器-二阶"><a href="#有源高通滤波器-二阶" class="headerlink" title="有源高通滤波器(二阶)"></a><strong>有源高通滤波器(二阶)</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175821801.png" alt="image-20240226175821801"></p><p>同无源滤波器分析的一样，有源一阶滤波器的slope斜率为-20dB/Decade, 二阶为-40dB/Decade.</p><h2 id="有源带通滤波器-二阶"><a href="#有源带通滤波器-二阶" class="headerlink" title="有源带通滤波器(二阶)"></a><strong>有源带通滤波器(二阶)</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175903538.png" alt="image-20240226175903538"></p><h2 id="有源带阻滤波器"><a href="#有源带阻滤波器" class="headerlink" title="有源带阻滤波器"></a><strong>有源带阻滤波器</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226175930196.png" alt="image-20240226175930196"></p><p>相当于是一个有源加法器，输入信号为一个高通的输出和一个低通的输出。增益-频率响应为高通和低通的叠加。<br>有源的二阶带通和带阻中心频率计算公式都是</p><script type="math/tex; mode=display">f_0=\sqrt{(f_L⋅f_H)}</script><p>陷波滤波器(Notch Filter) 是带阻滤波器的一种，只不过阻带很窄。（好像不是重点，没考过）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226180019446.png" alt="image-20240226180019446"></p><hr><h1 id="Sallen-Key-滤波器（五星级）"><a href="#Sallen-Key-滤波器（五星级）" class="headerlink" title="Sallen-Key 滤波器（五星级）"></a>Sallen-Key 滤波器（五星级）</h1><p>Sallen-key是设计有源滤波器设计的一种拓扑结构，VCVS（Voltage-controlled voltage-source）滤波器的变种，由麻省理工学院林肯实验室的R. P. Sallen and E. L. Key 在1955所提出。</p><h2 id="Q-Factor"><a href="#Q-Factor" class="headerlink" title="Q Factor"></a>Q Factor</h2><p>用频率定义Q：电路发生谐振的频率 ω0 称为谐振频率谐振峰两边 I ＝ （1/2） Im 处的频率值ω2j 和 ω1j 之间宽度定义为通频带宽度 BW，衡量一个谐振器在电路中性能的好坏。常用品质因数 Q ＝ ω0/ω2j －ω1j 来描述，Q 的物理意义是在谐振频率ω0 附近将具有更强的尖峰；对于离 ω0 较远的频率，则影响很弱或不影响。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226180243570.png" alt="image-20240226180243570"></p><p>对低通和高通滤波器而言,<strong>Q值等于滤波器电路电压增益（截止频率对应处的增益）模$|A_u |$与通带增益的模之比 $|A_{up}|$；对带通(带阻）滤波器而言，Q值等于中心角频率与通带(阻带）宽度bw之比。</strong></p><h2 id="S-K滤波器的整体模型"><a href="#S-K滤波器的整体模型" class="headerlink" title="S-K滤波器的整体模型"></a>S-K滤波器的整体模型</h2><p>图中电阻根据低通、带通、高通不同要求替换成电容。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226180316035.png" alt="image-20240226180316035"></p><p>计算通式为：</p><script type="math/tex; mode=display">\frac{V_{out}}{V_{in}}=\frac{Z_3\times Z_4}{Z_1\times Z_2 + Z_2\times Z_3 +Z_3 \times Z_4 +Z_1 \times Z_3}</script><h2 id="S-K低通-amp-高通滤波器"><a href="#S-K低通-amp-高通滤波器" class="headerlink" title="S-K低通&amp;高通滤波器"></a>S-K低通&amp;高通滤波器</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226180514237.png" alt="image-20240226180514237"></p><p>以低通滤波器为例：</p><script type="math/tex; mode=display">Z_1=R_1,Z_2=R_2,Z_3=\frac{1}{(sC_1 )},Z_4=\frac{1}{(sC_2 )}, 其中 s=jω</script><script type="math/tex; mode=display">A=\frac{\frac{1}{sC_1}\times \frac{1}{sC_2}}{R_1R_2+R_2\frac{1}{sC_1}+\frac{1}{sC_1}\times \frac{1}{sC_2}+R_1\frac{1}{sC_1}}</script><script type="math/tex; mode=display">=  \frac {1}{R_ {1}R_ {2}C_ {1}C_ {2}s^ {2}+R_ {2}C_ {2}s+1+R_ {1}C_ {2}s}</script><script type="math/tex; mode=display">=  \frac {1}{R_ {1}R_ {2}C_ {1}C_ {2}s^ {2}+C_ {2}s(R_ {1}+R_ {2})+1}</script><h3 id="特征频率"><a href="#特征频率" class="headerlink" title="特征频率:"></a>特征频率:</h3><p>（有时候认为$f_n=f_c$，$f_c$不在-3dB点，所以截止频率也是这个，具体要看题目）</p><script type="math/tex; mode=display">f_n=\frac{1}{(2\pi\sqrt{(R_1 R_2 C_1 C_2 )}}</script><h3 id="品质因子Q："><a href="#品质因子Q：" class="headerlink" title="品质因子Q："></a>品质因子Q：</h3><script type="math/tex; mode=display">Q=\frac{1}{R_1+R_2}(\sqrt{R_1 R_2 \frac{C_1}{C_2} })</script><p>当$R_1=R_2, C_1=C_2$ 时，Q 有：</p><script type="math/tex; mode=display">Q=\frac{1}{3-A}</script><p>其中A为放大电路的放大倍数。</p><h2 id="设计S-K滤波器的例题"><a href="#设计S-K滤波器的例题" class="headerlink" title="设计S-K滤波器的例题"></a>设计S-K滤波器的例题</h2><p>设计一个具有以下特性的二阶高通Sallen-Key滤波器电路：$f_C=200Hz，Q=3$。</p><p>解：</p><p>为简化计算，认为$R_1=R_2,C_1=C_2$</p><p>$f_c=1/2πRC=200Hz$, 选择c=100nF继续计算， R=7957Ω。（这道题认为$f_c=f_0$，PPT上举例原题）</p><script type="math/tex; mode=display">Q=3=\frac{1}{3-A},A=\frac{3Q-1}{Q}=2.667</script><p>所以放大电阻分别取10K和6K</p><h2 id="设计S-K滤波器生成类型的判定："><a href="#设计S-K滤波器生成类型的判定：" class="headerlink" title="设计S-K滤波器生成类型的判定："></a>设计S-K滤波器生成类型的判定：</h2><p>滤波器的类型是看 $\omega_0$ 处有没有bump来判定的，因此使用品质因素Q来判定</p><p>巴特沃夫滤波器没有bump,因此Q<1贝塞尔滤波器Q≈1切比雪夫滤波器Q>1</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240226181523677.png" alt="image-20240226181523677"></p>]]></content>
      
      
      <categories>
          
          <category> 大三上 </category>
          
          <category> 电子系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滤波器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part1-CH4-数字的表达和算数电路</title>
      <link href="/posts/202924f0.html"/>
      <url>/posts/202924f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h1><h2 id="半加法器"><a href="#半加法器" class="headerlink" title="半加法器"></a>半加法器</h2><p>半加法器接受两个输入：$x_1,x_2$ 并产生本位和进位两个输出。半加法器的真值表和实现电路如下图所示</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209031411970.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209031506622.png"></center></td>    </tr></table><h2 id="全加法器"><a href="#全加法器" class="headerlink" title="全加法器"></a>全加法器</h2><p>全加法器：输入$x_1,x_2,c$,三位（其中c表示上一位到这一位的进位）计算三位相加产生本位和进位。真值表和电路如下</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209031737291.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209031755498.png"></center></td>    </tr></table><h2 id="串行进位全加法器（Ripple-carry-Adder）"><a href="#串行进位全加法器（Ripple-carry-Adder）" class="headerlink" title="串行进位全加法器（Ripple-carry Adder）"></a>串行进位全加法器（Ripple-carry Adder）</h2><p>讲上述全加法器进行串联，前一个的进位输出连接至下一个的进位输入。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/clip_image002.gif" alt="图表, 箱线图  描述已自动生成" style="zoom:150%;" /></p><div class="note info simple"><p>原码（True form）反码(1’s complement ) 补码(2’s complement) 在 计算机组成与接口 中有更详细的介绍，此处略去。</p></div><h1 id="加法（减法）单元"><a href="#加法（减法）单元" class="headerlink" title="加法（减法）单元"></a>加法（减法）单元</h1><p>在计算机中，设计专门的减法电路划不来，因此使用补码+加法电路来计算减法。补码的求法是原码取反加一，因此设计如下的计算模块</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209032156159.png" alt="image-20240209032156159"></p><ul><li>当Add/Sub control 为0时，$y_i=y_i\oplus0=y_i$, 同时输入的基础进位$c_0$等于0。此时是正常调用全加法器计算加法。</li><li>当Add/Sub control为1时，$y_i=y_i\oplus1=\overline y_i$,同时$c_0=1$。相当于把序列$y$取反后加1（这个加一就是基础进位$c_0$加上来的）算成了补码的形式。故调用全加法器计算减法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大三上 </category>
          
          <category> 数字电路设计与可靠性工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part1-CH5-组合电路-构建快</title>
      <link href="/posts/5cb49984.html"/>
      <url>/posts/5cb49984.html</url>
      
        <content type="html"><![CDATA[<h1 id="多路复用器"><a href="#多路复用器" class="headerlink" title="多路复用器"></a>多路复用器</h1><p>多路复用器可以使用逻辑门制造，也可以使用Transition Gate 制造。一个多路复用器具有n个输入，那么就需要$log_{2}{n}$路选择信号。考试中最多出现4 to 1多路复用器。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209032918533.png" alt="image-20240209032918533"></p><p>例题：2x2交叉选择器</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209032958296.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209033003100.png"></center></td>    </tr></table><h2 id="使用多路复用器构建逻辑函数-五星级中的五星级"><a href="#使用多路复用器构建逻辑函数-五星级中的五星级" class="headerlink" title="使用多路复用器构建逻辑函数 五星级中的五星级"></a>使用多路复用器构建逻辑函数 <em>五星级中的五星级</em></h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209033354986.png" alt="image-20240209033354986"></p><p>如上图这个情况，使用$w_1,w_2$做为选择信号，可以把输出分为4个case：</p><ul><li>Case 0: $w_1=0,w_2=0$, 输出为0</li><li>Case 1: $w_1=0,w_2=1$, 输出等于$w_3$</li><li>Case 3: $w_1=1,w_2=0$,输出等于$w_3$</li><li>Case 4: $w_1=1,w_2=1$,输出等于1</li></ul><p>这样就实现了用多路复用器来实现基础的逻辑组合。除了简单的电路外，还可以使用逻辑门的输出和多路复用器进行组合，实现更复杂的电路。</p><p><strong>香农拓展定理（Shannon’s Expansion Theorem）</strong></p><p>香农拓展定理的核心理念是：对于一个Boolean function, 可以把它写为分解为$w_1 (…)+ \overline w_1 (…)$，也就是$w_1$和$\overline w_1$下的两种情况。这里的$w_1$为称为辅因子(cofactor). 那么对于一个有$w_n$项的布尔函数，把$w_1$作为辅因子，可以写成如下表达式：</p><script type="math/tex; mode=display">f(  w_ {1}  ,  w_ {2}  ,  \cdots  ,  w_ {n}  )=  \overline {w}_ {1}   \cdot  f(0,  w_ {2}  ,  \cdots  ,  w_ {n}  )+  w_ {1}   \cdot  f(1,  w_ {2}  ,  \cdots  ,  w_ {n}  )</script><p>几个分解的例题：</p><ul><li><strong>例1：</strong></li></ul><script type="math/tex; mode=display">f(  w_ {1}  ,  w_ {2}  ,  w_ {3}  )=  w_ {1}   w_ {2}  +  w_ {1}   w_ {3}  +  w_ {2}   w_ {3}</script><p>可分解为：</p><script type="math/tex; mode=display">f=  w_ {1}   w_ {2}  +  w_ {1}   w_ {3}  +(  w_ {1}  +  \overline {w_ {1}}  )  w_ {2}   w_ {3}  =  w_ {1}  (  w_ {2}  +  w_ {3}  +  w_ {2}   w_ {3}  )+  \overline {w_ {1}}  (  w_ {2}   w_ {3}  )=  w_ {1}  (  w_ {2}  +  w_ {3}  )+  \overline {w_ {1}}  (  w_ {2}   w_ {3}  )</script><ul><li><strong>例2</strong></li></ul><script type="math/tex; mode=display">f=  w_ {1}   \oplus   w_ {2}   \oplus   w_ {3}</script><p>可分解为：</p><script type="math/tex; mode=display">f=\overline w_1(w_ {2}   \oplus   w_ {3}  )+  w_ {1}  (  w_ {2}   \oplus   w_ {3}  )</script><ul><li>例3</li></ul><script type="math/tex; mode=display">f=  \overline {w}_ {1}   \overline {w}_ {3}  +  w_ {1}   w_ {2}  +  w_ {1}   w_ {3}</script><p>使用$w_1$作cofactor：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209034518973.png" alt="image-20240209034518973"></p><p>使用$w_1w_2$做cofactor：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209034545314.png" alt="image-20240209034545314"></p><hr><h1 id="解码器（decoders）"><a href="#解码器（decoders）" class="headerlink" title="解码器（decoders）"></a>解码器（decoders）</h1><p>解码器电路接受$n$个输入，产生$2^n$个输出。其作用是将收到的数据映射到对应的线路上去。举个例子，假设一个2bit decoder受到的数据是11，对应十进制是3（第四个数，从0开始数），那么它会把输出的第4条线置高电平。下面是一个2bit解码器的例子</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209034839045.png" alt="image-20240209034839045"></p><p>使用多路复用器的思路，也可以用两个2 to 4 decoder 合成一个 3 to 8 decoder</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209034926916.png" alt="image-20240209034926916"></p><p>解码器最重要的应用之一是用于存储信息的存储块寻址：</p><p>输入想要访问的存储单元的地址，解码器即可将那一行使能（此处可以b站了解一下NAND闪存或者固态硬盘工作原理）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209035138132.png" alt="image-20240209035138132"></p><hr><h1 id="多路分解器（Demultiplexer）"><a href="#多路分解器（Demultiplexer）" class="headerlink" title="多路分解器（Demultiplexer）"></a>多路分解器（Demultiplexer）</h1><p>Multiplexer使用不同switch输入组合选择输出不同的单条线路。Demultiplexer使用不同的Switch输入组合将单条线路输出到在多个不同的数据输出上。</p><p>Demultiplexer 可以用 Decoder实现，下图就是个例子。右图$w_1 w_2$被用作Switch 信号，En被用作输入信号。$w_1 w_2$控制En信号在那条路上被输出。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209035039471.png" alt="image-20240209035039471"></p><hr><h1 id="编码器-（Encoder）"><a href="#编码器-（Encoder）" class="headerlink" title="编码器 （Encoder）"></a>编码器 （Encoder）</h1><p>编码器是Decoder的逆过程，它接受$2^n$条输入，产生n个输出。n个输出呈现二进制数，用于表示是哪一条输入。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209035340281.png" alt="image-20240209035340281"></p><hr><h1 id="译码器（Code-Converter）"><a href="#译码器（Code-Converter）" class="headerlink" title="译码器（Code Converter）"></a>译码器（Code Converter）</h1><p>把输入翻译成特定的输出。例如用来点亮7为数码管的code converter, 会把二进制数字输入转化成对应的pattern输出。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/clip_image002.jpg" alt="img"></p><hr><h1 id="算术比较电路"><a href="#算术比较电路" class="headerlink" title="算术比较电路"></a>算术比较电路</h1><p>算术比较电路接受两个二进制数输入，记为A和B，比较A和B大小后输出A&gt;B,A=B,A&lt;B三个输出。</p><p>举个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209035554476.png" alt="image-20240209035554476"></p><p>在这个例子中，定义一个中间信号$i_k=\overline {a_k\oplus b_k}$</p><p>则：A=B可表示为：$AeqB=i_3i_2i_1i_0$，A&gt;B可表示为$AgtB= a_ {3}   \overline {b}_ {3}  +  i_ {3}   a_ {2}   \overline {b}_ {2}  +  i_ {3}   i_ {2}   a_ {1}   \overline {b}_ {1}  +  i_ {3}   i_ {2}   i_ {1}   a_ {0}   \overline {b}_ {0}$ ， A&lt;B可表示为：$AltB=\overline {AeqB+AgtB}$</p><p>算术比较电路也可被分为两类：有符号的，无符号的。</p><ul><li>有符号的：认为输入的数据是以补码的形式输入的，第一位为符号位，这类算术比较电路通常使用加法电路来比较大小</li><li>无符号的：认为输入数据都是原码格式，没有符号位，这类算术比较电路通常直接比较，上图就是无符号的例子</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大三上 </category>
          
          <category> 数字电路设计与可靠性工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32的UART通信(Register)</title>
      <link href="/posts/7c92a281.html"/>
      <url>/posts/7c92a281.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本工作原理-F4系列"><a href="#基本工作原理-F4系列" class="headerlink" title="基本工作原理(F4系列)"></a>基本工作原理(F4系列)</h1><p>F4的USART模块支持可编程字长、自定义波特率、单线半双工模式（RX，TX使用一条线，半双工收发）、唤醒MCU、可编程的停止位长度、可启用/禁用/设置模式的就校验位。其硬件模块如下</p><p>F4系列的USART模块还支持IRDA协议和LIN协议，这里不会详细介绍</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240205011104190.png" alt="image-20240205011104190"  /></p><p>USART硬件系统可以被拆分成如下几个重要部分：</p><p>控制初始化工作部分</p><ul><li>使能USART：由CR1寄存器UE位(bit13)进行控制，使能后USART模块才会开始工作，不用时失能减少功耗；</li><li>设置数据字长：F4系列支持8bit和9bit两种长度，通过对CR1寄存器M位(bit12)配置进行控制；</li><li>设置波特率：波特率生成器负责生成控制发送速率的时钟，由USART_BRR寄存器控制。</li><li>设置停止位长度：由CR2寄存器中bit[12:13]控制，支持0.5 / 1 / 1.5 / 2四种停止位长度</li><li>设置奇偶校验：CR1寄存器PCE位（bit10）控制。</li></ul><p>控制收发工作部分</p><ul><li>DR(数据寄存器)：用于寄存要发送的数据或者收到的数据。发送时，该寄存器内的值会被逐个读取至TDR，并通过移位寄存器逐个bit发送；接受时，RDR寄存器内的数值会逐个写入该寄存器。TDR和RDR寄存器用户不可交互，仅可以操作DR。</li><li>开始发送：当CR1寄存器中发送使能位（bit4）控制。当置 1 时，发送移位寄存器中的数据在 TX 引脚输出</li><li>在发送开始后，TDR寄存器内的数据会被传输到发送移位寄存器，开始自动传输。</li><li>在发送数据开始时，SCLK会产生时钟脉冲，以兼容同步通信。</li></ul><p>状态指示器部分</p><ul><li>TC(Transmission Complete)：当发送完成，且无新的数据被写入待发送时(即，TXE位为1，且没有新数据写入DR使得TXE置0)，TC位将会被置1表示发送完成；否则由硬件置0。该位可以CR1寄存器配置中断</li><li>TXE：DR寄存器和TDR寄存器均已完成数据交接，现数据在发送移位寄存起内准备发送；DR寄存器支持写入新的数据；<strong>TXE寄存器由硬件置位，超DR寄存器写入来清零</strong>。该位可由CR1寄存器配置中断。</li><li>RXNE：类似于TXE，用于指示接收输入已经传到RDR，接收移位寄存器可以接收下一帧数据。</li></ul><p>中断控制器部分</p><ul><li>中断使能分布在CR寄存器中，可在完成单次接收、完成单次发送、完成传输、出现错误、侦测到空闲等时候触发中断</li></ul><p>硬件流控部分</p><ul><li>nRTS：如果使能 RTS 流控制 (RTSE=1)，只要 USART 接收器准备好接收新数据，便会将 nRTS 变  为有效（输出低电平）。当接收寄存器已满时，会将 nRTS 变为无效（高电平）。</li><li>nCTS：如果使能 CTS 流控制 (CTSE=1)，则发送器会在发送下一帧前检查nCTS。如果 nCTS 有效（收到低电平），则会发送下一数据（假设数据已准备好发送，即 TXE=0）；否则不会进行发送。如果在发送过程中 nCTS 变为无效，则当前发送完成之后，发送器停止。</li></ul><h1 id="UART（F4系列）"><a href="#UART（F4系列）" class="headerlink" title="UART（F4系列）"></a>UART（F4系列）</h1><h2 id="计算波特率和波特率寄存器"><a href="#计算波特率和波特率寄存器" class="headerlink" title="计算波特率和波特率寄存器"></a>计算波特率和波特率寄存器</h2><p>在工作原理图的下方发送器时钟框图部分可以看出，串口时钟信号$f_{ck}$首先经过USARTDIV分频，然后再经过$8\times(2-OVER8)$分频产生，因此波特率计算公式如下：</p><script type="math/tex; mode=display">Baud=\frac{f_{ck}}{8\times(2-OVER8)\times USARTDIV}</script><p>其中USARTDIV这个常数是通过USART_BRR寄存器配置得到的，计算公式如下，这里面的OVER8是超采样的配置（通过USART_CR1寄存器配置，后续介绍），F1系列没有(F1系列默认16倍)。OVER8: “1”=8倍过采样； “0”=16倍过采样。</p><script type="math/tex; mode=display">USARTDIV=DIV\_Mantissa+(DIV\_Fraction/8\times(2-OVER8))</script><p>因此，在已知Baud时，可以算出USARTDIV，又可以根据USARTDIV算出配置USART_BRR寄存器的DIV_Mantissa和DIV_Fraction (整数和小数)部分的值。USART_BRR寄存器结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240205175018208.png" alt="image-20240205175018208"></p><p><strong>它本身有32位，但仅使用16位，高16位保持复位值（全0）。USART的整数部分写入15-4位，小数部分写入3:0位。当过采样设置为8倍（i.e., OVER8=1）时，小数仅使用2:0位，DIV_Fraction3 必须保持为0</strong></p><p>举个例子：要设置波特率为115200，OVER8=0, 串口总线频率$f_{ck}=72MHz$</p><script type="math/tex; mode=display">USARTDIV=\frac{72M}{16\times115200}=39.0625</script><script type="math/tex; mode=display">DIV\_Mantissa=39 (直接取整数部分即可)</script><script type="math/tex; mode=display">DIV\_Fraction=(USARTDIV-DIV\_Mantissa)\times16=0.625\times16=10</script><p>在计算DIV_Fraction部分时，计算出的结果不一定全部是整数，因此需要进行四舍五入。因为是以整形数据进行存储，所以计算出的结果会进行直接去小数操作。因此直接在DIV_Fraction计算值后面+0.5来进行四舍五入。</p><p>设置代码如下(16倍过采样)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> fck=72000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Baud=115200</span></span><br><span class="line"><span class="type">uint16_t</span> mantissa;</span><br><span class="line"><span class="type">uint16_t</span> fraction;</span><br><span class="line">mantissa=fck/(<span class="number">16</span>*Baud);</span><br><span class="line">fraction=(fck%(<span class="number">16</span>*Baud))*<span class="number">16</span>+<span class="number">0.5</span>;</span><br><span class="line">USART-&gt;BRR=(mantissa&lt;&lt;<span class="number">4</span>)+fraction;</span><br></pre></td></tr></table></figure><p>不难看出，因为小数部分进行了舍入操作，所以部分波特率会有误差。典型$f_{ck}$下设置波特率的误差在不同芯片的芯片手册中有详细介绍。这里给出一份计算真实波特率的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> fck 80000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Baud 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVER8 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> mantissa;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> fraction;</span><br><span class="line"><span class="type">float</span> USARTDIV;</span><br><span class="line"><span class="type">float</span> realBaud;</span><br><span class="line"><span class="type">float</span> r_USARTDIV;</span><br><span class="line">USARTDIV = fck/(<span class="number">8</span>*(<span class="number">2</span>-OVER8)*Baud); </span><br><span class="line">mantissa=<span class="type">int</span>(USARTDIV);</span><br><span class="line">fraction=(USARTDIV-mantissa)*(<span class="number">8</span>*(<span class="number">2</span>-OVER8))+<span class="number">0.5</span>;</span><br><span class="line">r_USARTDIV = mantissa + (fraction/<span class="number">16</span>); </span><br><span class="line">realBaud = fck/(<span class="number">16</span>*r_USARTDIV);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mantissa=%d,fraction=%d\n&quot;</span>,mantissa,fraction);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;real USARTDIV = %f, real Baud = %f&quot;</span>,r_USARTDIV,realBaud);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F4系列UART常用功能"><a href="#F4系列UART常用功能" class="headerlink" title="F4系列UART常用功能"></a>F4系列UART常用功能</h2><h3 id="奇偶校验控制"><a href="#奇偶校验控制" class="headerlink" title="奇偶校验控制"></a>奇偶校验控制</h3><p>通过配置CR1寄存器PCE和PS位，可控制奇偶校验使能和模式。启用奇偶校验后，会占用一个数据位填入奇偶校验位。假设数据字长设置为8bit，那么现在7bit是数据位，1bit是奇偶校验位。假设数据字长为9bit，那么8bit是数据位，1bit是就校验位。奇偶校验位填充在原MSB的位置。</p><h3 id="硬件流控制"><a href="#硬件流控制" class="headerlink" title="硬件流控制"></a>硬件流控制</h3><p>分别向 USART_CR3 寄存器中的 RTSE 位和 CTSE 位写入 1，可以分别使能 RTS 和 CTS 流  控制。</p><p>CTS：如果在发送数据时使  nCTS 输入无效，会在停止之前完成发送。如果使 nCTS 有效时数据已写入数据寄存器，则将延迟发送，直到 nCTS 有效。</p><p>RTS：只要 USART 接收器准备好接收新数据，便会将 nRTS 变  为有效（连接到低电平）。当接收寄存器已满时，会将 nRTS 变为无效，表明发送过程会在当前帧结束后停止。</p><h3 id="USART支持的中断事件"><a href="#USART支持的中断事件" class="headerlink" title="USART支持的中断事件"></a>USART支持的中断事件</h3><p>通过配置对应的使能寄存器，在以下事件产生时，可以触发USART中断。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240206232412336.png" alt="image-20240206232412336"></p><h2 id="UART（不含USART-LIDAR-LIN）关键寄存器"><a href="#UART（不含USART-LIDAR-LIN）关键寄存器" class="headerlink" title="UART（不含USART,LIDAR,LIN）关键寄存器"></a>UART（不含USART,LIDAR,LIN）关键寄存器</h2><h3 id="状态寄存器（USART-SR）指示的状态"><a href="#状态寄存器（USART-SR）指示的状态" class="headerlink" title="状态寄存器（USART_SR）指示的状态"></a>状态寄存器（USART_SR）指示的状态</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240206220951514.png" alt="image-20240206220951514"></p><ul><li><p><strong>位 9 CTS</strong>：CTS 标志 (CTS flag) </p><p>​    如果 CTSE 位置 1，当 nCTS 输入变换时，此位由硬件置 1。0：nCTS 状态线上未发生变化  1：nCTS 状态线上发生变化</p><p>​    通过软件将该位清零（通过向 该位中写入 0）。</p><p>​    如果 USART_CR3 寄存器中 CTSIE=1，则会生成中断。  （<em>注：F4系列UART4、5不适用</em>）</p></li><li><p><strong>位 7 TXE：</strong>发送数据寄存器为空 (Transmit data register empty) </p><p>​    当 TDR 寄存器的内容已传输到移位寄存器时，该位由硬件置 1。0：数据未传输到移位寄存器 1：数据传输到移位寄存器</p><p>​    如果 USART_CR1 寄存器  中 TXEIE 位 = 1，则会生成中断。</p><p>​    通过对 USART_DR 寄存器执行写入操作将该位清零。 </p></li><li><p><strong>位 6 TC</strong>：发送完成 (Transmission complete) </p><p>​    如果已完成对包含数据的帧的发送并且 TXE 置 1，则该位由硬件置 1。 0：传送未完成 1：传送已完成</p><p>​    如果 USART_CR1 寄存  器中 TCIE = 1，则会生成中断。</p><p>​    该位由软件序列清零（读取 USART_SR 寄存器，然后写入  USART_DR 寄存器）。TC 位也可以通过向该位写入‘0’来清零。建议仅在多缓冲区通信  时使用此清零序列。</p></li><li><p><strong>位 5 RXNE：</strong>读取数据寄存器不为空 (Read data register not empty) </p><p>​    当 RDR 移位寄存器的内容已传输到 USART_DR 寄存器时，该位由硬件置 1。0：未接收到数据 1：已准备好读取接收到的数据</p><p>​    如果  USART_CR1 寄存器中 RXNEIE = 1，则会生成中断。</p><p>​    通过对 USART_DR 寄存器执行读入  操作将该位清零。RXNE 标志也可以通过向该位写入零来清零。建议仅在多缓冲区通信时使  用此清零序列。 </p></li><li><p><strong>位 4 IDLE：</strong>检测到空闲线路 (IDLE line detected)</p><p>​     检测到空闲线路时，该位由硬件置 1。0：未检测到空闲线路 1：检测到空闲线路</p><p>​    如果 USART_CR1 寄存器中 IDLEIE = 1，则会生成中 断。</p><p>​    该位由软件序列清零（读入 USART_SR 寄存器，然后读入 USART_DR 寄存器）。 </p><p>​    <em>注意：直到 RXNE 位本身已置 1 时（即，当出现新的空闲线路时）IDLE 位才会被再次置 1。</em></p></li><li><p><strong>位 3 ORE：</strong>上溢错误 (Overrun error)</p><p>​     在 RXNE = 1 的情况下，当移位寄存器中当前正在接收的字准备好传输到 RDR 寄存器时，该  位由硬件置 1。 0：无上溢错误 1：检测到上溢错误</p><p>​    如果 USART_CR1 寄存器中 RXNEIE = 1，则会生成中断。该位由软件序列清零（读入 USART_SR 寄存器，然后读入 USART_DR 寄存器。</p><p>​    <em>注意：当该位置 1 时，RDR 寄存器的内容不会丢失，但移位寄存器会被覆盖。如果 EIE 位置 1，  则在进行多缓冲区通信时会对 ORE 标志生成一个中断。</em></p></li><li><p><strong>位 2 NF：</strong>检测到噪声标志 (Noise detected flag) </p><p>​    当在接收的帧上检测到噪声时，该位由硬件置 1。 0：未检测到噪声  1：检测到噪声</p><p>​    该位由软件序列清零（读入 USART_SR 寄  存器，然后读入 USART_DR 寄存器。</p><p>​     <em>注意：如果 EIE 位置 1，则在进行多缓冲区通信时，该位不会生成中断，因为该位出现的时间与  本身生成中断的 RXNE 位因 NF 标志而生成的时间相同。</em></p><p>​    <em>注意：当线路无噪声时，可以通过将 ONEBIT 位编程为 1 提高 USART 对偏差的容差来禁止  NF 标志</em></p></li><li><p><strong>位 1 FE：</strong>帧错误 (Framing error) </p><p>​    当检测到去同步化、过度的噪声或中断字符时，该位由硬件置 1。0：未检测到帧错误 1：检测到帧错误或中断字符</p><p>​    该位由软件序列清零（读入  USART_SR 寄存器，然后读入 USART_DR 寄存器）。</p><p>​    <em>注意：该位不会生成中断，因为该位出现的时间与本身生成中断的 RXNE 位出现的时间相同。  如果当前正在传输的字同时导致帧错误和上溢错误，则会传输该字，且仅有 ORE 位被  置 1。 如果 EIE 位置 1，则在进行多缓冲区通信时会对 FE 标志生成一个中断。</em></p></li><li><p><strong>位 0 PE：</strong>奇偶校验错误 (Parity error) </p><p>​    当在接收器模式下发生奇偶校验错误时，该位由硬件置 1。0：无奇偶校验错误  1：奇偶校验错误</p><p>​    该位由软件序列清零（读取状态寄存器，然后对 USART_DR 数据寄存器执行读或写访问。</p><p>​    将 PE 位清零前软件必须等待  RXNE 标志被置 1。  如果 USART_CR1 寄存器中 PEIE = 1，则会生成中断。 </p></li></ul><h3 id="数据寄存器-USART-DR"><a href="#数据寄存器-USART-DR" class="headerlink" title="数据寄存器(USART_DR)"></a>数据寄存器(USART_DR)</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240206223126595.png" alt="image-20240206223126595"></p><p>该寄存器有32位，但<strong>[31:9]位保留，[8:0]为用于存放待发送或接受的9位或8位数据（9位或8位由设置的字长决定）</strong>这个寄存器其实由TDR和RDR两个寄存器组成，访问的是那个寄存器由读写操作决定。如果是写要发送的数据，则访问的是TDR寄存器。如果是要读已接收的数据，则访问的是RDR寄存器。</p><p>在使能奇偶校验位的情况下（USART_CR1 寄存器中的 PCE 位被置 1）进行发送时，由于  MSB 的写入值（位 7 或位 8，具体取决于数据长度）会被奇偶校验位所取代，因此该值不起任何作用。</p><h3 id="控制寄存器1-USART-CR1"><a href="#控制寄存器1-USART-CR1" class="headerlink" title="控制寄存器1(USART_CR1)"></a>控制寄存器1(USART_CR1)</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240206223222420.png" alt="image-20240206223222420"></p><ul><li><p><strong>位 15 OVER8：过采样模式 (Oversampling mode)</strong>（F1系列没有这一位）</p><p>​    0：16 倍过采样;  1：8 倍过采样</p></li><li><p><strong>位 13 UE：USART 使能 (USART enable) </strong></p><p>​    0：禁止 USART 预分频器和输出 1：使能 USART</p><p>​    该位清零后，USART 预分频器和输出将停止，并会结束当前字节传输以降低功耗。</p><p>​    此位由软  件置 1 和清零。 </p></li><li><p><strong>位 12 M：字长 (Word length)</strong>。该位决定了字长。该位由软件置 1 或清零</p><p>​    0：8 数据位； 1：9 数据位</p><p>​    <em>注意：在数据传输（发送和接收）期间不得更改 M 位</em></p></li><li><p><strong>位 10 PCE：奇偶校验控制使能 (Parity control enable)</strong></p><p>​    0：禁止奇偶校验控制；1：使能奇偶校验控制</p></li><li><p><strong>位 9 PS：奇偶校验选择 (Parity selection)</strong></p><p>​    0：偶校验； 1：奇校验</p></li><li><p><strong>位 8 PEIE：奇偶校验错误中断使能 (PE interrupt enable)</strong></p><p>​    0：禁止中断； 1：当 USART_SR 寄存器中 PE=1 时，生成 USART 中断</p></li><li><p><strong>位 7 TXEIE：发送寄存器空中断使能 (TXE interrupt enable)</strong></p><p>​    0：禁止中断； 1：当 USART_SR 寄存器中 TXE=1 时(i.e., 当 TDR 寄存器的内容已传输到移位寄存器时)，生成 USART 中断</p></li><li><p><strong>位 6 TCIE：传送完成中断使能 (Transmission complete interrupt enable)</strong></p><p>​    0：禁止中断； 1：当 USART_SR 寄存器中 TC=1 时，生成 USART 中断</p></li><li><p><strong>位 3 TE：发送器使能 (Transmitter enable)</strong></p><p>​    0：禁止发送器；1：使能发送器</p></li><li><p><strong>位 2 RE：接收器使能 (Receiver enable)</strong></p><p>​    0：禁止接收器；1：使能接收器并开始搜索起始位</p></li></ul><h3 id="控制寄存器2-USART-CR2"><a href="#控制寄存器2-USART-CR2" class="headerlink" title="控制寄存器2(USART_CR2)"></a>控制寄存器2(USART_CR2)</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240206224629997.png" alt="image-20240206224629997"></p><ul><li><p><strong>位 13:12 STOP：停止位配置 (STOP bit)</strong></p><p>​    00：1 个停止位</p><p>​    01：0.5 个停止位</p><p>​    10：2 个停止位</p><p>​    11：1.5 个停止位</p><p>​    <em>注意：0.5 个停止位和 1.5 个停止位不适用于 UART4 和 UART5</em></p></li></ul><h3 id="控制寄存器3-USART-CR3"><a href="#控制寄存器3-USART-CR3" class="headerlink" title="控制寄存器3(USART_CR3)"></a>控制寄存器3(USART_CR3)</h3><p>  <img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240206225157524.png" alt="image-20240206225157524"></p><ul><li><p><strong>位 11 ONEBIT：一个采样位方法使能 (One sample bit method enable)</strong></p><p>​    0：三个采样位方法 ；1：一个采样位方法（将禁止噪声检测标志 (NF)）</p></li><li><p><strong>位 10 CTSIE：CTS 中断使能 (CTS interrupt enable)</strong></p><p>​    0：禁止中断；1：当 USART_SR 寄存器中 CTS = 1 时，生成中断</p><p>​    <em>注意：该位不适用于 UART4 和 UART5。</em></p></li><li><p><strong>位 9 CTSE： CTS 使能 (CTS enable)</strong></p><p>​    0：禁止 CTS 硬件流控制；1：使能 CTS 模式，仅当 nCTS 输入有效 （连接到 0）时才发送数据。</p></li><li><p><strong>位 8 RTSE： RTS 使能 (RTS enable)</strong></p><p>​    0：禁止 RTS 硬件流控制；1：使能 RTS 中断，仅当接收缓冲区中有空间时才会请求数据。可以接收数据时使 nRTS 输出有效 （连接到 0）。</p></li><li><p><strong>位 7 DMAT： DMA 使能发送器 (DMA enable transmitter)</strong></p><p>​    1：针对发送使能 DMA 模式 ；0：针对发送禁止 DMA 模式</p></li><li><p><strong>位 6 DMAR： DMA 使能接收器 (DMA enable receiver)</strong></p><p>​    1：针对接收使能 DMA 模式 ；0：针对接收禁止 DMA 模式</p></li></ul><h2 id="常用功能对应寄存器总表"><a href="#常用功能对应寄存器总表" class="headerlink" title="常用功能对应寄存器总表"></a>常用功能对应寄存器总表</h2><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">寄存器</th><th style="text-align:center">配置</th><th style="text-align:center">功能</th><th style="text-align:center">寄存器</th><th style="text-align:center">配置</th></tr></thead><tbody><tr><td style="text-align:center">使能USART</td><td style="text-align:center">USART_CR1 UE（位13）</td><td style="text-align:center">0：失能；1：使能</td><td style="text-align:center">设置数据字长</td><td style="text-align:center">USART_CR1  M（位12）</td><td style="text-align:center">0：8数据位；1：9数据位</td></tr><tr><td style="text-align:center">设置波特率</td><td style="text-align:center">USART_BRR [15:4]&amp;[3:0]</td><td style="text-align:center">-</td><td style="text-align:center">奇偶校验使能</td><td style="text-align:center">USART_CR1 PCE（位10）</td><td style="text-align:center">0：失能；1：使能</td></tr><tr><td style="text-align:center">奇偶校验模式选择</td><td style="text-align:center">USART_CR1 PS（位9）</td><td style="text-align:center">0：偶校验；1：奇校验</td><td style="text-align:center">发送器使能</td><td style="text-align:center">USART_CR1 TE（位3）</td><td style="text-align:center">0：失能；1：使能</td></tr><tr><td style="text-align:center">接收器使能</td><td style="text-align:center">USART_CR1 RE（位2）</td><td style="text-align:center">0：失能；1：使能</td><td style="text-align:center">设置停止位</td><td style="text-align:center">USART_CR2 STOP（位[13:12]）</td><td style="text-align:center">00：1个;  01：0.5个；<br>10：2个；  11：1.5个</td></tr><tr><td style="text-align:center">DMA 使能发送器</td><td style="text-align:center">USART_CR3 DMAT（位7）</td><td style="text-align:center">0：失能；1：使能</td><td style="text-align:center">DMA 使能接收器</td><td style="text-align:center">USART_CR3 DMAR（位6）</td><td style="text-align:center">0：失能；1：使能</td></tr></tbody></table></div><h2 id="使用UART通信的配置步骤"><a href="#使用UART通信的配置步骤" class="headerlink" title="使用UART通信的配置步骤"></a>使用UART通信的配置步骤</h2><p>设置GPIO的复用模式</p><ul><li>设置为复用-推挽模式</li><li>无上拉、下拉</li><li>设置GPIO时钟（通常设置成高速）</li><li>通过配置GPIO-&gt;AFR寄存器，将USART1复用至GPIO</li></ul><p>设置NVIC（如果要使用中断串口，则需要设置NVIC）</p><ul><li>设置中断分组(AIRCR寄存器)</li><li>设置中断优先级(IPR寄存器[7:4])</li><li>使能对应的中断(ISER)</li></ul><p>设置串口通信相关参数</p><ul><li>使能串口挂在总线的时钟</li><li>对USART-&gt;BRR寄存器写入，设置波特率</li><li>通过对USART-&gt;CR1寄存器写入设置OVER8过采样模式。</li><li>通过对USART-&gt;CR2寄存器写入，设置STOP位长度</li><li>通过对USART-&gt;CR1寄存器写入，设置奇偶校验使能和模式</li><li>如需使用中断，则使能相关中断</li><li>如需使用DMA，则使能DMA</li></ul>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式中常用串行通信</title>
      <link href="/posts/aa8bcb7e.html"/>
      <url>/posts/aa8bcb7e.html</url>
      
        <content type="html"><![CDATA[<h1 id="USART"><a href="#USART" class="headerlink" title="USART"></a>USART</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>USART：</strong>Universal Synchronous Asynchronous Receiver Transmitter，通用同步异步收发器</p><p><strong>UART：</strong>Universal Asynchronous Receiver Transmitte，通用异步收发器</p><p>USART算是UART的哥哥，比UART多一个同步通信特性。<strong>这两个都是串行通信协议</strong>。同步通信需要双方时钟频率一致，而异步通信无需时钟频率一致，通过设置固定的波特率+识别起始位和结束位来识别数据。其数字基带调制均使用NRZ（不归零）码。</p><p><strong>UART和USART最大都只能和一个主机同时通信</strong></p><h2 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h2><p>UART通信的波特率用于描述UART每秒传输的比特的速度(因为UART采用二进制信道Baud=bps)，其单位为bps(bit per sec)，常用的波特率有9600，115200等。以9600为例，每一个bit持续的Ts就是</p><script type="math/tex; mode=display">T_s=\frac{1}{9600}\approx104.2us</script><h2 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h2><p>UART规定数据空闲时，总线为高电平。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240205002705006.png" alt="image-20240205002705006" style="zoom:67%;" /></p><p>UART的帧格式为</p><ol><li>起始位：一个低电平信号，使用由高电平(空闲)朝低电平(起始位)跳变的边沿触发来检测。</li><li>先低后高的数据位，通常为8bit，不同的UART控制器支持的bit数不同，一般可以通过寄存器配置使用几位数据位。</li><li>校验位（可有可无），它有4种校验模式<ul><li>奇校验(ODD)：每个字节传送整个过程中bit为1的个数是奇数个（使用校验位调调控）</li><li>偶校验(EVEN)：每个字节传送整个过程中bit为1的个数是偶数个（使用校验位调调控）</li><li>固定校验位(STICK)： 固定在校验位置位逻辑高(MARK)或者逻辑低(SPACE)。</li><li>无校验位（NONE）：不发送校验位，直接停止。</li></ul></li><li>停止位，保持高电平，持续1位或1.5位或2位均可。由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备之间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟的机会。停止位个数越多，数据传输越稳定，但是数据传输速度也越慢。</li></ol><h2 id="串口流控（CTS-RTS）"><a href="#串口流控（CTS-RTS）" class="headerlink" title="串口流控（CTS/RTS）"></a>串口流控（CTS/RTS）</h2><h3 id="串口流控介绍"><a href="#串口流控介绍" class="headerlink" title="串口流控介绍"></a>串口流控介绍</h3><p> 在两个设备正常通信时，由于处理速度不同，就存在这样一个问题，有的快，有的慢，在某些情况下，就可能导致丢失数据的情况。举个例子，假如用于接收的UART buffer已经满了，单片机还没来得及处理buffer内的数据，此时再继续发来新的数据，数据就会丢失。因此，使用串口流控来避免这种情况。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>RTS （Require ToSend，发送请求）为输出信号，用于指示本设备是否准备好接收数据，低电平有效，低电平说明本设备准备好接收数据。</p><p>CTS （Clear ToSend，发送允许）为输入信号，用于判断是否可以向对方发送数据，低电平有效，低电平说明可以向对方发送数据。</p><p>在两设备通信时，RTS和CTS的连接如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设备1RTS -------- 设备2CTS</span></span><br><span class="line"><span class="comment">设备1CTS -------- 设备2RTS</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><strong>SPI</strong> ：Serial Peripheral Interface (串行外设接口) 一种同步全双工串行通信协议。它的通信速度比I2C和UART都要快。SPI通信内只有一个主机，可支持多个从机。连接图如下</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240208213112276.png" alt="image-20240208213112276"></p><h3 id="SS或CS选择信号线："><a href="#SS或CS选择信号线：" class="headerlink" title="SS或CS选择信号线："></a>SS或CS选择信号线：</h3><p>通过给SS信号线来选择和哪一个从机通信。通常，高电平无效，低电平有效，但是有例外，要参考从机的芯片手册。</p><h3 id="SCK时钟信号线："><a href="#SCK时钟信号线：" class="headerlink" title="SCK时钟信号线："></a>SCK时钟信号线：</h3><p>由主设备产生的同步时钟。通常，MOSI和MISO上的数据信号可以在上升或下降时钟沿被采集，详情需要参考特定的芯片手册。一般来说，会有一个CKP或CKOL（时钟极性）参数，来决定时钟闲时电平高低。还有一个CKE或CPHL（时钟相位）参数来决定是第一次跳变时采集数据还是第二次。这二者共同决定数据在时钟上沿还是下沿被采集。</p><h3 id="MOSI："><a href="#MOSI：" class="headerlink" title="MOSI："></a>MOSI：</h3><p>Master Output，Slave Input，用于主机向从机发送信号</p><h3 id="MISO"><a href="#MISO" class="headerlink" title="MISO"></a>MISO</h3><p>Master Input，Slave Output，用于从机向主机发送信号</p><h2 id="时钟极性和相位的规定"><a href="#时钟极性和相位的规定" class="headerlink" title="时钟极性和相位的规定"></a>时钟极性和相位的规定</h2><p>时钟极性CPOL决定时钟在空闲时的电平高低。规定如下</p><ul><li>CPOL= 0：空闲时SCLK为低电平</li><li>CPOL= 1：空闲时SCLK为高电平</li></ul><p>CPHA表示采样时刻，也就是时钟相位。用于指明在第几次跳变时开始第一次采样。</p><ul><li><p>CPHA= 0：第一个时钟沿</p></li><li><p>CPHA= 1：第二个时钟沿</p></li></ul><h2 id="帧格式-1"><a href="#帧格式-1" class="headerlink" title="帧格式"></a>帧格式</h2><p>SPI通信在发送数据时<strong>不包含</strong>IIC中的地址码、应答信号或是UART中的起始位、停止位、校验位。它的<strong>数据是简单的纯数据位，没有应答，没有起始，没有结束</strong>。<strong>SPI的数据位先发高位(MSB)，再发低位(LSB)</strong>。高电平表示1，低电平表示0。在一个字节传输完成后，SPI可以紧跟着直接发送下一个字节，没有应答操作。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240208234346844.png" alt="image-20240208234346844"></p>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字基带通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32的中断(Register)</title>
      <link href="/posts/e95d61a1.html"/>
      <url>/posts/e95d61a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="NVIC"><a href="#NVIC" class="headerlink" title="NVIC"></a>NVIC</h1><p>不同于普通单片机的软中断（单一入口，软件识别flag）或硬中断（不同入口）会在多个中断同时发生时挂起后发生的，STM32支持对中断的优先级进行编程，在中断中触发中断。用于管理这一优先级的系统被称为NVIC。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240202143753489.png" alt="image-20240202143753489"></p><p>NVIC：Nested vectoredinterrupt controller，嵌套向量中断控制器，属于内核 (M3/4/7)。NVIC支持256个中断(16个内核中断+240个外部中断)，内核支持256个中断优先级。ST公司把256个优先级裁切为了<strong>16个优先级</strong>（所有系列都是如此）。对于F407xx系列芯片，有10个内核中断，82个外部中断。</p><p>STM32的中断优先级又分为几类：抢占式优先级、响应式优先级、自然优先级。<strong>在STM32中，优先级设置的数值越小，其优先级越高</strong></p><ul><li>抢占式优先级：当两个中断同时发生时，优先执行抢占式优先级高的中断，可形成中断嵌套(在执行某低优先级中断中被高优先级再次中断，先执行高的再回来继续执行低的)</li><li>响应式优先级：当两个同抢占式优先级的中断同时发生时，优先响应 响应式优先级 高的中断，另一个被挂起。响应式优先级无法打断执行过程中的中断。</li><li>自然优先级：由startup文件决定，当设置的抢占优先级和响应优先级相同时，先执行自然优先级高的中断。</li></ul><h2 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h2><p>中断向量表用于存放各个中断服务函数的首地址，每一个地址有4 byte （32位MCU）。在sartup文件中，中断向量表被定义在__Vectors中。CPU在上电后默认运行main，但一旦有中断触发，就调用对用的Handler。下方代码就是F4系列Startup文件中定义的10个内核中断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br></pre></td></tr></table></figure><p>如上代码定义的就是中断函数的接口，也就是说，不像其他单片机那样触发中断调用的函数是interrupt()，stm32不同的中断会调用不同的函数，这些函数的名字就是如上定义的这些，而非interrupt。</p><p>在startup文件中，调用中断向量表的Handler时，会天然地决定中断判定和执行的顺序，即自然优先级。例如复位(Reset)被为-3，是自然优先级最高的中断。NMI被定义为-2，硬件失效(HardFault)定义为-1。</p><h2 id="NVIC相关寄存器"><a href="#NVIC相关寄存器" class="headerlink" title="NVIC相关寄存器"></a>NVIC相关寄存器</h2><h3 id="ISER寄存器"><a href="#ISER寄存器" class="headerlink" title="ISER寄存器"></a>ISER寄存器</h3><p>ISER：Interrupt Set Enable Registers，用于控制中断使能。Cortex内核中ISER有 ISER0～ISER7 共8个，每个32位。ISER的每一个位控制一个中断，所以每一个中断使能寄存器可以控制 32 个中断，共256个。<strong>不过，由于 STM32F407 的 可屏蔽中断只有 82 个，所以对我们来说，实际用到的 ISER 只有 3 个（ISER[0]～ISER[2]）。</strong> 不同芯片ISER寄存器对应控制的中断不同，需参考芯片手册。<strong>要对某个中断使能，只需朝ISER中对应位写入1即可</strong></p><p>因为其内存地址连续，所以可以直接定义uint_32类型数组ISER[n]来控制。</p><h3 id="ICER寄存器"><a href="#ICER寄存器" class="headerlink" title="ICER寄存器"></a>ICER寄存器</h3><p>与ISER相对， ICER(Interrupt Clear Enable Registers)，用于中断失能控制。<strong>要对某个中断失能，只需朝ICER中对应位写入1即可</strong></p><h3 id="IPR寄存器"><a href="#IPR寄存器" class="headerlink" title="IPR寄存器"></a>IPR寄存器</h3><p> Cortex-M4 内核可屏蔽中断有240个，每一个有256档优先级可以设置(需要8bit 寄存器进行配置)，因此内核规定IPR有60个，每个32bit （$60\times32bit=240\times8bit$）。在编程时，同样定义为数组来处理。<strong>由于 STM32F407 只用到了 Cortex-M4 的 82 个可屏蔽中断，故数组也只用了其中的元素 IP[0]～IP[81]。STM32F407 也并没有用到 IP 数组元素中的全部 8bit 来配置中断优先级，而是只使用了其中的高4位（对应16个优先级）</strong></p><h3 id="中断优先级的分组和AIRCR寄存器"><a href="#中断优先级的分组和AIRCR寄存器" class="headerlink" title="中断优先级的分组和AIRCR寄存器"></a>中断优先级的分组和AIRCR寄存器</h3><p>前面我们已知，STM32中中断优先级有16个，也就是需要IPR中的4个bit来表示，这16个又可以被分为抢占优先级和响应优先级。<strong>那么这4bit哪些用于控制响应优先级，哪些用于控制抢占优先级呢？这是通过设置AICRC寄存器实现的。</strong></p><p>AICRC： Application Interrupt and Reset Control Register，即应用程序中断及复位控制寄存器。该寄存器有32位，功能定义如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240203183209909.png" alt="image-20240203183209909"></p><p>可以看到，第8-10位被用于中断优先级的分组，这个分组有五种，用于控制PIR中4个bit控制抢占优先级还是响应优先级。如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240202150050747.png" alt="image-20240202150050747"></p><p>bit8-10的值和对应的组别如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240203182224262.png" alt="image-20240203182224262" style="zoom: 50%;" /></p><h3 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h3><p>总的来说，要启用某一个中断，需要<strong>对NVIC进行的配置步骤如下：</strong></p><ul><li>设置中断分组(AIRCR寄存器)</li><li>设置中断优先级(IPR寄存器[7:4])</li><li>使能中断(ISER)</li></ul><hr><h1 id="外部中断-事件-控制器EXTI"><a href="#外部中断-事件-控制器EXTI" class="headerlink" title="外部中断(事件)控制器EXTI"></a>外部中断(事件)控制器EXTI</h1><p>EXTI：External Interrupt/Event Controller。EXTI线含边缘检测器，可以接受外部的中断信号，来触发中断或是事件。各系列芯片的支持的EXTI线如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240203203004878.png" alt="image-20240203203004878"></p><p><strong>每条EXTI线都可以单独配置：1.选择其触发中断或是事件，2.选择触发方式(上沿、下沿、双边沿)、3.软件触发、4.设置使能/失能、5.存储中断挂起状态</strong></p><p>对于F4系列芯片，有23个EXTI线。详情需查询对应芯片的手册。</p><p><strong>中断和事件的区别</strong></p><ul><li><p>中断：要进入NVIC，触发后由CPU调用对应的中断函数来执行中断程序</p></li><li><p>事件：不进入NVIC，本质上就是一个触发信号，是用来触发特定的外设模块或核心本身(唤醒)仅用于内部硬件自动控制。事件不需要软件参与，所以响应速度也更快。事件可作为中断的触发源。</p></li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240204162635225.png" alt="image-20240204162635225"></p><p>整个电路框图如上图所示。输入线接受外部信号，通过配置EXTI_RTSR和EXTI_FTSR来设置边沿检测电路对上沿或下沿响应。EXTI_SWIER允许我们通过程序控制就可以启动中断/事件线，也就是在某些时候让中断或事件以软件作为触发源，而非外部输入的硬件信号。后续是事件屏蔽器，用于enable和disable是否产生事件脉冲。同时EXTI_PR会存储有中断请求发生，这里就是作中断flag。当EXTI_IMR被使能时，中断信号进入NVIC，触发中断。</p><h2 id="EXTI相关寄存器"><a href="#EXTI相关寄存器" class="headerlink" title="EXTI相关寄存器"></a>EXTI相关寄存器</h2><h3 id="EXTI-IMR（中断屏蔽寄存器）"><a href="#EXTI-IMR（中断屏蔽寄存器）" class="headerlink" title="EXTI_IMR（中断屏蔽寄存器）"></a>EXTI_IMR（中断屏蔽寄存器）</h3><p>该寄存器总共有32位，但因为F4系列只有23个EXTI线，所以只有0-22位被使用。<strong>该寄存器写1位enable中断，写0为disable；复位值为全0，即所有中断disable</strong>。bit0对应EXTI0，bit1对应EXTI1，以此类推。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240204162947090.png" alt="image-20240204162947090"></p><h3 id="EXTI-EMR（事件屏蔽寄存器）"><a href="#EXTI-EMR（事件屏蔽寄存器）" class="headerlink" title="EXTI_EMR（事件屏蔽寄存器）"></a>EXTI_EMR（事件屏蔽寄存器）</h3><p>该寄存器同EXTI_IMR，复位全0，写0屏蔽，写1使能。该寄存器用于控制是否产生事件脉冲。</p><h3 id="EXTI-RTSR（上沿触发选择寄存器）"><a href="#EXTI-RTSR（上沿触发选择寄存器）" class="headerlink" title="EXTI_RTSR（上沿触发选择寄存器）"></a>EXTI_RTSR（上沿触发选择寄存器）</h3><p>该寄存器也是32位，但仅有23个bit被使用。bit0对应EXTI0，bit1对应EXTI1，以此类推。<strong>写0表示禁止上沿触发，写1表示使能上沿触发，复位值全0</strong></p><h3 id="EXTI-FTSR-下降沿触发选择寄存器"><a href="#EXTI-FTSR-下降沿触发选择寄存器" class="headerlink" title="EXTI_FTSR(下降沿触发选择寄存器)"></a>EXTI_FTSR(下降沿触发选择寄存器)</h3><p>同上沿触发寄存器。如果上沿下沿触发都被enable，那么任意边沿都可唤起中断。如果在设置极性的同时产生了中断，那么中断请求会被忽略。</p><h3 id="EXTI-PR-（挂起请求寄存器）"><a href="#EXTI-PR-（挂起请求寄存器）" class="headerlink" title="EXTI_PR （挂起请求寄存器）"></a>EXTI_PR （挂起请求寄存器）</h3><p>当在外部中断线上发生了选择的边沿事件，该位被置“1”。在此位中<strong>写入“1”可以清除它（注意这里不是写0）</strong>，在改变边沿检测的极性时，该位也会自动被清除。</p><h3 id="EXTI-SWIER（软件中断寄存器）"><a href="#EXTI-SWIER（软件中断寄存器）" class="headerlink" title="EXTI_SWIER（软件中断寄存器）"></a>EXTI_SWIER（软件中断寄存器）</h3><p>当该位为“0”时，写“1”将设置 EXTI_PR 中相应的挂起位。如果在 EXTI_IMR 和 EXTI_EMR  中允许产生该中断，则产生中断请求。通过清除 EXTI_PR（挂起寄存器） 的对应位（写入“1”），可以清除该位为“0”，即处理中断flag时自动清除该位。</p><h2 id="EXTI和IO口的映射"><a href="#EXTI和IO口的映射" class="headerlink" title="EXTI和IO口的映射"></a>EXTI和IO口的映射</h2><h3 id="AFIO（功能复用寄存器）配置-对于F1单片机"><a href="#AFIO（功能复用寄存器）配置-对于F1单片机" class="headerlink" title="AFIO（功能复用寄存器）配置(对于F1单片机)"></a>AFIO（功能复用寄存器）配置(对于F1单片机)</h3><p>对F1系列单片机，此处不做过多介绍，参考芯片手册即可。</p><h3 id="SYSCFG（系统配置寄存器）配置（对于F4-F7-H7单片机）"><a href="#SYSCFG（系统配置寄存器）配置（对于F4-F7-H7单片机）" class="headerlink" title="SYSCFG（系统配置寄存器）配置（对于F4/F7/H7单片机）"></a>SYSCFG（系统配置寄存器）配置（对于F4/F7/H7单片机）</h3><p>EXTIn线可以映射到GPIOn上，例如EXTI0这条线，就可以映射至所有端口(如PA，PB等)的GPIO0这个口,EXTI15这条线，可映射至所有端口的GPIO15。一条EXTI线同一时间仅可以和一个GPIO相连。</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240204170054912.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240204171730480.png" alt="image-20240204171730480" style="zoom:78%;" /></center></td>        </tr></table><p>在SYSCFG寄存器组中，有SYSCFG_EXTICR1~4 4组用于配置EXTI映射的寄存器，用于控制EXTI线和哪一个端口相连。，每组寄存器都是32位，但仅使用16位，使用的16位又被分为4组（每4bit一组），一组控制一条EXTI线。可映射至GPIO的EXTI线共有16条，4组SYSCFG_EXTICR寄存器，每组控制4条，刚好与16条契合。下图展示SYSCFG_EXTICR1寄存器的bit构成，2-4同理：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240204171226010.png" alt="image-20240204171226010"></p><p>4bit和端口的值对应关系如下(对于F4)：</p><div class="table-container"><table><thead><tr><th style="text-align:center">数值（Binary）</th><th style="text-align:center">对应端口</th><th style="text-align:center">数值（Binary）</th><th style="text-align:center">对应端口</th></tr></thead><tbody><tr><td style="text-align:center">0000</td><td style="text-align:center">PA</td><td style="text-align:center">0101</td><td style="text-align:center">PF</td></tr><tr><td style="text-align:center">0001</td><td style="text-align:center">PB</td><td style="text-align:center">0110</td><td style="text-align:center">PG</td></tr><tr><td style="text-align:center">0010</td><td style="text-align:center">PC</td><td style="text-align:center">0111</td><td style="text-align:center">PH</td></tr><tr><td style="text-align:center">0011</td><td style="text-align:center">PD</td><td style="text-align:center">1000</td><td style="text-align:center">PI</td></tr><tr><td style="text-align:center">0100</td><td style="text-align:center">PE</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table></div><p>设置寄存器前，需要对SYSCFG时钟进行使能(<em>HAL库提供宏：__HAL_RCC_SYSCFG_CLK_ENABLE()</em>)</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>要在STM32芯片上使用某一中断功能，需要遵循如下步骤配置</p><ul><li>使能GPIO时钟</li><li>设置GPIO模式（输入、是否上拉等），如果使用片上外设中断，可跳过这一步</li><li>使能SYSCFG/APIO时钟，如果使用片上外设中断，可跳过这一步</li><li>设置EXTI和GPIO的映射关系（设置APIO或STYSCFG寄存器），如果使用片上外设中断，可跳过这一步</li><li>设置边沿触发模式(RTSR,FTSR)、enbale中断(IMR/EMR)，如果使用片上外设中断，可跳过这一步</li><li>（对于其他片上外设，中断会直接进入NVIC，无需配置EXTI相关设置）</li><li>设置NVIC（包含优先级分组，优先级，使能中断，详见NVIC配置步骤）</li><li>编写中断服务函数（服务函数内需清除中断标志）</li></ul><h2 id="服务函数注意事项"><a href="#服务函数注意事项" class="headerlink" title="服务函数注意事项"></a>服务函数注意事项</h2><p>在STM32中，EXTI0-4有5个独立的中断服务函数；EXTI9-5共用一个中断服务函数；EXTI15-10共用一个中断服务函数。也就是总共有7个中断服务函数。</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32——HAL库</title>
      <link href="/posts/82419430.html"/>
      <url>/posts/82419430.html</url>
      
        <content type="html"><![CDATA[<h1 id="GPIO控制"><a href="#GPIO控制" class="headerlink" title="GPIO控制"></a>GPIO控制</h1><h2 id="GPIO口寄存器的封装和总线时钟"><a href="#GPIO口寄存器的封装和总线时钟" class="headerlink" title="GPIO口寄存器的封装和总线时钟"></a>GPIO口寄存器的封装和总线时钟</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GPIO_TypeDef 结构体如下：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> MODER;    <span class="comment">/*!&lt;模式寄存器,                Address offset: 0x00      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> OTYPER;   <span class="comment">/*!&lt;输出数据类型寄存器,         Address offset: 0x04      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> OSPEEDR;  <span class="comment">/*!&lt;输出速度寄存器,             Address offset: 0x08      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> PUPDR;    <span class="comment">/*!&lt;上拉下拉电阻选择寄存器,      Address offset: 0x0C      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> IDR;      <span class="comment">/*!&lt;输入数据寄存器,             Address offset: 0x10      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> ODR;      <span class="comment">/*!&lt;输出数据寄存器,             Address offset: 0x14      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> BSRR;     <span class="comment">/*!&lt; GPIO port bit set/reset register,      Address offset: 0x18      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> LCKR;     <span class="comment">/*!&lt;设置锁寄存器,               Address offset: 0x1C      */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> AFR[<span class="number">2</span>];   <span class="comment">/*!&lt;复用功能寄存器,             Address offset: 0x20-0x24 */</span></span><br><span class="line">&#125; GPIO_TypeDef;</span><br><span class="line"><span class="comment">//GPIO_InitTypeDef 结构体如下：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint32_t</span> Pin; <span class="comment">//引脚</span></span><br><span class="line">  <span class="type">uint32_t</span> Mode; <span class="comment">//引脚模式(推挽 or 开漏 等)</span></span><br><span class="line">  <span class="type">uint32_t</span> Pull; <span class="comment">//上拉电阻使能情况</span></span><br><span class="line">  <span class="type">uint32_t</span> Speed; <span class="comment">//引脚响应速度</span></span><br><span class="line">  <span class="type">uint32_t</span> Alternate; <span class="comment">//引脚复用情况</span></span><br><span class="line">&#125;GPIO_InitTypeDef;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO所在总线(AHB1)时钟使能</span></span><br><span class="line">__HAL_RCC_GPIOx_CLK_ENABLE();  <span class="comment">/*HAL库使用宏来进行使能, GPIOx可以是任意一组GPIO,但是对于f4系列芯片而言，他们挂载的总线一致，所以都是对AHB1总线时钟进行使能*/</span></span><br><span class="line"><span class="comment">/*宏内配置如下*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_RCC_GPIOA_CLK_ENABLE()   do &#123; \</span></span><br><span class="line"><span class="meta">                                        __IO uint32_t tmpreg = 0x00U; \</span></span><br><span class="line"><span class="meta">                                        SET_BIT(RCC-&gt;AHB1ENR, RCC_AHB1ENR_GPIOAEN);\</span></span><br><span class="line"><span class="meta">                                        <span class="comment">/* Delay after an RCC peripheral clock enabling */</span> \</span></span><br><span class="line"><span class="meta">                                        tmpreg = READ_BIT(RCC-&gt;AHB1ENR, RCC_AHB1ENR_GPIOAEN);\</span></span><br><span class="line"><span class="meta">                                        UNUSED(tmpreg); \</span></span><br><span class="line"><span class="meta">                                          &#125; while(0U)</span></span><br></pre></td></tr></table></figure><hr><h2 id="GPIO的初始化"><a href="#GPIO的初始化" class="headerlink" title="GPIO的初始化"></a>GPIO的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_Init</span><span class="params">(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)</span></span><br></pre></td></tr></table></figure><p>其中GPIOx可以直接传入GPIOA, GPIOB等等，这些已经被预编译成了以引脚初始寄存器位置开始的GPIO_TypeDef 类型的结构体，上面一节有介绍。GPIO_InitTypeDef用于控制引脚的各个功能和状态配置。</p><p>GPIO_InitTypeDef成员的值定义如下：</p><h3 id="Pin"><a href="#Pin" class="headerlink" title="Pin:"></a>Pin:</h3><p>Pin控制要对那一个引脚操控， 可传GPIO_PIN_x，x可以为0-15，ALL，MASK三种。</p><ul><li><p>GPIO_PIN_0 如果将x设置为0-15，则传入的是GPIO的寄存器位置（例如，GPIO3对应的寄存器地址0B0000,0100）。多个引脚时，可以用或运算同时使能，如GPIO_PIN_0 | GPIO_PIN_1。</p></li><li><p>GPIO_PIN_ALL 对应的是0xFFFF，也就是将16个PIN全部操作</p></li><li><p><em>GPIO_PIN_MASK是给断言机制判断传入参数是否合法使用的，<strong>不作为用户调用参数传入</strong></em>。断言机制代码如下：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IS_GPIO_PIN(__PIN__)        ((((__PIN__) &amp; GPIO_PIN_MASK) != (uint32_t)0x00) &amp;&amp;\</span></span><br><span class="line"><span class="meta">                                     (((__PIN__) &amp; ~GPIO_PIN_MASK) == (uint32_t)0x00))</span></span><br></pre></td></tr></table></figure><p>  这样IS_GPIO_PIN 宏定义就会在输入非GPIO合法值时返回0，触发断言机制，程序报错并定位。</p><h3 id="Mode："><a href="#Mode：" class="headerlink" title="Mode："></a>Mode：</h3><p>Mode控制GPIO的输入、输出模式，有如下选择：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_INPUT                <span class="comment">//浮动输入：上拉</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_OUTPUT_PP            <span class="comment">//推挽输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_OUTPUT_OD            <span class="comment">//开漏输出</span></span></span><br><span class="line"><span class="comment">//复用PP/OD输出模式，与PP/OD出模式很是相似。只是输出的高低电平的来源不同，由ODR寄存器控制，而是用片内外设模块的复用功能输出来决定的。</span></span><br><span class="line"><span class="comment">//复用开漏输出功能有：（TX1,MOSI,MISO.SCK.SS）</span></span><br><span class="line"><span class="comment">//复用推挽输出功能有：（I2C的SCL,SDA）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_AF_PP                 <span class="comment">//复用推挽输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_AF_OD                 <span class="comment">//复用开漏输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_ANALOG                <span class="comment">//此时GPIO处于analog模式。可作ADC转换通道,可做比较器、DAC等模拟外设的复用通道</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_IT_RISING             <span class="comment">//具有上升沿触发检测的外部中断模式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_IT_FALLING            <span class="comment">//具有下降沿触发检测的外部中断模式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_IT_RISING_FALLING     <span class="comment">//上升沿和下降沿均触发的外部中断模式</span></span></span><br><span class="line"><span class="comment">//下面几个对应的是&quot;事件&quot;,RISING,FALLING等含义同中断.在这里事件可以唤醒休眠状态(WFE)的MCU,但是不会产生&quot;中断事件&quot;,也就是说不会执行中断处理函数,也就说不需要清除外设中断挂起位或 NVIC. 使用GPIO&quot;事件&quot;来启动AD转换也是可以的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_EVT_RISING                   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_EVT_FALLING                  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_EVT_RISING_FALLING            </span></span><br></pre></td></tr></table></figure><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull:"></a>Pull:</h3><p>PULL控制上拉、下拉电阻使能情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_NOPULL        ((uint32_t)0x00000000)   <span class="comment">//上拉下拉都不使能</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_PULLUP        ((uint32_t)0x00000001)   <span class="comment">//使能上拉电阻</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_PULLDOWN      ((uint32_t)0x00000002)   <span class="comment">//使能下拉电阻</span></span></span><br></pre></td></tr></table></figure><h3 id="Speed"><a href="#Speed" class="headerlink" title="Speed"></a>Speed</h3><p>控制GPIO时钟的速度，对应也就是GPIO的响应速度.ST公司给了四种不同的相对速度(相对MCU极限速度而言)可供选择。<strong>对于不同的MCU，这里define的值是不一样的，对应的频率也是不一样的，需要参考芯片手册。对于F4系列，其定义如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_SPEED_FREQ_LOW        <span class="comment">//2 MHz</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_SPEED_FREQ_MEDIUM     <span class="comment">//12.5 MHz to 50 MHz</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_SPEED_FREQ_HIGH       <span class="comment">//25 MHz to 100 MHz</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_SPEED_FREQ_VERY_HIGH  <span class="comment">//50 MHz to 200 MHz</span></span></span><br></pre></td></tr></table></figure><h3 id="Alternate"><a href="#Alternate" class="headerlink" title="Alternate"></a>Alternate</h3><p>控制引脚的复用情况，不同的MCU引脚可复用功能不同，需要参看<em>stm32f4xx_hal_gpio_ex.h</em> 头文件内的定义。例如F407系列，AF8引脚就可以配置成GPIO_AF8_UART4、GPIO_AF8_UART5、GPIO_AF8_USART6三种。详情需要参考不同芯片的手册。</p><hr><h2 id="GPIO的去初始化"><a href="#GPIO的去初始化" class="headerlink" title="GPIO的去初始化"></a>GPIO的去初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_DeInit</span><span class="params">(GPIO_TypeDef  *GPIOx, <span class="type">uint32_t</span> GPIO_Pin)</span></span><br></pre></td></tr></table></figure><p>这个函数用于将已初始化的GPIO恢复至默认值</p><ul><li>GPIOx 同init。</li><li>GPIO_Pin传入要初始化第几个即可，多个Pin使用或运算合并，同Init。</li></ul><hr><h2 id="读取引脚电平"><a href="#读取引脚电平" class="headerlink" title="读取引脚电平"></a>读取引脚电平</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_PinState <span class="title function_">HAL_GPIO_ReadPin</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="type">uint16_t</span> GPIO_Pin)</span></span><br></pre></td></tr></table></figure><p>用于读取GPIO的电平，读取的是IDR寄存器内对应的值。其返回值类型为GPIO_PinState，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  GPIO_PIN_RESET = <span class="number">0</span>,</span><br><span class="line">  GPIO_PIN_SET</span><br><span class="line">&#125;GPIO_PinState;</span><br></pre></td></tr></table></figure><p>也就是RESET=0，SET=1。</p><hr><h2 id="写引脚电平"><a href="#写引脚电平" class="headerlink" title="写引脚电平"></a>写引脚电平</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_WritePin</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="type">uint16_t</span> GPIO_Pin, GPIO_PinState PinState)</span></span><br></pre></td></tr></table></figure><p>用于写入GPIO某一引脚的电平。GPIOx, GPIO_Pin同上，PinState有 GPIO_PIN_RESET 和  GPIO_PIN_SET 两种</p><hr><h2 id="反转引脚电平"><a href="#反转引脚电平" class="headerlink" title="反转引脚电平"></a>反转引脚电平</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_TogglePin</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="type">uint16_t</span> GPIO_Pin)</span></span><br></pre></td></tr></table></figure><p>这个函数的作用是讲某个引脚输出的值反转</p><p>这个函数的实现原理是使用BSRR寄存器，如果直接操作ODR寄存器，有被中断等(IRQ)打断的风险，而通过BSRR和BRR去改变管脚状态是不会被中断打断的，即不需要关闭中断。</p><p>BSRR的<strong>低 16bits 是set操作</strong>，而<strong>高16bits是 reset 操作</strong>。这个函数的实现原理如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GPIOx-&gt;BSRR = ((odr &amp; GPIO_Pin) &lt;&lt; GPIO_NUMBER) | (~odr &amp; GPIO_Pin);</span><br><span class="line"><span class="comment">//GPIO_NUMBER 在F4中被定义为16，因为一组GPIO有16Pin</span></span><br></pre></td></tr></table></figure><p>这个语句首先将要操作PIN的ODR值放进Reset里面，然后再将这个值取反放进Set里面，如果此时这个Pin是1，那么对应寄存器的Reset就会是1，Set是0，反之亦然。这样就达到了对某一个PIN反相的效果。</p><hr><h2 id="锁定端口电平"><a href="#锁定端口电平" class="headerlink" title="锁定端口电平"></a>锁定端口电平</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_GPIO_LockPin</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="type">uint16_t</span> GPIO_Pin)</span></span><br></pre></td></tr></table></figure><p>这个函数通过对LCKR寄存器进行配置，对某一个引脚输出的值进行锁定，一般用得比较少。其返回值是锁定是否成功，成功返回HAL_OK (0)，失败返回HAL_ERROR (1)</p><hr><h2 id="GPIO触发的中断处理函数"><a href="#GPIO触发的中断处理函数" class="headerlink" title="GPIO触发的中断处理函数"></a>GPIO触发的中断处理函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">  <span class="keyword">if</span>(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">    HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;UNUSED(GPIO_Pin);&#125;</span><br></pre></td></tr></table></figure><p>这个函数在中断入口的位置被自动调用。函数首先会清除中断Flag，然后调用HAL_GPIO_EXTI_Callback函数，这个回调函数就是中断要干什么。在HAL库内，有一个HAL_GPIO_EXTI_Callback已经被定义，但是使用__weak修饰，且函数只是返回一个void值，这里的意思是当用户自己定义这个中断处理函数时HAL库内这个会被disable，这个函数存在在这个只是为了防止gcc报错，<strong>且用户不可直接修改HAL库内这个callback</strong>，需要自己重新定义一个新的。</p><p><strong>也就是说，我们需要自定义一个void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 的函数，来写入中断操作的内容。</strong></p><hr><h1 id="NVIC、EXTI和中断"><a href="#NVIC、EXTI和中断" class="headerlink" title="NVIC、EXTI和中断"></a>NVIC、EXTI和中断</h1><p>代码在stm32f4xx_hal_cortex.c中</p><h2 id="设置中断分组-NVIC"><a href="#设置中断分组-NVIC" class="headerlink" title="设置中断分组(NVIC)"></a>设置中断分组(NVIC)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_NVIC_SetPriorityGrouping</span><span class="params">(<span class="type">uint32_t</span> PriorityGroup)</span></span><br></pre></td></tr></table></figure><p>其中参数如下：</p><ul><li>NVIC_PRIORITYGROUP_0</li><li>NVIC_PRIORITYGROUP_1</li><li>NVIC_PRIORITYGROUP_2</li><li>NVIC_PRIORITYGROUP_3</li><li>NVIC_PRIORITYGROUP_4</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240202150050747.png" alt="image-20240202150050747"></p><h2 id="设置中断优先级-NVIC"><a href="#设置中断优先级-NVIC" class="headerlink" title="设置中断优先级(NVIC)"></a>设置中断优先级(NVIC)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_NVIC_SetPriority</span><span class="params">(IRQn_Type IRQn, <span class="type">uint32_t</span> PreemptPriority, <span class="type">uint32_t</span> SubPriority)</span></span><br></pre></td></tr></table></figure><p>其中IRQn表示要设置的中断，PreemptPriority表示抢占优先级，SubPriority表示响应优先级</p><h3 id="IRQn-中断号"><a href="#IRQn-中断号" class="headerlink" title="IRQn(中断号)"></a>IRQn(中断号)</h3><p>中断号用于指明控制哪一个中断，代码定义和对应中断如下：</p><p>它存储的是偏移地址，即相对于外部中断第一个中断寄存器WWDG_IRQn(0x0000,0040)地址的偏移量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/******  Cortex-M4 Processor Exceptions Numbers ****************************************************************/</span></span><br><span class="line">  NonMaskableInt_IRQn         = <span class="number">-14</span>,    <span class="comment">/*!&lt; 2 Non Maskable Interrupt                                          */</span></span><br><span class="line">  MemoryManagement_IRQn       = <span class="number">-12</span>,    <span class="comment">/*!&lt; 4 Cortex-M4 Memory Management Interrupt                           */</span></span><br><span class="line">  BusFault_IRQn               = <span class="number">-11</span>,    <span class="comment">/*!&lt; 5 Cortex-M4 Bus Fault Interrupt                                   */</span></span><br><span class="line">  UsageFault_IRQn             = <span class="number">-10</span>,    <span class="comment">/*!&lt; 6 Cortex-M4 Usage Fault Interrupt                                 */</span></span><br><span class="line">  SVCall_IRQn                 = <span class="number">-5</span>,     <span class="comment">/*!&lt; 11 Cortex-M4 SV Call Interrupt                                    */</span></span><br><span class="line">  DebugMonitor_IRQn           = <span class="number">-4</span>,     <span class="comment">/*!&lt; 12 Cortex-M4 Debug Monitor Interrupt                              */</span></span><br><span class="line">  PendSV_IRQn                 = <span class="number">-2</span>,     <span class="comment">/*!&lt; 14 Cortex-M4 Pend SV Interrupt                                    */</span></span><br><span class="line">  SysTick_IRQn                = <span class="number">-1</span>,     <span class="comment">/*!&lt; 15 Cortex-M4 System Tick Interrupt                                */</span></span><br><span class="line">  <span class="comment">/******  STM32 specific Interrupt Numbers **********************************************************************/</span></span><br><span class="line">  WWDG_IRQn                   = <span class="number">0</span>,      <span class="comment">/*!&lt; Window WatchDog Interrupt                                         */</span></span><br><span class="line">  PVD_IRQn                    = <span class="number">1</span>,      <span class="comment">/*!&lt; PVD through EXTI Line detection Interrupt                         */</span></span><br><span class="line">  TAMP_STAMP_IRQn             = <span class="number">2</span>,      <span class="comment">/*!&lt; Tamper and TimeStamp interrupts through the EXTI line             */</span></span><br><span class="line">  RTC_WKUP_IRQn               = <span class="number">3</span>,      <span class="comment">/*!&lt; RTC Wakeup interrupt through the EXTI line                        */</span></span><br><span class="line">  FLASH_IRQn                  = <span class="number">4</span>,      <span class="comment">/*!&lt; FLASH global Interrupt                                            */</span></span><br><span class="line">  RCC_IRQn                    = <span class="number">5</span>,      <span class="comment">/*!&lt; RCC global Interrupt                                              */</span></span><br><span class="line">  EXTI0_IRQn                  = <span class="number">6</span>,      <span class="comment">/*!&lt; EXTI Line0 Interrupt                                              */</span></span><br><span class="line">  EXTI1_IRQn                  = <span class="number">7</span>,      <span class="comment">/*!&lt; EXTI Line1 Interrupt                                              */</span></span><br><span class="line">  EXTI2_IRQn                  = <span class="number">8</span>,      <span class="comment">/*!&lt; EXTI Line2 Interrupt                                              */</span></span><br><span class="line">  EXTI3_IRQn                  = <span class="number">9</span>,      <span class="comment">/*!&lt; EXTI Line3 Interrupt                                              */</span></span><br><span class="line">  EXTI4_IRQn                  = <span class="number">10</span>,     <span class="comment">/*!&lt; EXTI Line4 Interrupt                                              */</span></span><br><span class="line">  DMA1_Stream0_IRQn           = <span class="number">11</span>,     <span class="comment">/*!&lt; DMA1 Stream 0 global Interrupt                                    */</span></span><br><span class="line">  DMA1_Stream1_IRQn           = <span class="number">12</span>,     <span class="comment">/*!&lt; DMA1 Stream 1 global Interrupt                                    */</span></span><br><span class="line">  DMA1_Stream2_IRQn           = <span class="number">13</span>,     <span class="comment">/*!&lt; DMA1 Stream 2 global Interrupt                                    */</span></span><br><span class="line">  DMA1_Stream3_IRQn           = <span class="number">14</span>,     <span class="comment">/*!&lt; DMA1 Stream 3 global Interrupt                                    */</span></span><br><span class="line">  DMA1_Stream4_IRQn           = <span class="number">15</span>,     <span class="comment">/*!&lt; DMA1 Stream 4 global Interrupt                                    */</span></span><br><span class="line">  DMA1_Stream5_IRQn           = <span class="number">16</span>,     <span class="comment">/*!&lt; DMA1 Stream 5 global Interrupt                                    */</span></span><br><span class="line">  DMA1_Stream6_IRQn           = <span class="number">17</span>,     <span class="comment">/*!&lt; DMA1 Stream 6 global Interrupt                                    */</span></span><br><span class="line">  ADC_IRQn                    = <span class="number">18</span>,     <span class="comment">/*!&lt; ADC1, ADC2 and ADC3 global Interrupts                             */</span></span><br><span class="line">  CAN1_TX_IRQn                = <span class="number">19</span>,     <span class="comment">/*!&lt; CAN1 TX Interrupt                                                 */</span></span><br><span class="line">  CAN1_RX0_IRQn               = <span class="number">20</span>,     <span class="comment">/*!&lt; CAN1 RX0 Interrupt                                                */</span></span><br><span class="line">  CAN1_RX1_IRQn               = <span class="number">21</span>,     <span class="comment">/*!&lt; CAN1 RX1 Interrupt                                                */</span></span><br><span class="line">  CAN1_SCE_IRQn               = <span class="number">22</span>,     <span class="comment">/*!&lt; CAN1 SCE Interrupt                                                */</span></span><br><span class="line">  EXTI9_5_IRQn                = <span class="number">23</span>,     <span class="comment">/*!&lt; External Line[9:5] Interrupts                                     */</span></span><br><span class="line">  TIM1_BRK_TIM9_IRQn          = <span class="number">24</span>,     <span class="comment">/*!&lt; TIM1 Break interrupt and TIM9 global interrupt                    */</span></span><br><span class="line">  TIM1_UP_TIM10_IRQn          = <span class="number">25</span>,     <span class="comment">/*!&lt; TIM1 Update Interrupt and TIM10 global interrupt                  */</span></span><br><span class="line">  TIM1_TRG_COM_TIM11_IRQn     = <span class="number">26</span>,     <span class="comment">/*!&lt; TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */</span></span><br><span class="line">  TIM1_CC_IRQn                = <span class="number">27</span>,     <span class="comment">/*!&lt; TIM1 Capture Compare Interrupt                                    */</span></span><br><span class="line">  TIM2_IRQn                   = <span class="number">28</span>,     <span class="comment">/*!&lt; TIM2 global Interrupt                                             */</span></span><br><span class="line">  TIM3_IRQn                   = <span class="number">29</span>,     <span class="comment">/*!&lt; TIM3 global Interrupt                                             */</span></span><br><span class="line">  TIM4_IRQn                   = <span class="number">30</span>,     <span class="comment">/*!&lt; TIM4 global Interrupt                                             */</span></span><br><span class="line">  I2C1_EV_IRQn                = <span class="number">31</span>,     <span class="comment">/*!&lt; I2C1 Event Interrupt                                              */</span></span><br><span class="line">  I2C1_ER_IRQn                = <span class="number">32</span>,     <span class="comment">/*!&lt; I2C1 Error Interrupt                                              */</span></span><br><span class="line">  I2C2_EV_IRQn                = <span class="number">33</span>,     <span class="comment">/*!&lt; I2C2 Event Interrupt                                              */</span></span><br><span class="line">  I2C2_ER_IRQn                = <span class="number">34</span>,     <span class="comment">/*!&lt; I2C2 Error Interrupt                                              */</span></span><br><span class="line">  SPI1_IRQn                   = <span class="number">35</span>,     <span class="comment">/*!&lt; SPI1 global Interrupt                                             */</span></span><br><span class="line">  SPI2_IRQn                   = <span class="number">36</span>,     <span class="comment">/*!&lt; SPI2 global Interrupt                                             */</span></span><br><span class="line">  USART1_IRQn                 = <span class="number">37</span>,     <span class="comment">/*!&lt; USART1 global Interrupt                                           */</span></span><br><span class="line">  USART2_IRQn                 = <span class="number">38</span>,     <span class="comment">/*!&lt; USART2 global Interrupt                                           */</span></span><br><span class="line">  USART3_IRQn                 = <span class="number">39</span>,     <span class="comment">/*!&lt; USART3 global Interrupt                                           */</span></span><br><span class="line">  EXTI15_10_IRQn              = <span class="number">40</span>,     <span class="comment">/*!&lt; External Line[15:10] Interrupts                                   */</span></span><br><span class="line">  RTC_Alarm_IRQn              = <span class="number">41</span>,     <span class="comment">/*!&lt; RTC Alarm (A and B) through EXTI Line Interrupt                   */</span></span><br><span class="line">  OTG_FS_WKUP_IRQn            = <span class="number">42</span>,     <span class="comment">/*!&lt; USB OTG FS Wakeup through EXTI line interrupt                     */</span></span><br><span class="line">  TIM8_BRK_TIM12_IRQn         = <span class="number">43</span>,     <span class="comment">/*!&lt; TIM8 Break Interrupt and TIM12 global interrupt                   */</span></span><br><span class="line">  TIM8_UP_TIM13_IRQn          = <span class="number">44</span>,     <span class="comment">/*!&lt; TIM8 Update Interrupt and TIM13 global interrupt                  */</span></span><br><span class="line">  TIM8_TRG_COM_TIM14_IRQn     = <span class="number">45</span>,     <span class="comment">/*!&lt; TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */</span></span><br><span class="line">  TIM8_CC_IRQn                = <span class="number">46</span>,     <span class="comment">/*!&lt; TIM8 Capture Compare global interrupt                             */</span></span><br><span class="line">  DMA1_Stream7_IRQn           = <span class="number">47</span>,     <span class="comment">/*!&lt; DMA1 Stream7 Interrupt                                            */</span></span><br><span class="line">  FSMC_IRQn                   = <span class="number">48</span>,     <span class="comment">/*!&lt; FSMC global Interrupt                                             */</span></span><br><span class="line">  SDIO_IRQn                   = <span class="number">49</span>,     <span class="comment">/*!&lt; SDIO global Interrupt                                             */</span></span><br><span class="line">  TIM5_IRQn                   = <span class="number">50</span>,     <span class="comment">/*!&lt; TIM5 global Interrupt                                             */</span></span><br><span class="line">  SPI3_IRQn                   = <span class="number">51</span>,     <span class="comment">/*!&lt; SPI3 global Interrupt                                             */</span></span><br><span class="line">  UART4_IRQn                  = <span class="number">52</span>,     <span class="comment">/*!&lt; UART4 global Interrupt                                            */</span></span><br><span class="line">  UART5_IRQn                  = <span class="number">53</span>,     <span class="comment">/*!&lt; UART5 global Interrupt                                            */</span></span><br><span class="line">  TIM6_DAC_IRQn               = <span class="number">54</span>,     <span class="comment">/*!&lt; TIM6 global and DAC1&amp;2 underrun error  interrupts                 */</span></span><br><span class="line">  TIM7_IRQn                   = <span class="number">55</span>,     <span class="comment">/*!&lt; TIM7 global interrupt                                             */</span></span><br><span class="line">  DMA2_Stream0_IRQn           = <span class="number">56</span>,     <span class="comment">/*!&lt; DMA2 Stream 0 global Interrupt                                    */</span></span><br><span class="line">  DMA2_Stream1_IRQn           = <span class="number">57</span>,     <span class="comment">/*!&lt; DMA2 Stream 1 global Interrupt                                    */</span></span><br><span class="line">  DMA2_Stream2_IRQn           = <span class="number">58</span>,     <span class="comment">/*!&lt; DMA2 Stream 2 global Interrupt                                    */</span></span><br><span class="line">  DMA2_Stream3_IRQn           = <span class="number">59</span>,     <span class="comment">/*!&lt; DMA2 Stream 3 global Interrupt                                    */</span></span><br><span class="line">  DMA2_Stream4_IRQn           = <span class="number">60</span>,     <span class="comment">/*!&lt; DMA2 Stream 4 global Interrupt                                    */</span></span><br><span class="line">  ETH_IRQn                    = <span class="number">61</span>,     <span class="comment">/*!&lt; Ethernet global Interrupt                                         */</span></span><br><span class="line">  ETH_WKUP_IRQn               = <span class="number">62</span>,     <span class="comment">/*!&lt; Ethernet Wakeup through EXTI line Interrupt                       */</span></span><br><span class="line">  CAN2_TX_IRQn                = <span class="number">63</span>,     <span class="comment">/*!&lt; CAN2 TX Interrupt                                                 */</span></span><br><span class="line">  CAN2_RX0_IRQn               = <span class="number">64</span>,     <span class="comment">/*!&lt; CAN2 RX0 Interrupt                                                */</span></span><br><span class="line">  CAN2_RX1_IRQn               = <span class="number">65</span>,     <span class="comment">/*!&lt; CAN2 RX1 Interrupt                                                */</span></span><br><span class="line">  CAN2_SCE_IRQn               = <span class="number">66</span>,     <span class="comment">/*!&lt; CAN2 SCE Interrupt                                                */</span></span><br><span class="line">  OTG_FS_IRQn                 = <span class="number">67</span>,     <span class="comment">/*!&lt; USB OTG FS global Interrupt                                       */</span></span><br><span class="line">  DMA2_Stream5_IRQn           = <span class="number">68</span>,     <span class="comment">/*!&lt; DMA2 Stream 5 global interrupt                                    */</span></span><br><span class="line">  DMA2_Stream6_IRQn           = <span class="number">69</span>,     <span class="comment">/*!&lt; DMA2 Stream 6 global int   terrupt                                    */</span></span><br><span class="line">  USART6_IRQn                 = <span class="number">71</span>,     <span class="comment">/*!&lt; USART6 global interrupt                                           */</span></span><br><span class="line">  I2C3_EV_IRQn                = <span class="number">72</span>,     <span class="comment">/*!&lt; I2C3 event interrupt                                              */</span></span><br><span class="line">  I2C3_ER_IRQn                = <span class="number">73</span>,     <span class="comment">/*!&lt; I2C3 error interrupt                                              */</span></span><br><span class="line">  OTG_HS_EP1_OUT_IRQn         = <span class="number">74</span>,     <span class="comment">/*!&lt; USB OTG HS End Point 1 Out global interrupt                       */</span></span><br><span class="line">  OTG_HS_EP1_IN_IRQn          = <span class="number">75</span>,     <span class="comment">/*!&lt; USB OTG HS End Point 1 In global interrupt                        */</span></span><br><span class="line">  OTG_HS_WKUP_IRQn            = <span class="number">76</span>,     <span class="comment">/*!&lt; USB OTG HS Wakeup through EXTI interrupt                          */</span></span><br><span class="line">  OTG_HS_IRQn                 = <span class="number">77</span>,     <span class="comment">/*!&lt; USB OTG HS global interrupt                                       */</span></span><br><span class="line">  DCMI_IRQn                   = <span class="number">78</span>,     <span class="comment">/*!&lt; DCMI global interrupt                                             */</span></span><br><span class="line">  RNG_IRQn                    = <span class="number">80</span>,     <span class="comment">/*!&lt; RNG global Interrupt                                              */</span></span><br><span class="line">  FPU_IRQn                    = <span class="number">81</span>      <span class="comment">/*!&lt; FPU global interrupt                                               */</span></span><br><span class="line">&#125; IRQn_Type;</span><br></pre></td></tr></table></figure><h3 id="PreemptPriority（抢占优先级）和SubPriority-响应优先级"><a href="#PreemptPriority（抢占优先级）和SubPriority-响应优先级" class="headerlink" title="PreemptPriority（抢占优先级）和SubPriority (响应优先级)"></a>PreemptPriority（抢占优先级）和SubPriority (响应优先级)</h3><p>可输入0-15（十进制），对应抢占优先级/响应优先级的大小，数字越小优先级越高。朝IPR寄存器内写入，优先级的输入范围随Group设置范围变化。</p><h2 id="使能-失能中断-NVIC"><a href="#使能-失能中断-NVIC" class="headerlink" title="使能/失能中断(NVIC)"></a>使能/失能中断(NVIC)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_NVIC_EnableIRQ</span><span class="params">(IRQn_Type IRQn)</span> <span class="comment">//使能</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_NVIC_DisableIRQ</span><span class="params">(IRQn_Type IRQn)</span> <span class="comment">//失能</span></span><br></pre></td></tr></table></figure><p>其输入参数IRQn(中断号) 同上。用于指明控制哪一个中断。</p><h2 id="配置EXTI模式和映射IO"><a href="#配置EXTI模式和映射IO" class="headerlink" title="配置EXTI模式和映射IO"></a>配置EXTI模式和映射IO</h2><p>在HAL库中，配置EXTI寄存器上沿/下沿触发，映射IO，都通过在引脚初始化时，设置GPIO_InitTypeDef.mode实现。可设置参数如下，详见GPIO章节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_IT_RISING             <span class="comment">//具有上升沿触发检测的外部中断模式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_IT_FALLING            <span class="comment">//具有下降沿触发检测的外部中断模式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_IT_RISING_FALLING     <span class="comment">//上升沿和下降沿均触发的外部中断模式</span></span></span><br><span class="line"><span class="comment">//下面几个对应的是&quot;事件&quot;,RISING,FALLING等含义同中断.在这里事件可以唤醒休眠状态(WFE)的MCU,但是不会产生&quot;中断事件&quot;,也就是说不会执行中断处理函数,也就说不需要清除外设中断挂起位或 NVIC. 使用GPIO&quot;事件&quot;来启动AD转换也是可以的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_EVT_RISING                   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_EVT_FALLING                  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  GPIO_MODE_EVT_RISING_FALLING        </span></span><br></pre></td></tr></table></figure><h2 id="清除中断flag"><a href="#清除中断flag" class="headerlink" title="清除中断flag"></a>清除中断flag</h2><p>HAL库中中断flag会在调用回调函数前自动通过宏清除，宏定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI-&gt;PR = (__EXTI_LINE__))</span></span><br></pre></td></tr></table></figure><p>这个过程无需人为干预</p><h2 id="中断Handler"><a href="#中断Handler" class="headerlink" title="中断Handler"></a>中断Handler</h2><p>在进入中断时，我们需要编写中断执行的函数，STM32不同于大部分单片机中断函数都叫interrupt，它不同的中断会调用各自不同的函数。这些中断函数在startup文件中被定义，称之为“中断向量表”。以下是定义代码和对应的名称。<strong>在使用CubeMX初始化代码时，这些Handler会被定义在stm32fxxx_it.c文件中，可以直接在it.c文件中对中断进行编辑。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br><span class="line"></span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler                   ; Window WatchDog                                        </span><br><span class="line">                DCD     PVD_IRQHandler                    ; PVD through EXTI Line detection                        </span><br><span class="line">                DCD     TAMP_STAMP_IRQHandler             ; Tamper and TimeStamps through the EXTI line            </span><br><span class="line">                DCD     RTC_WKUP_IRQHandler               ; RTC Wakeup through the EXTI line                       </span><br><span class="line">                DCD     FLASH_IRQHandler                  ; FLASH                                           </span><br><span class="line">                DCD     RCC_IRQHandler                    ; RCC                                             </span><br><span class="line">                DCD     EXTI0_IRQHandler                  ; EXTI Line0                                             </span><br><span class="line">                DCD     EXTI1_IRQHandler                  ; EXTI Line1                                             </span><br><span class="line">                DCD     EXTI2_IRQHandler                  ; EXTI Line2                                             </span><br><span class="line">                DCD     EXTI3_IRQHandler                  ; EXTI Line3                                             </span><br><span class="line">                DCD     EXTI4_IRQHandler                  ; EXTI Line4                                             </span><br><span class="line">                DCD     DMA1_Stream0_IRQHandler           ; DMA1 Stream 0                                   </span><br><span class="line">                DCD     DMA1_Stream1_IRQHandler           ; DMA1 Stream 1                                   </span><br><span class="line">                DCD     DMA1_Stream2_IRQHandler           ; DMA1 Stream 2                                   </span><br><span class="line">                DCD     DMA1_Stream3_IRQHandler           ; DMA1 Stream 3                                   </span><br><span class="line">                DCD     DMA1_Stream4_IRQHandler           ; DMA1 Stream 4                                   </span><br><span class="line">                DCD     DMA1_Stream5_IRQHandler           ; DMA1 Stream 5                                   </span><br><span class="line">                DCD     DMA1_Stream6_IRQHandler           ; DMA1 Stream 6                                   </span><br><span class="line">                DCD     ADC_IRQHandler                    ; ADC1, ADC2 and ADC3s                            </span><br><span class="line">                DCD     CAN1_TX_IRQHandler                ; CAN1 TX                                                </span><br><span class="line">                DCD     CAN1_RX0_IRQHandler               ; CAN1 RX0                                               </span><br><span class="line">                DCD     CAN1_RX1_IRQHandler               ; CAN1 RX1                                               </span><br><span class="line">                DCD     CAN1_SCE_IRQHandler               ; CAN1 SCE                                               </span><br><span class="line">                DCD     EXTI9_5_IRQHandler                ; External Line[9:5]s                                    </span><br><span class="line">                DCD     TIM1_BRK_TIM9_IRQHandler          ; TIM1 Break and TIM9                   </span><br><span class="line">                DCD     TIM1_UP_TIM10_IRQHandler          ; TIM1 Update and TIM10                 </span><br><span class="line">                DCD     TIM1_TRG_COM_TIM11_IRQHandler     ; TIM1 Trigger and Commutation and TIM11</span><br><span class="line">                DCD     TIM1_CC_IRQHandler                ; TIM1 Capture Compare                                   </span><br><span class="line">                DCD     TIM2_IRQHandler                   ; TIM2                                            </span><br><span class="line">                DCD     TIM3_IRQHandler                   ; TIM3                                            </span><br><span class="line">                DCD     TIM4_IRQHandler                   ; TIM4                                            </span><br><span class="line">                DCD     I2C1_EV_IRQHandler                ; I2C1 Event                                             </span><br><span class="line">                DCD     I2C1_ER_IRQHandler                ; I2C1 Error                                             </span><br><span class="line">                DCD     I2C2_EV_IRQHandler                ; I2C2 Event                                             </span><br><span class="line">                DCD     I2C2_ER_IRQHandler                ; I2C2 Error                                               </span><br><span class="line">                DCD     SPI1_IRQHandler                   ; SPI1                                            </span><br><span class="line">                DCD     SPI2_IRQHandler                   ; SPI2                                            </span><br><span class="line">                DCD     USART1_IRQHandler                 ; USART1                                          </span><br><span class="line">                DCD     USART2_IRQHandler                 ; USART2                                          </span><br><span class="line">                DCD     USART3_IRQHandler                 ; USART3                                          </span><br><span class="line">                DCD     EXTI15_10_IRQHandler              ; External Line[15:10]s                                  </span><br><span class="line">                DCD     RTC_Alarm_IRQHandler              ; RTC Alarm (A and B) through EXTI Line                  </span><br><span class="line">                DCD     OTG_FS_WKUP_IRQHandler            ; USB OTG FS Wakeup through EXTI line                        </span><br><span class="line">                DCD     TIM8_BRK_TIM12_IRQHandler         ; TIM8 Break and TIM12                  </span><br><span class="line">                DCD     TIM8_UP_TIM13_IRQHandler          ; TIM8 Update and TIM13                 </span><br><span class="line">                DCD     TIM8_TRG_COM_TIM14_IRQHandler     ; TIM8 Trigger and Commutation and TIM14</span><br><span class="line">                DCD     TIM8_CC_IRQHandler                ; TIM8 Capture Compare                                   </span><br><span class="line">                DCD     DMA1_Stream7_IRQHandler           ; DMA1 Stream7                                           </span><br><span class="line">                DCD     FMC_IRQHandler                    ; FMC                                             </span><br><span class="line">                DCD     SDIO_IRQHandler                   ; SDIO                                            </span><br><span class="line">                DCD     TIM5_IRQHandler                   ; TIM5                                            </span><br><span class="line">                DCD     SPI3_IRQHandler                   ; SPI3                                            </span><br><span class="line">                DCD     UART4_IRQHandler                  ; UART4                                           </span><br><span class="line">                DCD     UART5_IRQHandler                  ; UART5                                           </span><br><span class="line">                DCD     TIM6_DAC_IRQHandler               ; TIM6 and DAC1&amp;2 underrun errors                   </span><br><span class="line">                DCD     TIM7_IRQHandler                   ; TIM7                   </span><br><span class="line">                DCD     DMA2_Stream0_IRQHandler           ; DMA2 Stream 0                                   </span><br><span class="line">                DCD     DMA2_Stream1_IRQHandler           ; DMA2 Stream 1                                   </span><br><span class="line">                DCD     DMA2_Stream2_IRQHandler           ; DMA2 Stream 2                                   </span><br><span class="line">                DCD     DMA2_Stream3_IRQHandler           ; DMA2 Stream 3                                   </span><br><span class="line">                DCD     DMA2_Stream4_IRQHandler           ; DMA2 Stream 4                                   </span><br><span class="line">                DCD     ETH_IRQHandler                    ; Ethernet                                        </span><br><span class="line">                DCD     ETH_WKUP_IRQHandler               ; Ethernet Wakeup through EXTI line                      </span><br><span class="line">                DCD     CAN2_TX_IRQHandler                ; CAN2 TX                                                </span><br><span class="line">                DCD     CAN2_RX0_IRQHandler               ; CAN2 RX0                                               </span><br><span class="line">                DCD     CAN2_RX1_IRQHandler               ; CAN2 RX1                                               </span><br><span class="line">                DCD     CAN2_SCE_IRQHandler               ; CAN2 SCE                                               </span><br><span class="line">                DCD     OTG_FS_IRQHandler                 ; USB OTG FS                                      </span><br><span class="line">                DCD     DMA2_Stream5_IRQHandler           ; DMA2 Stream 5                                   </span><br><span class="line">                DCD     DMA2_Stream6_IRQHandler           ; DMA2 Stream 6                                   </span><br><span class="line">                DCD     DMA2_Stream7_IRQHandler           ; DMA2 Stream 7                                   </span><br><span class="line">                DCD     USART6_IRQHandler                 ; USART6                                           </span><br><span class="line">                DCD     I2C3_EV_IRQHandler                ; I2C3 event                                             </span><br><span class="line">                DCD     I2C3_ER_IRQHandler                ; I2C3 error                                             </span><br><span class="line">                DCD     OTG_HS_EP1_OUT_IRQHandler         ; USB OTG HS End Point 1 Out                      </span><br><span class="line">                DCD     OTG_HS_EP1_IN_IRQHandler          ; USB OTG HS End Point 1 In                       </span><br><span class="line">                DCD     OTG_HS_WKUP_IRQHandler            ; USB OTG HS Wakeup through EXTI                         </span><br><span class="line">                DCD     OTG_HS_IRQHandler                 ; USB OTG HS                                      </span><br><span class="line">                DCD     DCMI_IRQHandler                   ; DCMI  </span><br><span class="line">                DCD     0                                 ; Reserved                              </span><br><span class="line">                DCD     HASH_RNG_IRQHandler               ; Hash and Rng</span><br><span class="line">                DCD     FPU_IRQHandler                    ; FPU</span><br><span class="line">                </span><br><span class="line">                                         </span><br><span class="line">__Vectors_End</span><br></pre></td></tr></table></figure><h2 id="HAL库的中断处理流程"><a href="#HAL库的中断处理流程" class="headerlink" title="HAL库的中断处理流程"></a>HAL库的中断处理流程</h2><h3 id="CubeMX-HAL工程中断初始化的流程"><a href="#CubeMX-HAL工程中断初始化的流程" class="headerlink" title="CubeMX+HAL工程中断初始化的流程"></a>CubeMX+HAL工程中断初始化的流程</h3><p>如果我们采用寄存器编程，以初始化映射至IO的EXTI中断为例，那么需要经历以下步骤：</p><ol><li>使能GPIO时钟和NVIC、EXTI总线时钟</li><li>设置GPIO模式（输入、是否上拉等）</li><li>设置EXTI和GPIO的映射关系（设置APIO或STYSCFG寄存器）</li><li>设置边沿触发模式(RTSR,FTSR)、enbale中断(IMR/EMR)</li><li>设置NVIC分组模式</li><li>设置NVIC优先级模式</li><li>使能NVIC对应中断</li></ol><p>在使用CubeMX生成的工程中，1,2,3,4都是在MX_GPIO_Init()函数内完成。如果是映射至IO的EXTI的中断，那么MX_GPIO_Init()函数内还会完成相应中断的优先级设置和使能，也就是6,7；如果是其他中断，那么在相应外设的init函数中也会完成优先级设置和使能。</p><p>鉴于NVIC的分组模式一般不会更改，因此NVIC的分组在一开始就被设置，CubeMX+HAL库生成的工程会在HAL_Init()函数中完成。</p><p>main函数中，会依次调用这三个函数来完成整个系统的初始化，其中便囊括了中断的初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//完成步骤5，设置分组</span></span><br><span class="line">SystemClock_Config();</span><br><span class="line">MX_GPIO_Init();<span class="comment">//完成步骤1.2.3.4.6.7;初始化GPIO并配置和映射EXTI线，然后使能NVIC对应的中断</span></span><br></pre></td></tr></table></figure><h3 id="中断调用函数的流程"><a href="#中断调用函数的流程" class="headerlink" title="中断调用函数的流程"></a>中断调用函数的流程</h3><p>在中断被触发时，STM32首先会调用Handler，也就是下方 <em>中断Handler</em> 小节内介绍的这些。这些Handler的内容存储在stm32fxxx_it.c。Hander函数内首先调用公共中断函数，来实现清除中断标志等，然后调用回调函数执行处理的内容。这里面用户可直接编辑Handler函数的内容，来决定其调用哪些公共函数，也可自行重新定义Callback函数的内容，来编写中断处理程序。</p><p>这个流程的函数伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">xxx_IRQHandler</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//public interrupt functions</span></span><br><span class="line">xxx_public_INT_Func(specific parameters);<span class="comment">//e.g. HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">xxx_public_INT_Func</span><span class="params">(parameters)</span>&#123;</span><br><span class="line">public_funcs(parameters);<span class="comment">// e.g. __HAL_GPIO_EXTI_CLEAR_IT(GOIO_Pin)</span></span><br><span class="line">Callback_func(parameters);<span class="comment">// e.g. HAL_GPIO_EXTI_Callback(GPIO_Pin)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Callback_func</span><span class="params">(parameters)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parameters == xx)&#123;</span><br><span class="line">        <span class="comment">//do sth</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parameters == yy)&#123;</span><br><span class="line">        <span class="comment">//do sth</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//interrupt Processing code, written by user</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，callback函数是弱定义的，例如EXTI的回调函数定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br></pre></td></tr></table></figure><p><strong>因此，在HAL库中使用中断时，用户只需要自定重新定义回调函数部分，找到不同中断Handler调用的回调函数，在回调函数部分写入中断处理的代码即可。</strong>通常来说，用户只需要自己重新定义Callback fucntion，并根据传入的参数不同，使用if编写不同中断源的处理程序即可。但是再多个外设共用一个回调函数时，这些if可能需要写非常多，这样不便于管理，因此直接把处理函数写在其自己的驱动文件内，然后在xxx_IRQHandler() 内调用即可。</p><hr><h1 id="UART串口"><a href="#UART串口" class="headerlink" title="UART串口"></a>UART串口</h1><h2 id="huart句柄"><a href="#huart句柄" class="headerlink" title="huart句柄"></a>huart句柄</h2><p>这是一个调用和uart相关HAL库接口时，需要传入的参数，用于说明数据从哪个串口进来，串口的基本设置参数。这个参数被称为”handel”，也就是huart中h的来源，可以理解为握着uart1的handel，就可以控制和操作uart1的意思。其源代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">UART_HandleTypeDef</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  USART_TypeDef                 *Instance;        <span class="comment">/*!&lt; UART 控制寄存器基地址        */</span></span><br><span class="line">  UART_InitTypeDef              Init;             <span class="comment">/*!&lt; UART 串口初始化数据类型      */</span></span><br><span class="line">  <span class="type">const</span> <span class="type">uint8_t</span>                 *pTxBuffPtr;      <span class="comment">/*!&lt; 发送buffer地址 */</span></span><br><span class="line">  <span class="type">uint16_t</span>                      TxXferSize;       <span class="comment">/*!&lt; 发送数据个数             */</span></span><br><span class="line">  __IO <span class="type">uint16_t</span>                 TxXferCount;      <span class="comment">/*!&lt; 发送数据计数器           */</span></span><br><span class="line">  <span class="type">uint8_t</span>                       *pRxBuffPtr;      <span class="comment">/*!&lt; 接收buffer地址*/</span></span><br><span class="line">  <span class="type">uint16_t</span>                      RxXferSize;       <span class="comment">/*!&lt; 接收数据个数            */</span></span><br><span class="line">  __IO <span class="type">uint16_t</span>                 RxXferCount;      <span class="comment">/*!&lt; 接收数据计数器           */</span></span><br><span class="line">  __IO HAL_UART_RxTypeTypeDef ReceptionType;      <span class="comment">/*!&lt; Type of ongoing reception          */</span></span><br><span class="line">  __IO HAL_UART_RxEventTypeTypeDef RxEventType;   <span class="comment">/*!&lt; Type of Rx Event                   */</span></span><br><span class="line">  DMA_HandleTypeDef             *hdmatx;          <span class="comment">/*!&lt; UART Tx DMA Handle parameters      */</span></span><br><span class="line">  DMA_HandleTypeDef             *hdmarx;          <span class="comment">/*!&lt; UART Rx DMA Handle parameters      */</span></span><br><span class="line">  HAL_LockTypeDef               Lock;             <span class="comment">/*!&lt; Locking object                     */</span></span><br><span class="line">  __IO HAL_UART_StateTypeDef    gState;           <span class="comment">/*!&lt; UART state information related to global Handle management</span></span><br><span class="line"><span class="comment">                                                       and also related to Tx operations.</span></span><br><span class="line"><span class="comment">                                                       This parameter can be a value of @ref HAL_UART_StateTypeDef */</span></span><br><span class="line">  __IO HAL_UART_StateTypeDef    RxState;          <span class="comment">/*!&lt; UART state information related to Rx operations.</span></span><br><span class="line"><span class="comment">                                                       This parameter can be a value of @ref HAL_UART_StateTypeDef */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span>                 ErrorCode;        <span class="comment">/*!&lt; UART Error code                    */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span></span><br><span class="line">  <span class="type">void</span> (* TxHalfCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);        <span class="comment">/*!&lt; UART Tx Half Complete Callback        */</span></span><br><span class="line">  <span class="type">void</span> (* TxCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);            <span class="comment">/*!&lt; UART Tx Complete Callback             */</span></span><br><span class="line">  <span class="type">void</span> (* RxHalfCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);        <span class="comment">/*!&lt; UART Rx Half Complete Callback        */</span></span><br><span class="line">  <span class="type">void</span> (* RxCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);            <span class="comment">/*!&lt; UART Rx Complete Callback             */</span></span><br><span class="line">  <span class="type">void</span> (* ErrorCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);             <span class="comment">/*!&lt; UART Error Callback                   */</span></span><br><span class="line">  <span class="type">void</span> (* AbortCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);         <span class="comment">/*!&lt; UART Abort Complete Callback          */</span></span><br><span class="line">  <span class="type">void</span> (* AbortTransmitCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart); <span class="comment">/*!&lt; UART Abort Transmit Complete Callback */</span></span><br><span class="line">  <span class="type">void</span> (* AbortReceiveCpltCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);  <span class="comment">/*!&lt; UART Abort Receive Complete Callback  */</span></span><br><span class="line">  <span class="type">void</span> (* WakeupCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);            <span class="comment">/*!&lt; UART Wakeup Callback                  */</span></span><br><span class="line">  <span class="type">void</span> (* RxEventCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Pos); <span class="comment">/*!&lt; UART Reception Event Callback     */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> (* MspInitCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);           <span class="comment">/*!&lt; UART Msp Init callback                */</span></span><br><span class="line">  <span class="type">void</span> (* MspDeInitCallback)(<span class="keyword">struct</span> __UART_HandleTypeDef *huart);         <span class="comment">/*!&lt; UART Msp DeInit callback              */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span></span><br><span class="line"></span><br><span class="line">&#125; UART_HandleTypeDef;</span><br></pre></td></tr></table></figure><h3 id="USART-TypeDef"><a href="#USART-TypeDef" class="headerlink" title="USART_TypeDef"></a>USART_TypeDef</h3><p>该结构体用于参数UASRT硬件的寄存器基地址，结构体定义如下：</p><p>在创建 $USART_TypeDef\ *$ 类型，以某一个串口配置寄存器开始的结构体指针后，便可以访问该串口的配置寄存器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> SR;         <span class="comment">/*!&lt; USART Status register,                   Address offset: 0x00 */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> DR;         <span class="comment">/*!&lt; USART Data register,                     Address offset: 0x04 */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> BRR;        <span class="comment">/*!&lt; USART Baud rate register,                Address offset: 0x08 */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CR1;        <span class="comment">/*!&lt; USART Control register 1,                Address offset: 0x0C */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CR2;        <span class="comment">/*!&lt; USART Control register 2,                Address offset: 0x10 */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CR3;        <span class="comment">/*!&lt; USART Control register 3,                Address offset: 0x14 */</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> GTPR;       <span class="comment">/*!&lt; USART Guard time and prescaler register, Address offset: 0x18 */</span></span><br><span class="line">&#125; USART_TypeDef;</span><br></pre></td></tr></table></figure><p>该结构体的基地址变量，由总线基地址+偏移地址宏定义，例如F407定义的USART1和2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> USART1_BASE           (APB2PERIPH_BASE + 0x1000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USART2_BASE           (APB1PERIPH_BASE + 0x4400UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USART1              ((USART_TypeDef *) USART1_BASE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USART2              ((USART_TypeDef *) USART2_BASE)</span></span><br></pre></td></tr></table></figure><p>对于F4系列，有6个串口：USART1-3，UART4-5，USART6，他们都通过如上代码宏定义了基地址，因此给结构体成员Instance传入这些地址即可。</p><h3 id="UART-InitTypeDef"><a href="#UART-InitTypeDef" class="headerlink" title="UART_InitTypeDef"></a>UART_InitTypeDef</h3><p>该结构体用于存放UART通信中的一些基本参数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint32_t</span> BaudRate; <span class="comment">//波特率</span></span><br><span class="line">  <span class="type">uint32_t</span> WordLength; <span class="comment">//数据长度</span></span><br><span class="line">  <span class="type">uint32_t</span> StopBits; <span class="comment">//停止位长度</span></span><br><span class="line">  <span class="type">uint32_t</span> Parity; <span class="comment">//奇偶校验配置</span></span><br><span class="line">  <span class="type">uint32_t</span> Mode;<span class="comment">// UART收发模式设置（收、发、同时收发）</span></span><br><span class="line">  <span class="type">uint32_t</span> HwFlowCtl; <span class="comment">//硬件流控制</span></span><br><span class="line">  <span class="type">uint32_t</span> OverSampling; <span class="comment">//过采样设置</span></span><br><span class="line">&#125; UART_InitTypeDef;</span><br></pre></td></tr></table></figure><ul><li><p><strong>BaudRate:</strong> 直接设置波特率数字即可</p></li><li><p><strong>WordLength:</strong> 宏定义了 UART_WORDLENGTH_8B 和 UART_WORDLENGTH_9B 两种，分别对应8bit和9bit数据位</p></li><li><p><strong>StopBits:</strong> 宏定义 UART_STOPBITS_1，UART_STOPBITS_2 两种输入，分别对应1个停止位和2个</p></li><li><strong>Parity：</strong>有 UART_PARITY_NONE，UART_PARITY_EVEN，UART_PARITY_ODD 三种，分别对应无、偶校验、奇校验</li><li><strong>Mode:</strong> 有UART_MODE_RX，UART_MODE_TX，UART_MODE_TX_RX 三种，分别对应单收、单发、同时收发三种工作模式</li><li><strong>HwFlowCtl:</strong> 有UART_HWCONTROL_NONE，UART_HWCONTROL_RTS，UART_HWCONTROL_CTS，UART_HWCONTROL_RTS_CTS四种输入，分别对应无硬件流控制，接受流控制，发送流控制，同时启用接受发送流控制。</li><li><strong>OverSampling：</strong> UART_OVERSAMPLING_16，UART_OVERSAMPLING_8两种，对应16位过采样和8位，F1系列不可配置</li></ul><h2 id="串口初始化"><a href="#串口初始化" class="headerlink" title="串口初始化"></a>串口初始化</h2><h3 id="轮询方式收发的初始化"><a href="#轮询方式收发的初始化" class="headerlink" title="轮询方式收发的初始化"></a>轮询方式收发的初始化</h3><p>使用轮询模式时，只需要先配置huart中Init结构体的参数，然后再调用HAL_UART_Init函数进行寄存器配置即可。下面是一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">huart1.Instance = USART3;</span><br><span class="line">huart1.Init.BaudRate = <span class="number">115200</span>;</span><br><span class="line">huart1.Init.WordLength = UART_WORDLENGTH_8B;</span><br><span class="line">huart1.Init.StopBits = UART_STOPBITS_1;</span><br><span class="line">huart1.Init.Parity = UART_PARITY_NONE;</span><br><span class="line">huart1.Init.Mode = UART_MODE_TX_RX;</span><br><span class="line">huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;</span><br><span class="line">huart1.Init.OverSampling = UART_OVERSAMPLING_16;</span><br><span class="line"><span class="keyword">if</span> (HAL_UART_Init(&amp;huart1) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">  Error_Handler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在HAL_UART_Init()函数中，会依次执行如下操作：</p><ul><li>若检测为轮询模式的初始化，则会调用HAL_UART_MspInit()函数对其所用的总线时钟、GPIO等关联设备进行初始化</li><li>UART_SetConfig() 函数来对控制寄存器写入</li><li>对句柄结构体中所有状态指示器写入OK的状态</li></ul><p>其中HAL_UART_MspInit()函数一个例子如下，它会对所有关联的设备进行初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_MspInit</span><span class="params">(UART_HandleTypeDef* uartHandle)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span>(uartHandle-&gt;Instance==USART1)</span><br><span class="line">  &#123;</span><br><span class="line">    __HAL_RCC_USART1_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;<span class="comment">//该GPIO复用设置为GPIO_AF7_USART1</span></span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用CubeMX配置工程时，会生成usart.c文件来存放各项init函数，例如总初始化函数MX_USART1_UART_Init()、关联设备初始化函数HAL_UART_MspIni()，以备HAL库文件stm32fxxx_hal_uart.c调用</p><h2 id="轮询-阻塞-数据收发"><a href="#轮询-阻塞-数据收发" class="headerlink" title="轮询(阻塞)数据收发"></a>轮询(阻塞)数据收发</h2><p>在轮询数据模式下，MCU专注于发送数据或接受数据，在Timeout规定的时间内收发完成则return 成功，否则return超时。在这个期间，MCU一直除以等数据接受或者看着输出发送的状态，效率较低。</p><h3 id="轮询串口接收"><a href="#轮询串口接收" class="headerlink" title="轮询串口接收"></a>轮询串口接收</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_Receive</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size, <span class="type">uint32_t</span> Timeout)</span></span><br></pre></td></tr></table></figure><p>huart句柄已在上方介绍，剩余输入参数分别是：</p><ul><li>pData：存放数据的buffer首地址</li><li>Size：接受数据的字符串长度</li><li>Timeout：轮询时长，超时则返回</li></ul><p>这个函数会返回的类型”HAL_StatusTypeDef”有如下状态：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  HAL_OK       = <span class="number">0x00</span>U, <span class="comment">//成功接收</span></span><br><span class="line">  HAL_ERROR    = <span class="number">0x01</span>U, <span class="comment">//出现错误</span></span><br><span class="line">  HAL_BUSY     = <span class="number">0x02</span>U, <span class="comment">//串口忙</span></span><br><span class="line">  HAL_TIMEOUT  = <span class="number">0x03</span>U  <span class="comment">//轮询超时</span></span><br><span class="line">&#125; HAL_StatusTypeDef;</span><br></pre></td></tr></table></figure><h3 id="轮询串口发送"><a href="#轮询串口发送" class="headerlink" title="轮询串口发送"></a>轮询串口发送</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_Transmit</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">const</span> <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size, <span class="type">uint32_t</span> Timeout)</span></span><br></pre></td></tr></table></figure><p>其输入参数、返回参数定义均同轮询接收函数一样，这里不重复介绍。</p><h2 id="中断数据收发"><a href="#中断数据收发" class="headerlink" title="中断数据收发"></a>中断数据收发</h2><p>使用中断模式进行数据收发时，MCU进会在有数据进来的时候让CPU去处理数据。其余时候可以干其他事情。这样效率较高</p><h3 id="中断串口接收"><a href="#中断串口接收" class="headerlink" title="中断串口接收"></a>中断串口接收</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_UART_Receive_IT</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size)</span></span><br></pre></td></tr></table></figure><p>参数如下：</p><ul><li>huart：uart handle地址</li><li>pData：存放数据的buffer首地址</li><li>Size：接受数据的字符串长度</li></ul><p>这里面输入的Size参数会被赋值进handle内的RxXferSize成员内。pData会被赋值进handle内的pRxBuffPtr成员内。在USART中断函数</p><p>HAL_UART_IRQHandler()中，会首先判断有没有错误出现，如果没有错误，则调用UART_Receive_IT()函数进行接收。这两个函数都被定义在stm32xxx_hal_uart.c内。</p><p>UART_Receive_IT函数中，每接收一个数据，就会对pRxBuffPtr的指针地址进行位移，来指向下一个内存单元的地址。同时对RxXferCount自减。当RxXferCount自减至0时，会关闭USART接受相关的中断使能。这一段代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> HAL_StatusTypeDef <span class="title function_">UART_Receive_IT</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span>  *pdata8bits;</span><br><span class="line">  <span class="type">uint16_t</span> *pdata16bits;</span><br><span class="line">  <span class="keyword">if</span> (huart-&gt;RxState == HAL_UART_STATE_BUSY_RX)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ((huart-&gt;Init.WordLength == UART_WORDLENGTH_9B) &amp;&amp; (huart-&gt;Init.Parity == UART_PARITY_NONE))</span><br><span class="line">    &#123;</span><br><span class="line">      pdata8bits  = <span class="literal">NULL</span>;</span><br><span class="line">      pdata16bits = (<span class="type">uint16_t</span> *) huart-&gt;pRxBuffPtr;</span><br><span class="line">      *pdata16bits = (<span class="type">uint16_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="type">uint16_t</span>)<span class="number">0x01FF</span>);</span><br><span class="line">      huart-&gt;pRxBuffPtr += <span class="number">2U</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      pdata8bits = (<span class="type">uint8_t</span> *) huart-&gt;pRxBuffPtr;</span><br><span class="line">      pdata16bits  = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((huart-&gt;Init.WordLength == UART_WORDLENGTH_9B) || ((huart-&gt;Init.WordLength == UART_WORDLENGTH_8B) &amp;&amp; (huart-&gt;Init.Parity == UART_PARITY_NONE)))</span><br><span class="line">      &#123;</span><br><span class="line">        *pdata8bits = (<span class="type">uint8_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="type">uint8_t</span>)<span class="number">0x00FF</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        *pdata8bits = (<span class="type">uint8_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="type">uint8_t</span>)<span class="number">0x007F</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      huart-&gt;pRxBuffPtr += <span class="number">1U</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (--huart-&gt;RxXferCount == <span class="number">0U</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);</span><br><span class="line">      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);</span><br><span class="line">      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);</span><br><span class="line">      huart-&gt;RxState = HAL_UART_STATE_READY;</span><br><span class="line">      huart-&gt;RxEventType = HAL_UART_RXEVENT_TC;</span><br><span class="line">      <span class="keyword">if</span> (huart-&gt;ReceptionType == HAL_UART_RECEPTION_TOIDLE)</span><br><span class="line">      &#123;</span><br><span class="line">        huart-&gt;ReceptionType = HAL_UART_RECEPTION_STANDARD;</span><br><span class="line">        ATOMIC_CLEAR_BIT(huart-&gt;Instance-&gt;CR1, USART_CR1_IDLEIE);</span><br><span class="line">        <span class="keyword">if</span> (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))</span><br><span class="line">          __HAL_UART_CLEAR_IDLEFLAG(huart);</span><br><span class="line">          <span class="comment">//...未完</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因此，调用HAL_UART_Receive_IT()后便会自动使能UART接收相关串口中断，同时准备好接受。在当接受的字符&gt;=Size所指定的字符数之后，便会自动失能相关中断</strong></p><p>在UART_Receive_IT()中，如果指定的字符数已经接收完成（RxXferCount == 0），则会调用HAL_UART_RxCpltCallback()这一公共回调函数。因为HAL库的库文件需要把硬件抽象成接口，因此直接改库文件内的代码不利于移植，用户的自定义中断回到函数写在HAL_UART_RxCpltCallback()内即可。此时UART已经将接收到的字符存在了pData指定的地址内，在HAL_UART_RxCpltCallback()内对pData内的数据进行处理即可。如果处理完成还需继续接收下一个数据，则再次调用HAL_UART_Receive_IT()来启用中断准备接收。</p><p>举个例子，假设我使用的通信协议规定每8byte数据为以通信帧，一数据帧传送数据位1byte，那么就可以把Size设置为8，然后每8byte数据接收完成之后就会调用用户自定义的回调函数HAL_UART_RxCpltCallback()函数来让用户处理数据。</p><p>下面是一个例程，实现使用中断接受UART数据，然后在收到换行符时把接收的数据发回去（省去了系统初始化部分）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> ch;</span><br><span class="line"><span class="type">uint8_t</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">13</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    HAL_UART_Receive_IT(&amp;huart1,&amp;ch,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>&#123;</span><br><span class="line"><span class="comment">//user code here</span></span><br><span class="line">  buffer[count] = ch; <span class="comment">//ch就是pData指向的变量地址</span></span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span>(buffer[count<span class="number">-1</span>] == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">    HAL_UART_Transmit(huart, buffer, count , <span class="number">100</span>);<span class="comment">//把收到的字符发回串口</span></span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  HAL_UART_Receive_IT(&amp;huart1,&amp;ch,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SPI-通信"><a href="#SPI-通信" class="headerlink" title="SPI 通信"></a>SPI 通信</h1>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/posts/423abe9e.html"/>
      <url>/posts/423abe9e.html</url>
      
        <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p>以下内容中&lt;参数&gt;都表示输入参数，输入时不需要加&lt;&gt;</p><h2 id="本地仓库相关"><a href="#本地仓库相关" class="headerlink" title="本地仓库相关"></a>本地仓库相关</h2><h3 id="在某一文件夹内初始化git"><a href="#在某一文件夹内初始化git" class="headerlink" title="在某一文件夹内初始化git"></a><strong>在某一文件夹内初始化git</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="把工作区文件添加至暂存区"><a href="#把工作区文件添加至暂存区" class="headerlink" title="把工作区文件添加至暂存区"></a><strong>把工作区文件添加至暂存区</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名 或 通配符&gt;</span><br><span class="line">git add -u <span class="comment">#将已跟踪的文件提交至暂存区</span></span><br></pre></td></tr></table></figure><h3 id="把暂存区文件提交至本地仓库"><a href="#把暂存区文件提交至本地仓库" class="headerlink" title="把暂存区文件提交至本地仓库"></a><strong>把暂存区文件提交至本地仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;&lt;对本次提交的描述&gt;&quot;</span> <span class="comment">#从暂存区提交</span></span><br><span class="line">git commit -am <span class="string">&quot;&lt;对本次提交的描述&gt;&quot;</span> <span class="comment">#将已跟踪的文件提交至暂存区和仓库</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;&lt;对上次提交的描述修改&gt;&quot;</span> <span class="comment">#修改上次提交的描述，不加-m可进入vim编辑</span></span><br></pre></td></tr></table></figure><h3 id="查看当前仓库的状态（分支、文件、文件状态）"><a href="#查看当前仓库的状态（分支、文件、文件状态）" class="headerlink" title="查看当前仓库的状态（分支、文件、文件状态）"></a><strong>查看当前仓库的状态（分支、文件、文件状态）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a><strong>回退版本</strong></h3><p>  &lt;输入参数&gt;有：</p><ul><li>—soft  (保留工作区和暂存区仅回退版本)</li><li>—hard  （回退版本、工作区、暂存区）</li><li>—mixed   (回退功版本和暂存区，保留工作区)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;输入参数&gt;</span><br></pre></td></tr></table></figure><h3 id="查看差异"><a href="#查看差异" class="headerlink" title="查看差异"></a><strong>查看差异</strong></h3><p>  &lt;输入参数&gt;有：</p><ul><li>无： 工作区和暂存区的差异； 如果存在merge冲突，将在下面显示</li><li>HEAD：工作区和版本库的差异</li><li>— cache或—staged：暂存区和版本库的差异</li><li>&lt;版本1 id&gt; &lt;版本2 id&gt;：版本1和版本2之间的差异，这里可以用HEAD指代当前版本的id；HEAD~ 来指代上一个版本的id; HEAD~n 表示前n个版本的id；</li><li>&lt;分支名1&gt; &lt;分支名2&gt;：分支1和分支2间的差异</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;输入参数&gt;</span><br></pre></td></tr></table></figure><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a><strong>查看提交记录</strong></h3><p>  &lt;参数&gt;：</p><ul><li>—oneline， 这样只会显示哈希值的前几位。</li><li>—graph —oneline —decorate -all 查看分支图形式的提交记录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;参数&gt;</span><br></pre></td></tr></table></figure><h3 id="查看暂存区文件"><a href="#查看暂存区文件" class="headerlink" title="查看暂存区文件"></a><strong>查看暂存区文件</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;文件名&gt; <span class="comment">#等效于删除某一文件后git add</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;文件夹&gt; -r * <span class="comment">#递归删除某个文件夹以及内部所有文件和子文件夹</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;文件名&gt; <span class="comment"># 从暂存区删除，但保留在工作区</span></span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li><strong>branch 命令</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;分支名&gt; <span class="comment">#创建一个新的分支</span></span><br><span class="line">git branch <span class="comment">#查看当前的分支状态</span></span><br><span class="line">git branch -d &lt;分支名&gt; <span class="comment">#删除已经被合并的分支</span></span><br><span class="line">git branch -D &lt;分支名&gt; <span class="comment">#强制删除未被合并的分支</span></span><br><span class="line">git branch -vv <span class="comment">#查看本地分支时候和远程分支存在映射关系</span></span><br></pre></td></tr></table></figure><ul><li><strong>switch 命令（同checkout）</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;分支名&gt; <span class="comment">#切换到某分支</span></span><br><span class="line">git switch -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>merge命令</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;分支名&gt; <span class="comment">#把输入名字的分支合并到当前分支</span></span><br><span class="line">git merge --abort <span class="comment">#终止合并</span></span><br></pre></td></tr></table></figure><p>当合并冲突出现时，需要手动修改冲突内容，并使用git add + commit进行提交来合并分支</p><ul><li><strong>rebase命令</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;分支名&gt; <span class="comment">#将&lt;分支名&gt;上由共同祖先到当前HEAD的所有提交记录，移动到当前分支的分支树上（直接变基在当前分支HEAD的顶上）</span></span><br></pre></td></tr></table></figure><h2 id="远程仓库相关"><a href="#远程仓库相关" class="headerlink" title="远程仓库相关"></a>远程仓库相关</h2><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a><strong>克隆仓库</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h3 id="设置远程仓库"><a href="#设置远程仓库" class="headerlink" title="设置远程仓库"></a>设置远程仓库</h3><p>  &lt;输入参数&gt;：</p><ul><li>add &lt;仓库别名,通常origin&gt; &lt;仓库地址&gt;: 添加远程仓库</li><li>-v :查看本地仓库对应的远程仓库的别名和地址</li><li>rm &lt;仓库别名&gt;：删除远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote &lt;输入参数&gt;</span><br></pre></td></tr></table></figure><p>设置远程仓库和本地仓库的分支映射关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream &lt;本地分支&gt; &lt;远程仓库名&gt;/&lt;远程分支&gt; <span class="comment">#将本地分支映射到远程主机的远程分支</span></span><br><span class="line">git branch --set-upstream &lt;本地分支&gt; &lt;远程仓库名&gt; <span class="comment">#将本地分支映射到远程主机的同名分支</span></span><br></pre></td></tr></table></figure><h3 id="拉取仓库"><a href="#拉取仓库" class="headerlink" title="拉取仓库"></a>拉取仓库</h3><p><strong>pull</strong>  </p><p>&lt;输入参数&gt;：</p><ul><li><p>&lt;远程主机名&gt; &lt;远程分支&gt;:&lt;本地分支&gt;: 将远程主机上的远程分支取回，并与本地分支合并</p></li><li><p>&lt;远程主机名&gt; &lt;远程分支&gt;: 将远程主机上的远程分支取回，并与当前的本地分支合并</p><p><strong>如果当前分支已经被设置了和远程分支的映射关系，则不需要输入参数</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;输入参数&gt;</span><br></pre></td></tr></table></figure><p><strong>fetch</strong></p><p>所有使用pull命令拉取的分支都会自动和本地分支合并，fetch则是先存在本地，等待人工merge合并</p><p>&lt;输入参数&gt;：</p><ul><li>&lt;远程主机名&gt; &lt;远程分支&gt;:&lt;本地分支(一般新建tmp分支)&gt;: 将远程主机上的远程分支取回到本地工作区，不合并，需要主动$merge <tmp>$</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;输入参数&gt;</span><br></pre></td></tr></table></figure><h3 id="上传仓库"><a href="#上传仓库" class="headerlink" title="上传仓库"></a>上传仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程仓库名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; <span class="comment">#把本地分支推送至远程</span></span><br><span class="line"><span class="comment">#在本地分支和远程分支同名时或设置了映射关系时，可省略远程分支</span></span><br><span class="line">git push &lt;远程仓库名&gt; &lt;本地分支名&gt;</span><br><span class="line"><span class="comment">#推送当前分支时,可省略本地分支名</span></span><br><span class="line">git push &lt;远程仓库名&gt;</span><br><span class="line"><span class="comment">#在本地分支只和一个远程仓库有映射关系时，可省略远程仓库名</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">git push  &lt;远程仓库名&gt; --delete &lt;远程分支名&gt; <span class="comment">#删除远程仓库中的某一分支</span></span><br></pre></td></tr></table></figure><h1 id="git常用工作流"><a href="#git常用工作流" class="headerlink" title="git常用工作流"></a>git常用工作流</h1><h3 id="gitflow工作流模型"><a href="#gitflow工作流模型" class="headerlink" title="gitflow工作流模型"></a><strong>gitflow工作流模型</strong></h3><ul><li><p><strong>mian分支</strong>（核心分支）：项目的可靠分支，可直接部署进生产环境，不允许直接修改，只能通过merge合并</p><p>主分支的版本号命名规则：Major Version（主要功能或者重大版本更新）；Minor Version（新功能改进和更新，不会影响现有功能）；Patch Version（一些bug修复）</p></li><li><p>hotfix分支：bug的热修复分支，一般从主分支中分离出来，修复完成后合并至main分支和各个开发分支</p></li><li><p><strong>develop分支</strong>(核心分支)：开发分支，</p></li><li><p>feature分支：功能分支，用于开发新的功能的分支，新功能在稳定后会合并进开发分支。</p></li><li><p>release分支：发布前测试和验证的分支，由开发分支分离，当预发布分支稳定后，merge到主分支和开发分支并删除release分支。当预发布分支发现问题时，直接在预发布分支内进行修改。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 各种折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sx1280芯片手册</title>
      <link href="/posts/dead6220.html"/>
      <url>/posts/dead6220.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><h2 id="引脚定义"><a href="#引脚定义" class="headerlink" title="引脚定义"></a>引脚定义</h2><p>SX1280是一个工作在2.4GHz(ISM频段)的半双工收发器。芯片引脚定义如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Pin Number</th><th style="text-align:center">引脚名称</th><th style="text-align:center">I/O类型</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">VR_PA</td><td style="text-align:center">-</td><td style="text-align:center">功放的稳压供电</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">VDD_IN</td><td style="text-align:center">I</td><td style="text-align:center">设备稳压供电，连接到Pin12</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">NRESET</td><td style="text-align:center">I</td><td style="text-align:center">复位信号，低电平有效，内部上拉为50kΩ</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">XTA</td><td style="text-align:center">-</td><td style="text-align:center">参考振荡器或温补晶振输入</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">XTB</td><td style="text-align:center">-</td><td style="text-align:center">参考振荡器</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">BUSY</td><td style="text-align:center">O</td><td style="text-align:center">忙信号</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">DIO1</td><td style="text-align:center">I/O</td><td style="text-align:center">数字IO</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">DIO2</td><td style="text-align:center">I/O</td><td style="text-align:center">数字IO</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">DIO3</td><td style="text-align:center">I/O</td><td style="text-align:center">数字IO</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">VBAT_IO</td><td style="text-align:center">I</td><td style="text-align:center">数字IO供电（1.8V至3.7V）</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">DCC_FB</td><td style="text-align:center">O</td><td style="text-align:center">片内稳压输出</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">DCC_SW</td><td style="text-align:center">O</td><td style="text-align:center">DCDC开关电源输出</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">VBAT</td><td style="text-align:center">I</td><td style="text-align:center">RFIC的供电（1.8V至3.7V）</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">MISO_TX</td><td style="text-align:center">O</td><td style="text-align:center">SPI slave output_UART TX</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">MOSI_RX</td><td style="text-align:center">I</td><td style="text-align:center">SPI slave input_UART RX</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">SCK_RTSN</td><td style="text-align:center">I</td><td style="text-align:center">SPI 时钟_ UART请求发送（Request to Send）</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">NSS_CTSN</td><td style="text-align:center">I</td><td style="text-align:center">SPI 从机选择_UART 允许发发送（Clear to Send）</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">RFIO</td><td style="text-align:center">I/O</td><td style="text-align:center">射频发射/接收 IO</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">GND</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120041210550.png" alt="image-20240120041210550"></p><h2 id="SX1280的一些关键的参数"><a href="#SX1280的一些关键的参数" class="headerlink" title="SX1280的一些关键的参数"></a>SX1280的一些关键的参数</h2><ul><li>供电：1.8~3.7V</li><li>工作温度：-40~85 摄氏度</li><li>RF天线功率 ：最小输出-18dBm 最大输入12.5dBm</li><li>数字IO： 最大输入/输出电流 2.5mA</li></ul><h2 id="硬件模块结构"><a href="#硬件模块结构" class="headerlink" title="硬件模块结构"></a>硬件模块结构</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124162852697.png" alt="image-20240124162852697"></p><p>通过SPI或UART，发送对应的opcode+data的形式来控制这个模块。模块大致分为5个部分，模拟前端用于调制和发射频带信号，绿色的是数字调制部分，可产生不同调制的信号。Data Buffer用于存放接收的和待发送的数据。和 Protocol Engine用于硬件实现一些通信协议。</p><p>在供电方面，SX1280有两个独立的供电模组：DC-DC和LDO，默认情况下，仅开启LDO做为供电，但DCDC电源可在FS，RX，TX模式下启用，来承载更高的功耗。<strong>如果要想启用DCDC电源，则需要在12和14引脚之间接一个15uH的电感并将DCDC和LDO并联做为VDD。</strong>在DCDC被并入供电时，可在待机模式时切换启用和关闭DCDC供电。</p><h2 id="SX1280的几种工作模式"><a href="#SX1280的几种工作模式" class="headerlink" title="SX1280的几种工作模式"></a>SX1280的几种工作模式</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120013631945.png" alt="image-20240120013631945"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240208021648925.png" alt="image-20240208021648925"></p><h3 id="STDBY（待机）模式"><a href="#STDBY（待机）模式" class="headerlink" title="STDBY（待机）模式"></a>STDBY（待机）模式</h3><p>该模式有两种时钟源，分别是13M的RC振荡器和外部晶振XOSC，可以用命令 $SetStandby(oscillatorMode)$ 来进行切换。当选用XOSC作为时钟源时，自动切换为DCDC模块供电。也可使用如下命令手动设置供电：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetRegulatorType(regulatorType); <span class="comment">//该指令仅可在STDBY_RC模式使用</span></span><br></pre></td></tr></table></figure><h3 id="Frequency-Synthesis-FS-频率合成-模式"><a href="#Frequency-Synthesis-FS-频率合成-模式" class="headerlink" title="Frequency Synthesis (FS 频率合成)模式"></a>Frequency Synthesis (FS 频率合成)模式</h3><p>在FS模式下，模拟部分的PLL会按照设置的Tx开始震荡，当震荡稳定时，BUSY引脚就会变成低电平（标明设备已准备好接受指令）</p><p>在SX1280的设计中，RX和TX的频率是不同的，RX的频率等于Tx的频率（i.e., 锁相环产生的频率）减去中间频率(Intermediate Frequency IF)，IF默认是1.3MHz。</p><h3 id="Receice（接收）模式"><a href="#Receice（接收）模式" class="headerlink" title="Receice（接收）模式"></a>Receice（接收）模式</h3><p>在接收模式下除了FS模式启用的PLL外，片上LNA，相干器，和对应的解调器（LoRa/FSK/FLRC）都会开始工作。接受模式可设置为连续接收（continuous mode）和单次接收（single mode）。在连续接收模式下，模块会保持接收模式。在单次接收模式下，模块会在一次接收完成后返回STDBY模式。</p><p>接收模式通过官方驱动的SetRx函数来设置，其输入参数periodBase是指的时钟振荡周期，periodBaseCount是指的历经多少次时钟震荡算超时。当超时时，会从Receive mode 返回至 STDBY_RC mode。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetRx(periodBase, periodBaseCount); <span class="comment">//Opcode 0x83</span></span><br></pre></td></tr></table></figure><h3 id="Transmit（发送）模式"><a href="#Transmit（发送）模式" class="headerlink" title="Transmit（发送）模式"></a>Transmit（发送）模式</h3><p>发送模式会在信号放大器（PA）启动完成后，发送待发送的数据包。在发送完成后自动返回STDBY_RC模式</p><h3 id="Sleep（睡眠）模式"><a href="#Sleep（睡眠）模式" class="headerlink" title="Sleep（睡眠）模式"></a>Sleep（睡眠）模式</h3><p>睡眠模式下，只有睡眠控制器模块和可选的64KHz RC时钟工作。睡眠模式仅能从STDBY_RC模式下进入。</p><p>唤醒的方式有：</p><ul><li>NSS（Pin 19）变成低电平</li><li>RTC定时器产生计时结束事件</li></ul><p>SX1280在上电时，会自动校准其RC时钟，PLL和ADC，在校准期间BUSY信号会保持高电平，在校准完成后会进入STDBY_RC模式，并使BUSY信号变为低电平以表示准备好接收指令。</p><p>上电校准的结果会有寄存器存储，因此在休眠模式被唤醒时无需再次校准。</p><h1 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h1><p>Sx1280使用串口发送opcode的形式来控制模块，串口可使用UART或SPI，二者发送命令和支持的功能（如校验、流控）有些许差异。详细介绍如下。</p><h2 id="使用UART和模块建立连接"><a href="#使用UART和模块建立连接" class="headerlink" title="使用UART和模块建立连接"></a>使用UART和模块建立连接</h2><ul><li>波特率：该模块支持的波特率有921.6K，460.6K，115.2K，57.6K，38.4K，19.2K，9.6K。 <strong>在上电时，默认以115200工作，通过配置寄存器更改其他波特率</strong></li><li>停止位：模块支持1或2个停止位，通过寄存器配置，<strong>上电默认一个停止位</strong></li><li>仅支持8byte数据</li><li>模块支持奇偶校验、无校验</li><li>模块支持在Rx满，Tx空，奇偶校验错误或无停止位时，产生中断</li></ul><p><strong>使用UART和模块通信时，主机必须提供长度信息，模块一旦接受到所需长度的信息，就会开始处理任务，命令格式通常为：opcode+后续长度+后续参数</strong></p><p>举个例子，在UART执行写寄存器的操作时，必须发送操作码+要写的首地址+数据的长度+数据+….+数据n。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209004243157.png" alt="image-20240209004243157"></p><p>在使用UART进行读寄存器时，发送完操作码+要读的首地址+数据的长度后，主机RX线便会收到从机的数据内容。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209004849480.png" alt="image-20240209004849480"></p><p>在使用UART指令时，模块一收到opcode就会将busy线拉高，然后在接收后续长度指定的命令个数后，将BUSY线重新拉低进行命令处理。</p><h2 id="使用SPI和模块建立连接"><a href="#使用SPI和模块建立连接" class="headerlink" title="使用SPI和模块建立连接"></a>使用SPI和模块建立连接</h2><ul><li>NSS引脚变成低电平使能，高电平失能</li><li>MOSI 由主机在 SCK 下降沿时产生，并由从机在 SCK 上升沿时采样。 MISO 由 SCK 下降沿的从机产生。</li><li>通信时钟SCK最高频率为18MHz</li></ul><p><strong>使用SPI和模块通信时，无需提供命令长度，以NSS信号线被拉高来结束一次通信即可，即，命令格式为：opcode+后续参数</strong></p><p>举个例子，在SPI执行写寄存器时，只需发送操作码+要写的首地址+数据+…+数据n，相较于UART无需发送数据长度。由NSS信号被拉高来标明当前写操作结束。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209004451160.png" alt="image-20240209004451160"></p><p>在使用SPI执行读寄存器时，要发送操作码+要读的首地址+NOP（0x00），MISO线才开始传输数据。也就是说，UART内数据长度的位置需要用一个NOP来顶替，以此达到一个延时等待响应的目的。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240209004819079.png" alt="image-20240209004819079"></p><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="Data-Buffer"><a href="#Data-Buffer" class="headerlink" title="Data Buffer"></a>Data Buffer</h2><p>片上Data Buffer有256Byte，用于存放待发送数据或接收数据，其如何分配是可编程的。可使用官方提供的接口来指定TX和RX所用buffer的基地址。除睡眠模式外，任何工作模式均可访问该buffer。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240208020605152.png" alt="image-20240208020605152"></p><h3 id="接收数据对Data-Buffer的写入"><a href="#接收数据对Data-Buffer的写入" class="headerlink" title="接收数据对Data Buffer的写入"></a>接收数据对Data Buffer的写入</h3><p>接收数据时，数据由 rxBaseAddress （也就是图中蓝色区域，SetBufferBaseAddress()指向的地方）开始写入，向上生长。然后由 RxDataPointer 指向数据顶部地址。在一开始时，RxDataPointer = rxBaseAddress 。</p><h3 id="发送数据读取Data-Buffer的方式"><a href="#发送数据读取Data-Buffer的方式" class="headerlink" title="发送数据读取Data Buffer的方式"></a>发送数据读取Data Buffer的方式</h3><p>在切换到传输模式时，会先由setPacketParam() 中的 payLoadLength 参数指明待发送的数据长度，然后由数据指针 TxDataPointer 初始化为 TxBaseAddress 的地址，发送一个字节自增1，直到发送的字节等于payLoadLength为止。</p><h2 id="模拟信号收发前端"><a href="#模拟信号收发前端" class="headerlink" title="模拟信号收发前端"></a>模拟信号收发前端</h2><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><ul><li><p><strong>自动增益控制(Automatic Gain Control AGC)</strong></p><p>用于确保接收机增益被设定成最佳的值来接收信号。可以通过以下寄存器配置：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120010721928.png" alt="image-20240120010721928" style="zoom:67%;" /></p></li></ul><p>人工配置增益时，寄存器数值于增益对应关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120010828585.png" alt="image-20240120010828585"></p><ul><li><strong>低功耗模式和高感模式</strong></li></ul><p>收模式分为低功耗模式和高灵敏度模式，通过配置寄存器0x891的bit6:7来控制。设置为3(11)的时候，为灵敏度模式，设置为0(00)的时候为低功耗模式</p><h3 id="片上RC震荡器"><a href="#片上RC震荡器" class="headerlink" title="片上RC震荡器"></a>片上RC震荡器</h3><p>片上RC振荡器有64KHz和13MHz两个频率，64KHz的用于休眠模式时钟，13MHz用于SPI或UART通信</p><p>RC振荡器需要在上电或环境温度发生变化时进行校准。校准使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先配置需要校准的，选项如下:</span></span><br><span class="line"> calibParam.ADCBulkPEnable = <span class="number">1</span>;</span><br><span class="line"> calibParam.ADCBulkNEnable = <span class="number">1</span>;</span><br><span class="line"> calibParam.ADCPulseEnable = <span class="number">1</span>;</span><br><span class="line"> calibParam.PLLEnable = <span class="number">1</span>;</span><br><span class="line"> calibParam.RC13MEnable = <span class="number">1</span>;</span><br><span class="line"> calibParam.RC64KEnable = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//然后调用函数校准</span></span><br><span class="line">Radio.Calibrate(calibParam); <span class="comment">//opcode 0x89</span></span><br></pre></td></tr></table></figure><h1 id="指令操作码（OPcode）"><a href="#指令操作码（OPcode）" class="headerlink" title="指令操作码（OPcode）"></a>指令操作码（OPcode）</h1><p><em>在以下笔记中，所有NOP表示数据0x00，指令顺序中用+连接的是通过不同数据帧发送的不同byte，比如0x01+0x02是先发送0x01再发送0x02</em></p><h2 id="寄存器相关"><a href="#寄存器相关" class="headerlink" title="寄存器相关"></a>寄存器相关</h2><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">写寄存器数据</td><td style="text-align:center">0x18</td><td style="text-align:center">操作码+地址[15:8]+地址[7:0]+数据…+数据n</td><td style="text-align:center">操作码+地址[15:8]+地址[7:0]+长度+数据…+数据n</td></tr><tr><td style="text-align:center">读寄存器数据</td><td style="text-align:center">0x19</td><td style="text-align:center">操作码+地址[15:8]+地址[7:0]+NOP</td><td style="text-align:center">操作码+地址[15:8]+地址[7:0]+长度</td></tr></tbody></table></div><h2 id="数据缓冲区-Buffer-相关"><a href="#数据缓冲区-Buffer-相关" class="headerlink" title="数据缓冲区(Buffer)相关"></a>数据缓冲区(Buffer)相关</h2><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">写Buffer数据</td><td style="text-align:center">0x1A</td><td style="text-align:center">操作码+地址偏移+数据…+数据n</td><td style="text-align:center">操作码+地址偏移+长度+数据…+数据n</td></tr><tr><td style="text-align:center">读Buffer数据</td><td style="text-align:center">0x1B</td><td style="text-align:center">操作码+地址偏移+NOP</td><td style="text-align:center">操作码+地址偏移+长度</td></tr></tbody></table></div><h2 id="模式切换相关"><a href="#模式切换相关" class="headerlink" title="模式切换相关"></a>模式切换相关</h2><h3 id="睡眠模式"><a href="#睡眠模式" class="headerlink" title="睡眠模式"></a>睡眠模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetSleep</td><td style="text-align:center">0x84</td><td style="text-align:center">操作码+睡眠配置</td><td style="text-align:center">操作码+睡眠配置</td></tr></tbody></table></div><p>其中睡眠配置为1byte，但只有低二位有用，其余bit保持0。例如0x01,0x03等：</p><ul><li>第0位：如果该位被置1，那么在RAM中的部分数据会被存放进非易失存储器（称为 retention mode）。否则RAM数据被刷新。RAM主要用于存放模块初始化设置，被备份的数据如下：<ul><li>SetPacketType()</li><li>SetModulationParams()</li><li>SetRfFrequency()</li><li>SetDioIrqParams()</li><li>SetCadParams()</li></ul></li></ul><ul><li>第1位：如果该为被置1，那么Data buffer中的数据会被存放进非易失存储器。否则Data Buffer内数据被刷新。</li></ul><h3 id="待机模式"><a href="#待机模式" class="headerlink" title="待机模式"></a>待机模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetStandby</td><td style="text-align:center">0x80</td><td style="text-align:center">操作码+待机配置</td><td style="text-align:center">操作码+0x01+待机配置</td></tr></tbody></table></div><p>其中待机配置为1byte，但只有LSB有用，其余bit保持0，也就是只有0x00和0x01两种：</p><ul><li>0x00：STDBY_RC模式，使用13MHz RC振荡器做为时钟源</li><li>0x01：STDBY_XOSC模式，使用外部晶振做为时钟源</li></ul><h3 id="频率合成模式（FS-mode）"><a href="#频率合成模式（FS-mode）" class="headerlink" title="频率合成模式（FS mode）"></a>频率合成模式（FS mode）</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetFs</td><td style="text-align:center">0xC1</td><td style="text-align:center">操作码</td><td style="text-align:center">操作码</td></tr></tbody></table></div><h3 id="发送模式"><a href="#发送模式" class="headerlink" title="发送模式"></a>发送模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th></tr></thead><tbody><tr><td style="text-align:center">SetTx</td><td style="text-align:center">0x83</td></tr><tr><td style="text-align:center"><strong>SPI模式指令顺序</strong></td><td style="text-align:center"><strong>UART模式指令顺序</strong></td></tr><tr><td style="text-align:center">操作码+periodBase+periodBaseCount[15:8]+periodBaseCount[7:0]</td><td style="text-align:center">操作码+0x03(后续长度)+periodBase+periodBaseCount[15:8]+periodBaseCount[7:0]</td></tr></tbody></table></div><p><em>note：在设置为发送模式前，需要先清除IRQ status</em></p><p><strong>Single Mode Tx</strong>： 如果periodBase和PeriodBaseCount都设置为0x00，即，传输指令0x83+0x00+0x00（SPI模式下），那么模块将工作在单次发模式（Single Mode Tx）。在该模式下，不会有超时限制，会在发送一个包之后结束Tx模式。</p><p><strong>发送模式的流程</strong>： 1. 打开PLL     2. 打开PA（功率放大器）     3. PA根据SetTxParam函数设置的模式，进行上升     4. 待PA上升完成，数据开始分包传输 5.传输完成后，关闭PA，关闭PLL，收发器返回STDBY_RC模式，并产生中断“IRQ TxDone”     6.若传输超时，则中断传输，返回STDBY_RC模式，并产生中断“TIMEOUT IRQ”。</p><p><strong>periodBase参数：</strong> 这个参数影响RTC时钟一步的计时时长，表如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">periodBase</th><th style="text-align:center">Time-Out step</th></tr></thead><tbody><tr><td style="text-align:center">0x00</td><td style="text-align:center">15.625us</td></tr><tr><td style="text-align:center">0x01</td><td style="text-align:center">62.5us</td></tr><tr><td style="text-align:center">0x02</td><td style="text-align:center">1ms</td></tr><tr><td style="text-align:center">0x03</td><td style="text-align:center">4ms</td></tr></tbody></table></div><p><strong>PeriodBaseCount参数</strong>：该参数有16位，用于指明在计数多少个周期后超时。计算公式如下：</p><script type="math/tex; mode=display">Time-out\ duration = periodBase\times periodBaseCount</script><p>如果该为被设置为0x00，那么直到单个包发送完成之前，都不会退出Tx模式，无超时限制。当单个包发送完之后返回STDBY_RC模式。</p><h3 id="接收模式"><a href="#接收模式" class="headerlink" title="接收模式"></a>接收模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th></tr></thead><tbody><tr><td style="text-align:center">SetRx</td><td style="text-align:center">0x82</td></tr><tr><td style="text-align:center"><strong>SPI模式指令顺序</strong></td><td style="text-align:center"><strong>UART模式指令顺序</strong></td></tr><tr><td style="text-align:center">操作码+periodBase+periodBaseCount[15:8]+periodBaseCount[7:0]</td><td style="text-align:center">操作码+0x03(后续长度)+periodBase+PeriodBaseCount[15:8]+PeriodBaseCount[7:0]</td></tr></tbody></table></div><p><em>note：在设置为发送模式前，需要先清除IRQ status</em></p><p>接收模式的参数意义同发送模式，但它可以设置单次接收模式，连续接收模式，超时模式三种，表如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">periodBaseCount</th><th style="text-align:center">超时时间</th></tr></thead><tbody><tr><td style="text-align:center">0x0000</td><td style="text-align:center">单次接收模式，没有超时时间，但在完成一个包的接收之后返回STDBY_RC模式</td></tr><tr><td style="text-align:center">0xFFFF</td><td style="text-align:center">连续接收模式，设备一直保持接收模式，直到主机发送改变模式的命令。每次接收到数据包时，都会向主机发送已接收新的数据包的指示。</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center">超时时间=超时基周期*超时计数数量</td></tr></tbody></table></div><p><em>举个例子，保持一秒接收模式：0x82+0x03+0x00+0xFA</em></p><h2 id="特殊模式"><a href="#特殊模式" class="headerlink" title="特殊模式"></a>特殊模式</h2><h3 id="嗅探模式"><a href="#嗅探模式" class="headerlink" title="嗅探模式"></a>嗅探模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th></tr></thead><tbody><tr><td style="text-align:center">SetRxDutyCycle</td><td style="text-align:center">0x94</td></tr><tr><td style="text-align:center"><strong>SPI模式指令顺序</strong></td><td style="text-align:center"><strong>UART模式指令顺序</strong></td></tr><tr><td style="text-align:center">操作码+periodBase+periodBaseCount[15:8]+periodBaseCount[7:0]+<br>sleepPeriodBaseCount[15:8]+sleepPeriodBaseCount[7:0]</td><td style="text-align:center">操作码后面+0x05（后续长度）</td></tr></tbody></table></div><p>在嗅探模式（sniff mode）下，模块会周期性地寻找新的包。<strong>在此模式下，用于preamble必须被设置为long preamble mode。因此使用这个指令之前必须使用SetLongPreamble设置preamble模式。</strong></p><p>该模式下periodBase同Tx模式中的表。</p><p><strong>periodBaseCount</strong>：该位用于指明模块唤醒，查询新包的时间</p><p><strong>sleepPeriodBaseCount</strong>：用于指明模块休眠的时间</p><ol><li>模块会进入接收模式，寻找新的包，寻找的时间由periodBaseCount决定。</li><li>如果接收模式的窗口期内没有嗅探到preamble，模块会进入睡眠模式（设置会被保存）。睡眠时间由sleepPeriodBaseCount定义。</li><li>在睡眠时间结束后，模块会将设置重新存会RAM，并返回接收模式，重新嗅探包。</li><li>当如下事件发生时，嗅探模式会被停止：<ul><li>在Rx模式窗口期间，接受到了数据包，在接收完成后会产生”RxDone”中断，并返回STDBY_RC模式</li><li>在Rx模式窗口期间，收到了来自主机的SetStandby()命令。<em>注意：在sleep模式下无法接收命令</em></li></ul></li></ol><p><strong>如果periodBaseCount被设置为0x0000，那么又会进入单次接收模式，没有超时限制，模块会保持接收模式直到收到新的数据包，然后返回STDBY_RC模式。设置为其他数据时，periodBaseCount才能用于指定接收的窗口期长度</strong></p><h3 id="信道活动检测模式（Channel-Activity-Detection-CAD）"><a href="#信道活动检测模式（Channel-Activity-Detection-CAD）" class="headerlink" title="信道活动检测模式（Channel Activity Detection CAD）"></a>信道活动检测模式（Channel Activity Detection CAD）</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetCAD</td><td style="text-align:center">0xC5</td><td style="text-align:center">操作码</td><td style="text-align:center">操作码</td></tr></tbody></table></div><p><strong>该模式仅能在LoRa调制下使用</strong>。该模式下，模块会寻找LoRa的信号，寻找的Preamble长度由SetCadParams()操作来设置。在寻找结束后，模块会返回STDBY_RC模式。在寻找结束时，设备会产生“CadDone”中断，如果有效的信号被找到了，还会产生“CadDetected”中断</p><p><em>这个模式在需要先收后发的应用中非常实用</em></p><p>参数设置命令SetCadParams()</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetCadParams</td><td style="text-align:center">0x88</td><td style="text-align:center">操作码+cadSymbolNum</td><td style="text-align:center">操作码+0x01+cadSymbolNum</td></tr></tbody></table></div><p>其中，cadSymbolNum用于指明触发CAD的符号数（变相决定了寻找时长），定义如下</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215160705990.png" alt="image-20240215160705990"></p><p><strong><em>注意：用于CAD的符号数设置为1和2时，错误检测风险较高</em></strong></p><h2 id="基本设置相关"><a href="#基本设置相关" class="headerlink" title="基本设置相关"></a>基本设置相关</h2><h3 id="长Preamble模式"><a href="#长Preamble模式" class="headerlink" title="长Preamble模式"></a>长Preamble模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetLongPreamble</td><td style="text-align:center">0x98</td><td style="text-align:center">操作码+enable（0x01）</td><td style="text-align:center">-</td></tr></tbody></table></div><p><strong>该指令只能在LoRa模式或GFSK模式使用</strong>。这个指令对LoRa的影响是：会修改嗅探模式SetRxDutyCycle的行为，如果有preamble被侦测到，那么RX模式的时间会被拓展为 $sleepPeriod+2*RxPeriod$</p><h3 id="自动应答"><a href="#自动应答" class="headerlink" title="自动应答"></a>自动应答</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetAutoTx</td><td style="text-align:center">0x98</td><td style="text-align:center">操作码+time[15:8]+time[7:0]</td><td style="text-align:center">操作码+0x02+time[15:8]+time[7:0]</td></tr></tbody></table></div><p>部分通信协议要求在收到数据包后发送一个应答包，例如BLE要求在收到数据包后150us发送回应。这个命令就是用来设置自动回应用的。回应延时由time参数控制，由于从RX模式切换到TX模式需要时间，因此需要一个Offset来修正，通常$offset\approx 33us$。延时计算公式如下</p><script type="math/tex; mode=display">Tx_{Delay}=time+offset</script><p>time就是输入的time参数，该参数以毫秒为单位。time参数传递0x0001就是1us。</p><p>只要这个命令被发送了，那么每当设备进入Rx模式并收到了数据包后，就会自动切入Tx模式，在延时$Tx_{Delay}$后发送一个应答包，然后回到普通模式（例如STDBY_RC模式）。</p><p><em>note:user must issue the command SetAutoTx with 0x00 as the time argument</em></p><h3 id="传输完成后返回FS模式"><a href="#传输完成后返回FS模式" class="headerlink" title="传输完成后返回FS模式"></a>传输完成后返回FS模式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetAutoFS</td><td style="text-align:center">0x9E</td><td style="text-align:center">操作码+enable（0x01）</td><td style="text-align:center">操作码+0x01+enable（0x01）</td></tr></tbody></table></div><p>默认情况下，Rx和Tx模式结束后都会返回STDBY_RC模式，如果使用了此命令，那么则是返回至FS模式。这样可以减少切换至Rx或Tx模式的时间。</p><p>enbale用于控制该功能是否启用，0x01表示使能，0x00表示失能。</p><h3 id="包格式选择"><a href="#包格式选择" class="headerlink" title="包格式选择"></a>包格式选择</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetPacketType</td><td style="text-align:center">0x8A</td><td style="text-align:center">操作码+PacketType</td><td style="text-align:center">操作码+0x01+PacketType</td></tr></tbody></table></div><p>PacketType参数用于指定调制包格式，定义如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240211172403669.png" alt="image-20240211172403669"></p><p><em>例如：选择LoRa包格式，发送指令为0x8A+0x01</em></p><h3 id="设置包参数"><a href="#设置包参数" class="headerlink" title="设置包参数"></a>设置包参数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetPacketParams</td><td style="text-align:center">0x8C</td><td style="text-align:center">操作码+param1…param7</td><td style="text-align:center">操作码+0x07+param1…param7</td></tr></tbody></table></div><p> 对于7个parameter，其作用如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215162800145.png" alt="image-20240215162800145"></p><p>在LoRa模式下，几个参数详细定义如下</p><p><strong>PreambleLength</strong>（参数1）</p><p>改Byte由两部分组成，LORA_PBLE_LEN_MANT[3:0] 和 LORA_PBLE_LEN_EXP[7:4]。mant表示尾数，exp表示指数，MANT占低四位，EXP占高四位，它们各自的范围都在[1,15]之间（注意不可为0）。preamble的长度和这两个参数的关系如下：</p><script type="math/tex; mode=display">preamble\ length=LORA\_PBLE\_LEN\_MANT*2^{LORA\_PBLE\_LEN\_EXP}</script><p>推荐的preamble长度是12 symbols，也就是将MANT设置为6，EXP设置为1，即可得到该值。</p><p><strong>HeaderType</strong>（参数2）</p><p>Header用于指明LoRa包中是否包含Header，详见LoRa包格式章节。</p><div class="table-container"><table><thead><tr><th style="text-align:center">宏定义关键词</th><th style="text-align:center">值</th><th style="text-align:center">Header模式</th></tr></thead><tbody><tr><td style="text-align:center">EXPLICIT_HEADER</td><td style="text-align:center">0x00</td><td style="text-align:center">EXPLICIT HEADER</td></tr><tr><td style="text-align:center">IMPLICIT_HEADER</td><td style="text-align:center">0x80</td><td style="text-align:center">IMPLICIT HEADER</td></tr></tbody></table></div><p><strong>PayloadLength</strong>（参数3）</p><p>该参数值的范围在 [1,255] 之间。用于指明载荷数据的长度。</p><p><strong>CRC</strong>（参数4）</p><p>该参数用于控制CRC使能与否</p><div class="table-container"><table><thead><tr><th style="text-align:center">宏定义关键词</th><th style="text-align:center">值</th><th style="text-align:center">CRC使能情况</th></tr></thead><tbody><tr><td style="text-align:center">LORA_CRC_ENABLE</td><td style="text-align:center">0x20</td><td style="text-align:center">CRC ENABLE</td></tr><tr><td style="text-align:center">LORA_CRC_DISABLE</td><td style="text-align:center">0x00</td><td style="text-align:center">CRC DISABLE</td></tr></tbody></table></div><h3 id="设置调制参数"><a href="#设置调制参数" class="headerlink" title="设置调制参数"></a>设置调制参数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetModulationParams</td><td style="text-align:center">0x8B</td><td style="text-align:center">操作码+param[0]+param[1]+param[2]</td><td style="text-align:center">操作码+0x03+param[0]+param[1]+param[2]</td></tr></tbody></table></div><p>该指令的param参数在不同包格式下有不同意义，此处只介绍LoRa包格式下</p><ul><li>param[0]：扩展因子SF，值，宏定义和SF间关系如下表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">宏定义</th><th style="text-align:center">值</th><th style="text-align:center">SF</th></tr></thead><tbody><tr><td style="text-align:center">LORA_SF_5</td><td style="text-align:center">0x50</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">LORA_SF_6</td><td style="text-align:center">0x60</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">LORA_SF_7</td><td style="text-align:center">0x70</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">LORA_SF_8</td><td style="text-align:center">0x80</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">LORA_SF_9</td><td style="text-align:center">0x90</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">LORA_SF_10</td><td style="text-align:center">0xA0</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">LORA_SF_11</td><td style="text-align:center">0xB0</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">LORA_SF_12</td><td style="text-align:center">0xC0</td><td style="text-align:center">12</td></tr></tbody></table></div><ul><li>param[1]：带宽BW，值，宏定义和SF间关系如下表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">宏定义</th><th style="text-align:center">值</th><th style="text-align:center">BW (KHz)</th></tr></thead><tbody><tr><td style="text-align:center">LORA_BW_1600</td><td style="text-align:center">0x0A</td><td style="text-align:center">1625.0</td></tr><tr><td style="text-align:center">LORA_BW_800</td><td style="text-align:center">0x18</td><td style="text-align:center">812.5</td></tr><tr><td style="text-align:center">LORA_BW_400</td><td style="text-align:center">0x26</td><td style="text-align:center">406.25</td></tr><tr><td style="text-align:center">LORA_BW_200</td><td style="text-align:center">0x34</td><td style="text-align:center">203.125</td></tr></tbody></table></div><ul><li>param[2]：前向纠错编码率CR，CR，值，宏定义和SF间关系如下表<br>|     宏定义     |  值  | 编码率 |<br>| :——————: | :—: | :——: |<br>|  LORA_CR_4_5   | 0x01 |  4/5   |<br>|  LORA_CR_4_6   | 0x02 |  4/6   |<br>|  LORA_CR_4_7   | 0x03 |  4/7   |<br>|  LORA_CR_4_8   | 0x04 |  4/8   |<br>| LORA_CR_Li_4_5 | 0x05 |  4/5<em>  |<br>| LORA_CR_Li_4_6 | 0x06 |  4/6</em>  |<br>| LORA_CR_Li_4_7 | 0x07 |  4/8*  |</li></ul><p>上表中 * 代表长交织。</p><ul><li>以上参数详见 <em>LoRa基础</em> 篇</li></ul><h3 id="设置RF频率模式频率"><a href="#设置RF频率模式频率" class="headerlink" title="设置RF频率模式频率"></a>设置RF频率模式频率</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetRfFrequency</td><td style="text-align:center">0x86</td><td style="text-align:center">操作码+频率[23:16]+频率[15:8]+频率[7:0]</td><td style="text-align:center">操作码+0x03+频率[23:16]+频率[15:8]+频率[7:0]</td></tr></tbody></table></div><p>其中，频率(rfFrequency)参数与发射频率间公式如下：</p><script type="math/tex; mode=display">F_{RF}=\frac{F_{XOSC}}{2^{18}}*rfFrequency</script><p><em>例如：通过SPI发送0x86+0xB8+0x9D+0x89，即可设置rfFrequency=12098953（D），在外部晶振52MHz的情况下，$F_{RF}=2399999832Hz$，即，2.4GHz</em></p><h3 id="设置发送功率"><a href="#设置发送功率" class="headerlink" title="设置发送功率"></a>设置发送功率</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetTxParams</td><td style="text-align:center">0x8E</td><td style="text-align:center">操作码+power+rampTime</td><td style="text-align:center">操作码+0x02+power+rampTime</td></tr></tbody></table></div><p>power参数用于控制发射功率，SX1280支持的<strong>功率范围在-18~13dBm</strong>，其与power参数的关系公式如下</p><script type="math/tex; mode=display">P_{RF}=-18+power</script><p>也就是说，<strong>power参数的范围在[0,31]区间内。</strong></p><p>rampTime参数用于控制运放（PA）的上升时间，官方驱动中的宏定义、参数和时间对应表如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215142108205.png" alt="image-20240215142108205"></p><h3 id="设置数据缓冲区-buffer-基地址"><a href="#设置数据缓冲区-buffer-基地址" class="headerlink" title="设置数据缓冲区(buffer)基地址"></a>设置数据缓冲区(buffer)基地址</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetBufferBaseAddress</td><td style="text-align:center">0x8F</td><td style="text-align:center">操作码+txBaseAdress+rxBaseAdress</td><td style="text-align:center">操作码+0x02+txBaseAdress+rxBaseAdress</td></tr></tbody></table></div><p>数据缓冲区rx和tx共享256字节空间，地址从0x00到0xFF之间。详见硬件-Data buffer</p><h3 id="选择供电"><a href="#选择供电" class="headerlink" title="选择供电"></a>选择供电</h3><p>如果在DC-DC外接电感条件满足的情况下，可以使用该命令切换供电模式。</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetRegulatorMode</td><td style="text-align:center">0x96</td><td style="text-align:center">操作码+regModeParam</td><td style="text-align:center">操作码+0x01+regModeParam</td></tr></tbody></table></div><p>其中regModeParam有：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120040942451.png" alt="image-20240120040942451"></li></ul><h3 id="设置UART速率"><a href="#设置UART速率" class="headerlink" title="设置UART速率"></a>设置UART速率</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetUartSpeed</td><td style="text-align:center">0x9D</td><td style="text-align:center">不可用，仅UART能使用</td><td style="text-align:center">操作码+0x02+UartDividerRatio</td></tr></tbody></table></div><p>其中，UartDibiderRatio是一个4byte数字，它与波特率的关系是：</p><script type="math/tex; mode=display">UartDibiderRatio=(Baud\ Rate\times2^{20})/f_{CLK}</script><p>其典型值如下：</p><p><img src="C:\Users\17997\AppData\Roaming\Typora\typora-user-images\image-20240415151802336.png" alt="image-20240415151802336"></p><h3 id="设置测距角色"><a href="#设置测距角色" class="headerlink" title="设置测距角色"></a>设置测距角色</h3><p>该命令用于测距的主从角色设置</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetRangingRole</td><td style="text-align:center">0xA3</td><td style="text-align:center">操作码+Role</td><td style="text-align:center">操作码+0x01+Role</td></tr></tbody></table></div><p>其中Role：</p><ul><li>0x00：从机（slave）</li><li>0x01：主机（master）</li></ul><h3 id="是否启用高级测距-AdvancedRanging"><a href="#是否启用高级测距-AdvancedRanging" class="headerlink" title="是否启用高级测距(AdvancedRanging)"></a>是否启用高级测距(AdvancedRanging)</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetAdvancedRanging</td><td style="text-align:center">0x9A</td><td style="text-align:center">操作码+Enable</td><td style="text-align:center">操作码+0x01+Enable</td></tr></tbody></table></div><p>其中，0x00表示disable，0x01表示enable。</p><h2 id="获取设备工作状态"><a href="#获取设备工作状态" class="headerlink" title="获取设备工作状态"></a>获取设备工作状态</h2><h3 id="获取设备状态"><a href="#获取设备状态" class="headerlink" title="获取设备状态"></a>获取设备状态</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">GetStatus</td><td style="text-align:center">0xC0</td><td style="text-align:center">操作码</td><td style="text-align:center">操作码</td></tr></tbody></table></div><p>该命令用于检索收发器的状态，任意模式（STDBY，RX，TX）都可以执行该命令。模块会在收到该操作码后返回1byte的设备状态码，状态码定义如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240216151615876.png" alt="image-20240216151615876"></p><h3 id="获取当前包格式"><a href="#获取当前包格式" class="headerlink" title="获取当前包格式"></a>获取当前包格式</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">GetPacketType</td><td style="text-align:center">0x03</td><td style="text-align:center">操作码+NOP+NOP</td><td style="text-align:center">操作码+0x01</td></tr></tbody></table></div><p>模块会在SPI命令的第二个NOP时，向主机发送当前包格式数据。UART通信下，在0x01发送完之后的空隙位返回包格式。</p><p>包格式如下</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240211172403669.png" alt="image-20240211172403669"></p><h3 id="获取Rx缓冲区状态"><a href="#获取Rx缓冲区状态" class="headerlink" title="获取Rx缓冲区状态"></a>获取Rx缓冲区状态</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">GetRxBufferStatus</td><td style="text-align:center">0x17</td><td style="text-align:center">操作码+NOP+NOP+NOP</td><td style="text-align:center">操作码+0x02</td></tr></tbody></table></div><p>该命令会先后返回最后收到的数据包的长度（rxPayloadLength）和Rx缓冲区的基地址（rxStartBufferPointer）。在发送操作码后，SPI命令间隔一个NOP后开始接收，先接收rxPayloadLength，再接收rxStartBufferPointer。UART命令在发送0x02后开始接收。</p><p><em>注意：当采用LoRa包格式，且设置为Implicit Header（Fixed-length）模式的时候，rxPayloadLength参数会始终返回0x00。因为在这个模式中不存在Header，因此无法提取Payload长度。在这种模式下，要得知Payload长度，直接通过寄存器操作命令，读取预先设置的寄存器即可。</em></p><h3 id="获取当前包状态"><a href="#获取当前包状态" class="headerlink" title="获取当前包状态"></a>获取当前包状态</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">GetPacketStatus</td><td style="text-align:center">0x1D</td><td style="text-align:center">操作码+NOP+NOP+NOP+NOP+NOP+NOP(6个 NOP)</td><td style="text-align:center">操作码+0x05</td></tr></tbody></table></div><p>使用此命令可以检索有关上次接收的数据包的信息，命令会在SPI模式的第一个NOP后，UART模式的长度码后，开始返回信息。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215164517698.png" alt="image-20240215164517698"></p><p>信息总共有5位。不同包格式返回的信息意义不同，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215164255603.png" alt="image-20240215164255603"></p><p>对于LoRa包模式下，参数意义如下</p><ul><li>rssiSync：:Received Signal Strength Indicator，信号强度。一旦检测到同步地址，就会锁存rssiSync值，根据rssiSync可算出真实信号功率：$P=-(rssiSync)/2(dBm)$</li><li>snrPkt：信噪比，该值由最后一个数据包估计得出。实际SNR和该值换算关系是$SNR=snrPkt/4 (dB)$。如果SNR&lt;=0，那么RSSI值需要修正为：$RSSI_\{packet, real\} = RSSI_\{packet,measured\} – SNR_\{measured\}$</li></ul><h3 id="获取当前瞬时-RSSI-值"><a href="#获取当前瞬时-RSSI-值" class="headerlink" title="获取当前瞬时 RSSI 值"></a>获取当前瞬时 RSSI 值</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">Getressiinst</td><td style="text-align:center">0x1F</td><td style="text-align:center">操作码+NOP+NOP</td><td style="text-align:center">操作码+0x01</td></tr></tbody></table></div><p>该指令会在SPI模式第二个NOP，UART指令发送完0x01后，返回参数rssiInst参数（8位），用于指明当前包的RSSI强度，参数值与强度对应关系如下：</p><script type="math/tex; mode=display">Signal Power=(-rssiInst)/2(dBm)</script><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>SX1280有16个中断源，每一个都可以单独启用或是屏蔽，每一个也都可以被映射至DIO1,DIO2,DIO3。中断寄存器和中断源如下表：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215170132747.png" alt="image-20240215170132747"></p><h3 id="设置DIO和中断映射、中断使能"><a href="#设置DIO和中断映射、中断使能" class="headerlink" title="设置DIO和中断映射、中断使能"></a>设置DIO和中断映射、中断使能</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th></tr></thead><tbody><tr><td style="text-align:center">SetDioIrqParams</td><td style="text-align:center">0x8D</td></tr></tbody></table></div><p>SPI指令顺序：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215170643786.png" alt="image-20240215170643786"></p><p>UART指令顺序</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240215170703777.png" alt="image-20240215170703777"></p><p><strong>irqMask参数</strong></p><p>​    该参数用于使能中断，1表示使能，0表示失能。参考上方中断寄存器和中断源表，其左边的bit对应的就是该参数。例如，要使能TxDone中断，就需要把irqMask的bit0设置为1，此时，产生中断时，IRQ Register中对应的 TxDone 才会被置1。</p><p><strong>dioMask参数</strong></p><p>​    该参数用于标明链接哪些中断到DIO引脚上。例如，如果想要TxDone中断产生时，DIO1引脚也被置1，就需要置位irqMask bit0 来使能中断，然后置位dio1Mask bit0 来链接该中断至DIO1。任意中断都可被映射至所有DIO，对于某一个DIO，当映射至该脚位的所有中断标志都为0的时候，IO输出0，否则输出1（或运算的逻辑）。</p><h3 id="获取中断状态"><a href="#获取中断状态" class="headerlink" title="获取中断状态"></a>获取中断状态</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">GetIrqStatus</td><td style="text-align:center">0x15</td><td style="text-align:center">操作码+NOP+NOP+NOP</td><td style="text-align:center">操作码+0x02</td></tr></tbody></table></div><p>该指令会在SPI模式第二个NOP，UART指令发送完0x02后，先后返回irqStatus[15:8]和irqStatus[7:0]。这是16位IRQ寄存器中的值的状态，对应本小节中最开始的寄存器表。</p><h3 id="清除中断标志"><a href="#清除中断标志" class="headerlink" title="清除中断标志"></a>清除中断标志</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">ClearIrqStatus</td><td style="text-align:center">0x97</td><td style="text-align:center">操作码+IRQMASK[15:8]+IRQMASK[7:0]</td><td style="text-align:center">操作码+0x02+IRQMASK[15:8]+IRQMASK[7:0]</td></tr></tbody></table></div><p>将需要清除的中断在对应的IRQMASK位中置1，即可清除中断。例如，如果IRQMASK的位0置1，则IRQ寄存器中的位0处的IRQ标志清0。</p><h2 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h2><h3 id="发送连续波"><a href="#发送连续波" class="headerlink" title="发送连续波"></a>发送连续波</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetTxContinuousWave</td><td style="text-align:center">0xD1</td><td style="text-align:center">操作码</td><td style="text-align:center">操作码</td></tr></tbody></table></div><p>该命令会使模块以设置的频率和功率发送连续的波。直到主机发送切换模式的命令之前，设备都会保持在发送连续波的模式中。这个命令对除了FLRC之外的所有包格式都适用。</p><h3 id="发送连续Preamble"><a href="#发送连续Preamble" class="headerlink" title="发送连续Preamble"></a>发送连续Preamble</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">操作码</th><th style="text-align:center">SPI模式指令顺序</th><th style="text-align:center">UART模式指令顺序</th></tr></thead><tbody><tr><td style="text-align:center">SetTxContinuousPreamble</td><td style="text-align:center">0xD2</td><td style="text-align:center">操作码</td><td style="text-align:center">操作码</td></tr></tbody></table></div><p>在GFSK包格式下，这个命令会使得天线发送交变的”0”和“1”。在LoRa模式下，这个命令会发送“0” （也就是LoRa的Preamble）。在主机发送更改模式的命令之前都会保持发送。</p><h1 id="驱动LoRa的步骤"><a href="#驱动LoRa的步骤" class="headerlink" title="驱动LoRa的步骤"></a>驱动LoRa的步骤</h1><h2 id="初始化设备"><a href="#初始化设备" class="headerlink" title="初始化设备"></a>初始化设备</h2><ol><li>SX1280在上电复位时，会默认进入STDBY_RC模式，如果不处于该模式，必须使用 <code>SetStandby</code> 附加 0x00 参数，使其切换至STDBY_RC模式；UART指令为0x80+0x01+0x00；</li><li>使用 <code>SetPacketType</code>附加LoRa包格式的参数（0x01），选择为LoRa数据包格式；UART指令顺序为0x8A+0x01+0x01；</li><li>设置RF的频率，通常设置为2.4G即可，其他值可参照操作码中 SetRfFrequency 章节；UART指令为：0x86+0x03+0xB8+0x9D+0x89，SPI下命令组合为：0x86+0xB8+0x9D+0x89</li><li>通过 <code>SetBufferBaseAddress</code> 指定数据buffer内rx和tx的基地址通过 <code>SetModulationParams</code> 设置LoRa的SF，BW 和 CR</li><li>通过 <code>SetPacketParams</code> 选择LoRa需要使用的Preamble长度（推荐12个符号），Header类型，数据长度，CRC类型，是否反转IQ</li><li>通过 <code>SetTxParam</code> 设置发信输出功率和ramp time</li><li>通过 <code>SetDioIrqParams</code> 使能和映射相应中断</li></ol><h2 id="发送信息"><a href="#发送信息" class="headerlink" title="发送信息"></a>发送信息</h2><ol><li>通过 <code>WriteBuffer(offset, *数据)</code> <em>(官方驱动API)</em> 将数据写入 Data Buffer，offset 的值通常设为 txBaseAddress 即可</li><li>通过 <code>SetTx</code>发送数据，直到 TxDone 或是 RxTxTimeout 中断产生，代表发送结束</li><li>清除中断</li></ol><h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><ol><li>通过 SetRx 将设备置于接收模式，等待 RxDone 或 RxTxTimeout</li><li>通过 ClrIrqStatus 清除中断</li><li>通过 GetRxBufferStatus 取得 PayloadLengthRx 和 rxStartBufferPointer</li><li>使用 ReadBuffer(offset, PayloadLengthRx) 来读取接受的buffer数据，其中offset = rxStartBufferPointer</li></ol><h2 id="测距"><a href="#测距" class="headerlink" title="测距"></a>测距</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>在测距中，LoRa模块通过地址码来寻找测距对象。因此测距从机需要设置一个自己的地址码。通过<code>WriteRegister</code>函数（操作码0x18），对以下地址进行写入，来设置做为从机的地址。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240415142233755.png" alt="image-20240415142233755"></p><p>同时，从机通过设置0x931寄存器的7:6位来选择使能的地址长度</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240415144759048.png" alt="image-20240415144759048"></p><p>同时，在<em>LoRa通信包和测距-测距引擎</em>一节中，提到需要对RX和TX消耗的时间进行补偿，以及对特定SF，BW，RF下的延迟进行补偿。这个补偿写入在下列寄存器内</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240415145736387.png" alt="image-20240415145736387"></p><h3 id="驱动步骤"><a href="#驱动步骤" class="headerlink" title="驱动步骤"></a>驱动步骤</h3><ol><li><p>首先确保设备在STDBY_RC模式</p></li><li><p>使用<code>SetPacketType</code>，将模块包格式设置为<code>PACKET_TYPE_RANGING</code>(0x02)</p></li><li><p>使用<code>SetModulationParams</code>讲主机与从机设置在同样的SF、BW和CR下。<strong>注意：测距不允许使用SF11和SF12，且带宽只能是406.25KHz / 812.5KHz / 1625KHz</strong></p></li><li><p>在如下寄存器地址中写入要测距的从机的地址<br> <img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240415144842613.png" alt="image-20240415144842613"></p></li><li><p>主机使能中断：<code>RangingMasterRestltValid</code>和<code>RangingMasterResultTimeout</code></p></li><li><p>从机使能中断：<code>RangingSlaveResponseDone</code>和<code>RangingSlaveRequestDiscarded</code></p></li><li><p>调用<code>SetRangingRole</code>，分别配置主机和从机的测距角色</p></li><li><p>从机使用<code>SetRx</code>切换直接收模式，主机使用<code>SetTx</code>发送测距包</p></li><li><p><strong>测距的调制解调器会自动设置主从机在收发过程中Tx和Rx的切换</strong></p></li><li><p>测距结果仅能从主机读取，当主机生成<code>IRQ RangingMasterResultValid</code>时，在下列寄存器中读出结果</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240415153404796.png" alt="image-20240415153404796"></p></li><li><p>最后一次测距的RSSI结果存储在0x964寄存器内，8位寄存器。换算dBm步骤参见opcode一章中瞬时 RSSI 值小节。</p></li></ol><h3 id="结果滤波"><a href="#结果滤波" class="headerlink" title="结果滤波"></a>结果滤波</h3><p>SX1280模块提供一个基于RSSI过滤器，它会筛选掉RSSI小于阈值的测距结果，并将剩余结果取平均值输出。</p><ol><li>首先需要选择使用多少个测距结果做为样本。这需要配置寄存器 Ranging Filter Window Size （0x91E），该寄存器有8位，值限制位8-255，分别对应选择8-255个样本。</li><li>设置样本阈值，小于该阈值的样本将被丢弃。这需要配置寄存器RangingFilterRssiThresholdOffset(0x953)。该寄存器内默认值为0x24。</li><li>剩余的结果将求平均值后写入结果寄存器</li></ol><p>该滤波器可以在任何时候进行重置，通过将寄存器Reset Ranging Filter(0x923)写1即可。</p><h3 id="结果解算"><a href="#结果解算" class="headerlink" title="结果解算"></a>结果解算</h3><p>在读取结果寄存器时，需要配置RangingResMUX（0x924）寄存器的(5:4)bit，来选择寄存器输出原始结果还是RSSI滤波后结果。</p><ul><li>00：原始结果</li><li>01：滤波结果</li></ul><p>此2bit复位值是0x3,也就是读取之前必须写入一次，使之成为上面两个参数二选一。</p><p>读出的值可由如下公式换算成m</p><script type="math/tex; mode=display">Distance(m)=Result*150/(2^{12}*BW)</script><p>读取代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FREEZE_RANGING_RESULT 0x97F</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RANGING_RESULT_MUX 0x0924</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RANGING_RESULT_23_16 0x961</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RANGING_RESULT_15_8 0x962</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RANGING_RESULT_7_0 0x963</span></span><br><span class="line">SetStandby(STDBY_XOSC);<span class="comment">//第一步：切换为外部时钟</span></span><br><span class="line">WriteRegister(<span class="number">0x97F</span>,ReadRegister(<span class="number">0x97F</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">1</span>);<span class="comment">//使能LoRa存储模块时钟,通过对0x97F第二位写1。</span></span><br><span class="line">WriteRegister(<span class="number">0x0924</span>,(ReadRegister(<span class="number">0x0924</span>)&amp;<span class="number">0xCF</span>|((resultType)&amp;<span class="number">0x03</span>)&lt;&lt;<span class="number">4</span>));<span class="comment">//将0x0924内的值与1100,1111与。</span></span><br><span class="line"><span class="comment">//相当于将bit5 bit4设置为00,再将resultType变量内定义的值填入。设置读取的值类型。</span></span><br><span class="line">valLsb=((ReadRegister(<span class="number">0x0961</span>)&lt;&lt;<span class="number">16</span>)|(ReadRegister(<span class="number">0x0962</span>)&lt;&lt;<span class="number">8</span>|(ReadRegister(<span class="number">0x0963</span>)));<span class="comment">//读取Ranging Result</span></span><br><span class="line">SetStandby(STDBY_RC);</span><br></pre></td></tr></table></figure><h1 id="LoRa通信包和测距"><a href="#LoRa通信包和测距" class="headerlink" title="LoRa通信包和测距"></a>LoRa通信包和测距</h1><p><strong>在使用LoRa通信时，扩频因子（SF）和带宽（BW）必须在链路的发送侧和接收侧预已知，因为不同的扩频因子彼此正交</strong></p><p>使用LoRa调制解调时，灵敏度和速率如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120042818216.png" alt="image-20240120042818216"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240120042827446.png" alt="image-20240120042827446"></p><h2 id="LoRa-通信包格式"><a href="#LoRa-通信包格式" class="headerlink" title="LoRa 通信包格式"></a>LoRa 通信包格式</h2><p>LoRa调制有两种包格式，无论是哪种格式，preamble都是必须的。preamble用于接受信号的时钟同步，其基础长度为4.25个symbol （LoRa自动添加），冗余长度可在[8, 61444.25] 个符号编程。因此preamble的符号长度为[12.25, 61444.25]范围内。在<em>LoRa基础</em>一章中，已经介绍LoRa的包长度为$2^{SF}$，也就是下面两图的总symbol数是$2^{SF}$个。</p><p>两种格式如下：</p><ul><li><p>Explicit Header Mode（default）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240123175952581.png" alt="image-20240123175952581"></p><p>Explicit格式如图所示，相比于Implicit Header Mode，它多一个8个symbol长的header，其包含三部分：</p><ul><li>有效码字(payload) 长度</li><li>前向纠错码编码率</li><li>16bit-CRC是否使能</li></ul></li><li><p>Implicit Header Mode</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240123175412975.png" alt="image-20240123175412975"></p></li></ul><p>如果有效码字(payload)长度、前向纠错编码率、CRC使能状态已知，则可以省去header。此时有效码字(payload)长度、前向纠错编码率、CRC使能状态必须在通信链路双方进行手动预配置。</p><h2 id="LoRa测距包格式"><a href="#LoRa测距包格式" class="headerlink" title="LoRa测距包格式"></a>LoRa测距包格式</h2><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124010130578.png" alt="image-20240124010130578"></p><p>测距的包格式如上，其包含一个指定的测距Header，包含了测距指令+测距ID+2bit的CRC。Rangging symbols内包含测距同步信息和时钟同步信息。<strong>LoRa规定测距时SF的范围是[5, 10]，带宽BW范围是[400KHz, 1.6MHz].</strong></p><p>主机视角测距过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124010545561.png" alt="image-20240124010545561"></p><p>从机视角测距过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124010621166.png" alt="image-20240124010621166"></p><h2 id="测距引擎"><a href="#测距引擎" class="headerlink" title="测距引擎"></a>测距引擎</h2><h3 id="测距误差的来源"><a href="#测距误差的来源" class="headerlink" title="测距误差的来源"></a>测距误差的来源</h3><ul><li><p>主、从设备的时钟频率不一致</p></li><li><p>数字和模拟调制模块对信号产生了延迟，这种延迟需要手动补偿</p></li><li><p>多径效应</p></li></ul><p>针对以上误差，官方建议以交换主从设备，测好几遍来进行补偿。一个测两遍的补偿例子如下：</p><script type="math/tex; mode=display">  T_{Master-Slave}=2T_{ToF}-T_{ERROR}</script><script type="math/tex; mode=display">  T_{Slave-Master}=2T_{ToF}-T_{ERROR}</script><script type="math/tex; mode=display">  T_{RTToF}=\frac{T_{Master-Slave}+T_{Slave-Master}}{2}</script><p>官方给出了交换测距次数和测距误差的关系图( SF9 1600 kHz 条件下)</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124020804572.png" alt="image-20240124020804572" style="zoom:67%;" /></p><h3 id="距离分辨率"><a href="#距离分辨率" class="headerlink" title="距离分辨率"></a>距离分辨率</h3><p>LoRa的最小距离分辨率由如下公式计算得到：</p><script type="math/tex; mode=display">D_{LSB}=\frac{c}{2^{12}BW}</script><p>其中c是光速，BW是设置的带宽(与SF有关)</p><p>2倍测量距离（也就是飞行时间换算出的距离）和$D_{LSB}$可以由如下公式转换：</p><script type="math/tex; mode=display">D_{RTToF}=RangingRsult*D_{LSB}</script><h3 id="RxTx造成DELAY的补偿"><a href="#RxTx造成DELAY的补偿" class="headerlink" title="RxTx造成DELAY的补偿"></a>RxTx造成DELAY的补偿</h3><p>在初始测试时，需要在一段已知距离为D的空间内进行测距，来确定<strong>距离补偿误差</strong>。补偿误差可由如下公式计算：</p><script type="math/tex; mode=display">D_{uncalibrated}=((RangingResult * DLSB)/2)</script><script type="math/tex; mode=display">D_{calibration} = (D_{uncalibrated} - D) / 2</script><p>补偿时间可由如下公式进一步算得：</p><script type="math/tex; mode=display">Calibration = D_{calibration} / D_{LSB}</script><p>SEMTECH公司给出了一部分已知的Delay补偿值：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124014924763.png" alt="image-20240124014924763"></p><p><strong>在LoRa中，TxRx延迟的补偿是自动的，补偿值（Calibration）必须被写入RxTxDelay寄存器</strong></p><h3 id="时钟误差产生的测距误差的补偿"><a href="#时钟误差产生的测距误差的补偿" class="headerlink" title="时钟误差产生的测距误差的补偿"></a>时钟误差产生的测距误差的补偿</h3><p>LoRa在收发信号时，有一个频率误差指示器，由于射频信号的频率是参考各自的晶振频率产生的，因此可以使用LoRa频率误差指示器（FEI）对主设备和从设备之间的频率误差进行简单的频率误差测量，以准确评估定时误差和等效距离误差。其中官方给出的距离误差如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124015930104.png" alt="image-20240124015930104"></p><p>官方给出的BW和SF对测距精度的影响如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124020345728.png" alt="image-20240124020345728" style="zoom: 80%;" /></p><p>官方宣称在视线内，它具有和激光测距同等的精度。下图红色表示激光测距仪的误差范围。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124020611211.png" alt="image-20240124020611211" style="zoom: 67%;" /></p><h3 id="测距参数设计准则"><a href="#测距参数设计准则" class="headerlink" title="测距参数设计准则"></a>测距参数设计准则</h3><p>LoRa测距，SF和BW会影响广播时间(直接影响功耗)和测距距离，其关系图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124021355928.png" alt="image-20240124021355928"></p><p>可以看到SF影响测距距离，BW影响广播时间。当这俩个参数都最大时，测距可有最高精度。</p><h3 id="超短距离-lt-18-5m-的补偿"><a href="#超短距离-lt-18-5m-的补偿" class="headerlink" title="超短距离(&lt;18.5m)的补偿"></a>超短距离(&lt;18.5m)的补偿</h3><p>在小于18.5m时，LoRa测距会非常不精确，STMTECH给出了以下补偿公式：</p><script type="math/tex; mode=display">displayDistance = EXP( ( measuredDistance +2.4917 ) / 7.2262 ))</script><p>补偿效果图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124021812831.png" alt="image-20240124021812831"></p><h3 id="测距的计算："><a href="#测距的计算：" class="headerlink" title="测距的计算："></a>测距的计算：</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124022454968.png" alt="image-20240124022454968"></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124022730601.png" alt="image-20240124022730601"></p><p><strong>一个例子</strong>：配置测距参数如下，得到如下测距结果：</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124022121668.png"></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240124022331367.png"></center></td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> LoRa定位开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LoRa基础</title>
      <link href="/posts/4f0d2e64.html"/>
      <url>/posts/4f0d2e64.html</url>
      
        <content type="html"><![CDATA[<h1 id="LoRa的调制与扩频"><a href="#LoRa的调制与扩频" class="headerlink" title="LoRa的调制与扩频"></a>LoRa的调制与扩频</h1><p>由通信原理的知识知，在一个载波中，基带信息可以被承载在幅度、相位、和频率上。以2FSK调制为例，它使用两个不同频率的载波来分别表示不同的”0” 和 “1”。但是Chirp调制本身就进行了”扫频”, 那么如何来通过频率进行载波呢？由<em>扩频通信简介</em>一节中Chirp扩频知，Chirp频率是有个范围的，始于$f_0$，上下被$f_H,f_L$限制。<strong>LoRa将基带信息承载在这个$f_0$上面</strong>，也就是说，LoRa调制后Symbol的频率-时间图如下<strong>（LoRa采用线性Chirp）</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240117191531057.png" alt="image-20240117191531057"></p><p>信号在时域上振幅-时间图如下(这张图里面是down-chirp, 和上面那张up-chirp的图不是对应的关系)：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240117202641043.png" alt="image-20240117202641043"></p><p>论文[1]中作者把它称为：频移啁啾调制 Frequency Shift Chirp Modulation (FSCM) 大部分文章都是这么叫的，也有另外一些地方直接把这个称为PSK调制</p><h2 id="起始频率-f-0-的确定"><a href="#起始频率-f-0-的确定" class="headerlink" title="起始频率$f_0$的确定"></a>起始频率$f_0$的确定</h2><p><strong>LoRa的扩频因子SF不光决定了频率的展扩倍数，还决定了信道进制M</strong>(例如，8FSK的M=8，一个symbol包含$log_28=3$个bit)。M和SF的关系是：</p><script type="math/tex; mode=display">log_2M=SF</script><p>MFSK里，M为几就有几个不同的频率；对应地，LoRa里M为几就有几个不同的$f_0$。$M=2^{SF}$,也就是说，一个Chirp symbol 可以调进去SF个二进制位,共有$2^{SF}$种不同的$f_0$，我们把这一簇二级制数据记为一个向量<strong>w</strong>。举个例子，如果SF=4，那么一个Chirp symbol就有4个Bit，<strong>w</strong>就为</p><script type="math/tex; mode=display">w=[x,x,x,x]</script><p>其中x代表这一位可以是0也可以是1。那么第n个chirp symbol 承载的信息 $s(nT_s)$ 就可以用如下公式算得：</p><script type="math/tex; mode=display">s(nT_s)=\sum_{h=0}^{SF-1}w(nT_s)_h\cdot2^h</script><p><em>注意这个$w(nT_s)$是一个整体，下标h才代表取这个向量里面的第几个，这个$T_s$是符号持续时间，$nT_s$只是指这是第几个符号之后</em>。</p><p><strong>论文就是喜欢用弯弯绕绕的表达，这玩意其实就是把二进制序列换算成十进制了！</strong>，更详细地说，LoRa在调制的时候把二进制序列换算成了范围在$[0,2^{SF}-1]$的十进制，然后作为频率的偏移量调进载波里面。$s(nT_s)=\{0,1,2,3,4….,2^{SF}-1\}$</p><h2 id="调入载波"><a href="#调入载波" class="headerlink" title="调入载波"></a>调入载波</h2><p>现在，我们要把这个十进制数用成一个起始频率来表示。LoRa的码元持续时间$T_s$被规定成$T_s=\frac{2^{SF}}{Bandwidth}$，把这个$T_s$ 以B为采样频率离散化一下:</p><script type="math/tex; mode=display">T=\frac{1}{B}, T_s=2^{SF}\cdot T</script><p>同时再来个离散化的时间轴$k=0,1,2…2^{SF}-1$</p><p>那么频率相较于$f_L$的偏移量就可以通过$(s(nT_s)+k)\ mod\ 2^{SF}$算出来，这里巧妙的利用取余计算实现了频率顶到$f_H$又返回$f_L$的操作。整体的调后信号就可以被表示为：</p><script type="math/tex; mode=display">c(nT_s+kT)=\frac{1}{\sqrt{2^{SF}}}e^{j2\pi[(s(nT_s)+k)mod2^{SF}]\frac{k}{2^{SF}}}</script><h2 id="LoRa的规定："><a href="#LoRa的规定：" class="headerlink" title="LoRa的规定："></a>LoRa的规定：</h2><ul><li><p>扩频因子： LoRa规定SF必须在[7,12]之内</p></li><li><p>码元持续时间：规定$T_s=\frac{2^{SF}}{Bandwidth}$</p><p>通过码元持续时间可以计算符号速率$R_s=\frac{BW}{2^{SF}}$</p></li><li><p>LoRa支持冗余纠错，SEMTECH定义了一个$Rate Code=\frac{4}{4+CR}$,其中CR={1,2,3,4}</p><p>在rate code已知时，bit传输速率使用这个公式计算：</p><script type="math/tex; mode=display">R_b=SF*\frac{Rate Code}{\frac{2^{SF}}{BW}}</script></li></ul><h1 id="LoRa的解调"><a href="#LoRa的解调" class="headerlink" title="LoRa的解调"></a>LoRa的解调</h1><p>我们已知，LoRa调后的信号长这样：</p><script type="math/tex; mode=display">c(nT_s+kT)=\frac{1}{\sqrt{2^{SF}}}e^{j2\pi[(s(nT_s)+k)mod2^{SF}]\frac{k}{2^{SF}}}</script><p>这个信号可以看做是一个chirp信号被移动了一下初始相位，我们可以把它补偿回来以此来分离出chirp信号</p><script type="math/tex; mode=display">c(nT_s+kT)=\frac{1}{\sqrt{2^{SF}}}e^{j2\pi[(s(nT_s)+k)mod2^{SF}+k-k]\frac{k}{2^{SF}}}</script><p>这里$+k-k$并不影响函数结果，但是我们却可以分离出一个$+k$出来</p><script type="math/tex; mode=display">c(nT_s+kT)=\frac{1}{\sqrt{2^{SF}}}(e^{j2\pi \frac{k^2}{2^{SF}}})e^{j2\pi[(s(nT_s)+k)mod2^{SF}-k]\frac{k}{2^{SF}}}</script><p>在$(s(nT_s)+k)mod2^{SF}-k$中，这个取模运算是为了处理$(s(nT_s)+k)$超过了$f_H$的情况而使用的。但是这里整个时间尺度被-k之后，控制频率的分量将永远在$s(nT_s)$的范围内，不会超过$2^{SF}$,因此无需再取模计算。去掉mod画简后式子如下：</p><script type="math/tex; mode=display">c(nT_s+kT)=\frac{1}{\sqrt{2^{SF}}}(e^{j2\pi \frac{k^2}{2^{SF}}})e^{j2\pi[(s(nT_s)]\frac{k}{2^{SF}}}</script><p>此时，基础chirp信号被分离出来了。在这个例子中这里这是一个up chirp信号。只需要将现在的接收信号乘上它自己的基础chirp信号的共轭$e^{-j2\pi \frac{k^2}{2^{SF}}}$，就可以把这个chirp信号消除掉。up chirp的共轭恰好为down chirp, down chirp的共轭为up chirp。消除后信号为：</p><script type="math/tex; mode=display">c(nT_s+kT)=\frac{1}{\sqrt{2^{SF}}}e^{j2\pi[(s(nT_s)]\frac{k}{2^{SF}}}</script><p>此时接收信号的频率只与我们调入的信息$s(nT_s)$相关了，对这个函数进行FFT，然后寻找FFT结果的峰值位置，即可解调出$s(nT_s)$内包含的信息。</p><p>因此，LoRa的解调只需要将收到的信号与其基础chirp信号的共轭相干，就可以分离出调入了信息的信号。</p><div class="note warning simple"><p>LoRa的调制和解调详细过程是SEMTECH闭源的，<strong>但是可以确定的是SF确实直接对应一个symbol能调几个bit，以及LoRa采用初始频率的shift去调制</strong>。其他的细节仅摘自论文，里面有很多只能看个大概的地方，就比如那个论文[1]里提及讲Ts离散化的时候，间隔时间T=1/B，这是不符合奈奎斯特采样定律的。看个大概就好……</p></div><h1 id="LoRa的时钟同步"><a href="#LoRa的时钟同步" class="headerlink" title="LoRa的时钟同步"></a>LoRa的时钟同步</h1><p>LoRa的时钟同步原理官方并未披露，现有的各种文章各执一词，但是大体都是前面有一段Preamble发送标准的up-chirp信号来进行同步。下图是对LoRa的信号进行捕获得到的。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240118000915052.png" alt="image-20240118000915052"></p><h1 id="emmmm"><a href="#emmmm" class="headerlink" title="emmmm"></a>emmmm</h1><p>研究了几十个小时，啃了十来篇文章，LoRa有太多东西是SEMTECH闭源的了，每个文章都是点逆向工程又讲得不明不白的。下面[3]这个youtube视频算是所有不明不白的文章的一个核心思想吧，但是每篇文章细节是有差异的。</p><p>搞了这么多，只想说好奇心害死猫，这玩意只能别人告诉你怎么用你就怎么用就行了╮(╯﹏╰）╭</p><p>所以说，有些东西没人搞，那必然是有没人搞的理由吧哎……活该干不过NB-IOT</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li>[1] L. Vangelista, “Frequency Shift Chirp Modulation: The LoRa Modulation,” in IEEE Signal Processing Letters, vol. 24, no. 12, pp. 1818-1821, Dec. 2017, doi: 10.1109/LSP.2017.2762960.</li><li>[2]  <a href="http://wiki.lahoud.fr/lib/exe/fetch.php?media=an1200.22.pdf">AN1200_22_Semtech_LoRa_Basics_v2_STD (lahoud.fr)</a></li><li>[3] <a href="https://www.youtube.com/watch?v=jHWepP1ZWTk">How LoRa Modulation really works - long range communication using chirps - YouTube</a></li><li>[4] H. Mroue, A. Nasser, B. Parrein, S. Hamrioui, E. Mona-Cruz and G. Rouyer, “Analytical and Simulation study for LoRa Modulation,” 2018 25th International Conference on Telecommunications (ICT), Saint-Malo, France, 2018, pp. 655-659, doi: 10.1109/ICT.2018.8464879.</li><li>[5] <a href="https://cea.hal.science/cea-02280910v2/document">Low Complexity LoRa Frame Synchronization for Ultra-Low Power Software-Defined Radios (hal.science)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> LoRa定位开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -频带通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩频通信简介</title>
      <link href="/posts/76361032.html"/>
      <url>/posts/76361032.html</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p>本篇文章涉及通信原理知识，需要掌握一定通信原理基础，了解基带调制，频带调制，相干解调，码元(符号)传输速率，Power Spectrum Density 等</p></div><p><strong>有三种基本的扩频方式：</strong></p><ul><li>跳频扩频(Frequency-hopping speread spectrum)</li><li>直接序列扩频(Direct-sequence spread spectrum)</li><li>啁啾扩频/线性调频扩频(Chirp Spread Spectrum)</li></ul><h1 id="跳频技术-FHSS"><a href="#跳频技术-FHSS" class="headerlink" title="跳频技术(FHSS)"></a>跳频技术(FHSS)</h1><p>传统的无线通信系统，发射机和接收机工作在单次通信过程中，载频一般是保持不变；例如通信频率是900MHz, 那么通信将一直使用这个频率进行。</p><p>跳频（Frequency Hopping)系统则在单次通信中，载频在多个频率上跳变。如901MHz, 902MHz etc.</p><h2 id="跳频系统的调制与解调"><a href="#跳频系统的调制与解调" class="headerlink" title="跳频系统的调制与解调"></a>跳频系统的调制与解调</h2><p>跳频的调制发生在频带调制之前。如下图所示，原始数据D(t)经过信息调制器后变成基带信号；同时产生一个伪随机序列来控制载波信号按照一定的规律跳变。接收端需要使用产生本振信号(local oscillator)进行相干，产生一个中频信号，中频信号再进行检波/解调。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114232032360.png" alt="image-20240114232032360"></p><p>伪随机序列控制下的载波频率如下图所示，在不同频段间跳跃，这个图被称为跳频图案，通信双方可根据实时参数及密钥推算得到当前跳频图案</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114233026923.png" alt="image-20240114233026923" style="zoom:50%;" /></p><p>对于产生跳频，有如下要求：</p><ul><li>(同一跳频图案具有良好的自相关性(类似冲激函数)</li><li>不同跳频图案具有良好的互相关性(相关值趋近于0</li><li>跳频图案具有良好的随机性，足够大的线性复杂度(抗截获和抗破译)</li><li>周期长和图案多(减小系统中各用户间的频点碰撞概率</li></ul><p>跳频可以分为快跳频和慢跳频：</p><ul><li><p><strong>快跳频</strong>：跳频周期小于符号周期(是Ts的约数)，一个符号传输需要多个频率</p></li><li><p><strong>慢跳频</strong>：跳频周期大于符号周期(是Ts的倍数)，一个频率传输多个符号</p></li></ul><p><strong>跳频通信可以带来很强的抗干扰能力的原因：</strong></p><ul><li>在同一时刻，干扰信号频率只有与跳频信号所在<strong>频率相同</strong>，且干扰信号能量足够大时，才能造成严重的影响</li><li>由于跳频图案具有<strong>伪随机性，其周期可长达数十年甚至更长</strong>，跳变的频率可达成千上万个，因此可以有效地躲避干扰。因此除非破译跳频图案，否则仅在某一频率或<strong>某几个频率上长时间施放干扰是无济于事的</strong>。而在整个频段长时间施放干扰难度很大</li></ul><h2 id="多址通信"><a href="#多址通信" class="headerlink" title="多址通信"></a>多址通信</h2><p> 多址技术是指把处于不同地点的多个用户接入一个公共传输媒质，实现各用户之间通信的技术。</p><p>例如，常见的多址技术有频分多址（<a href="https://baike.baidu.com/item/FDMA?fromModule=lemma_inlink">FDMA</a>）、时分多址（<a href="https://baike.baidu.com/item/TDMA?fromModule=lemma_inlink">TDMA</a>）、码分多址（<a href="https://baike.baidu.com/item/CDMA?fromModule=lemma_inlink">CDMA</a>）。</p><ul><li>FDMA：不同用户使用不同的频率</li><li>TDMA：不同用户发送时刻不同，以不同时隙实现通信</li><li>CDMA：以不同的代码序列来实现通信，码分多址的基本思想是靠不同的地址码来区分的地址。每个配有不同的地址码，用户所发射的载波既受基带数字信号调制，又受地址码调制。</li></ul><p><strong>跳频技术可以实现跳频多址：</strong>不同的用户使用不同的跳频图案，这样可以实现共享频段资源进行通信。下图就是不同用户以不同图案通信时的跳频图案。跳频有一定几率碰撞(两个发射器使用了同一个频率)，就是下图绿色的点点。通过对伪随机码进行设计，可以把跳频碰撞的概率控制得很小。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114234609263.png" alt="image-20240114234609263" style="zoom:80%;" /></p><hr><h1 id="直接序列扩频-（DSSS）"><a href="#直接序列扩频-（DSSS）" class="headerlink" title="直接序列扩频 （DSSS）"></a>直接序列扩频 （DSSS）</h1><h2 id="DSSS信号的调制与解调"><a href="#DSSS信号的调制与解调" class="headerlink" title="DSSS信号的调制与解调"></a>DSSS信号的调制与解调</h2><p>直接序列扩频使用扩频码(又称扩频序列、PN序列)，直接对基带信号进行频域扩宽。如下图就是一个对Bipolar NRZ信号扩频调制的例子。绿色的是频率更高的扩频码，由扩频序列产生器产生。将基带信号与扩频码相异或，即可得到扩频信号。解调时，在本振信号相干得到中频信号后，再使用同样的扩频信号相干（这个过程称为解扩），即可恢复基带信号。</p><p><table>    <tr>        <td><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114235653121.png"></td>        <td><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114235840911.png"></td>    </tr></table><br>扩频的时域、频域对应图像如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240117192815452.png" alt="image-20240117192815452"></p><p>一个完整的扩频、解扩过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240115000300778.png" alt="image-20240115000300778"></p><h2 id="扩频增益-扩频因子-Spreading-Factor"><a href="#扩频增益-扩频因子-Spreading-Factor" class="headerlink" title="扩频增益/扩频因子  Spreading Factor"></a>扩频增益/扩频因子  Spreading Factor</h2><p>下列定义式中，Rc为直扩码速率；Rb为信息码速率。T是其对应单的持续时间（$T=1/f$）。</p><script type="math/tex; mode=display">G=10lg(\frac{扩频后的信号频率}{原始信号频率})=10lg(\frac{R_C}{R_b})=10lg(\frac{T_b}{T_C})</script><p><strong>G就是扩频增益。Rc/Rb即为扩频因子也称扩频码长度、带宽扩展因子</strong></p><p>例如，原始信号频率为1MHz，扩频后为128MHz，则扩频因子$SF=128$ <em>(<strong>部分地方直接认为扩频因子就是增益G</strong>，其实就是是否取对数的区别)</em></p><p>一般来说，扩频序列越长，扩频倍数越大，扩频增益越大</p><h2 id="直扩信号优点和及其原理"><a href="#直扩信号优点和及其原理" class="headerlink" title="直扩信号优点和及其原理"></a>直扩信号优点和及其原理</h2><h3 id="直扩通信抗窄带干扰的原理"><a href="#直扩通信抗窄带干扰的原理" class="headerlink" title="直扩通信抗窄带干扰的原理"></a>直扩通信抗窄带干扰的原理</h3><ul><li><p>一个原始的窄带信号，在经历扩频序列扩频之后，其能量不变(频域面积不变)，而频域展宽。</p></li><li><p>在传输时叠加了窄带噪声信号（例如来自其他通信系统的通信信号）</p></li><li>解调时再次用扩频码相干，延展频域扩频信号的恢复成窄带信号，而对叠加的窄带噪声信号，则是进行了一个扩频的过程。</li><li>在经历Bandpass filter的时候，噪声信号大部分功率可被滤除掉</li></ul><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/1705249284302.jpg" alt="1705249284302" style="zoom:50%;" /></p><h3 id="直扩通信抗多径效应的原理"><a href="#直扩通信抗多径效应的原理" class="headerlink" title="直扩通信抗多径效应的原理"></a>直扩通信抗多径效应的原理</h3><p>受多径效应影响，接受到的信号由多个不同时延和相位的原始信号构成（来自不同传输路径）</p><ul><li>在单一解扩支路的情况下，通过调整解扩码的同步，可以只解扩振幅最强的一路信号，其他路径的信号在通过滤波器时就会被滤除</li><li>在多个解扩支路的情况下，接收端解扩码分别和来自不同路径的信号对齐，将其解扩分离。最后再将解扩出的多路信号相位时延对齐后叠加，恢复原始信号。</li></ul><h3 id="直扩信号抗劫获的原理"><a href="#直扩信号抗劫获的原理" class="headerlink" title="直扩信号抗劫获的原理"></a>直扩信号抗劫获的原理</h3><p>直扩信号频带很宽，功率谱密度很低。如果在接收机输入端，直扩信号的功率谱密度低于或与接收机热噪声功率谱密度相当，则接收机一般发现不了直扩信号(隐藏在噪声中)。</p><h3 id="直扩信号的保密性"><a href="#直扩信号的保密性" class="headerlink" title="直扩信号的保密性"></a>直扩信号的保密性</h3><p>接收端只有采用与发射端相同且同步的扩频序列，才能实现对直扩信号的解扩，恢复出发送信号而扩频序列具有随机特性，破译难度大直接序列扩频技术首先应用于军事通信</p><h2 id="直接序列扩频下的码分多址"><a href="#直接序列扩频下的码分多址" class="headerlink" title="直接序列扩频下的码分多址"></a>直接序列扩频下的码分多址</h2><p>不同用户采用不同的扩频序列，<strong>而这个扩频序列恰好就充当了码分多址里面地址码的作用。对某一个用户来说，他的接收机只能解扩对应扩频序列的信号，而其他用户的信号因为扩频序列不同，无法解扩，类似噪声。</strong>所以虽然看起来直扩通信每个用户看似占用频率很宽，但由于是共享不是独享，所以频谱利用率也很高的</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240115004032089.png" alt="image-20240115004032089"></p><h2 id="扩频序列（扩频码）"><a href="#扩频序列（扩频码）" class="headerlink" title="扩频序列（扩频码）"></a>扩频序列（扩频码）</h2><p>由前面介绍的直扩信号可以看出，我们希望扩频序列：</p><ul><li>近似于随机信号有良好的自相关特性（可有效提取自身信号），很小的互相关特性（不同扩频序列间干扰小）</li><li>有尽可能多的码(序列个数，就是不重复的码长度)<br>下面是常见的扩频序列</li></ul><h3 id="m序列"><a href="#m序列" class="headerlink" title="m序列"></a>m序列</h3><p>m序列又称<strong>最长线性反馈移位寄存器序列</strong>，它是由<strong>多级移位寄存器</strong>通过线性反馈(就是下图这些摩尔加的抽头)产生的最长的码序列</p><p><strong>对于n级的移位寄存器发生器所能产生的最大长度的码序列为$2^n -1$位</strong>（没有全0状态，因为一旦去了全0状态就无法游动到其他状态）</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240115005914227.png" alt="image-20240115005914227"></p><p><strong>不同初始状态的移位寄存器，只会产生不同相位的扩频序列，无法产生不同的扩频序列；不同的扩频序列需要通过改变抽头结构来产生。</strong>而且并不是所有抽头组合都能产生m序列，只有特殊的组合才可以。</p><p><strong>m序列有良好的自相关性，较小的互相关性的优点</strong></p><p>对于n位的m序列，它能产生的序列个数可由如下公式计算：(其中$\Phi$是欧拉数)</p><script type="math/tex; mode=display">\frac{\Phi(2^n-1)}{n}</script><p>计算可以发现，5级移位寄存器产生的$2^5 -1=31$位长度的m序列，只有6个。</p><p>因此，<strong>m序列具有数量较少的缺点</strong></p><center><strong>总结：m序列，优点：有良好的自相关性，较小的互相关性；缺点：m序列具有数量较少的缺点</strong></center><h3 id="M序列"><a href="#M序列" class="headerlink" title="M序列"></a>M序列</h3><p>m序列又称<strong>最长非线性反馈移位寄存器序列</strong>。M序列在m序列的基础上，加入了全0状态检测器，使其离开全0状态。</p><p>对于n个移位寄存器，可以产生$2^n$位的M序列</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240115011351277.png" alt="image-20240115011351277"></p><p>n级M序列的个数可以用如下公式来计算</p><script type="math/tex; mode=display">2^{2^{n-1}-n}</script><p>在同为5级的时候，M序列可以产生2048个。<strong>因此M序列序列数量远大于m序列，但M序列的自相关性和互相关性又不如m序列</strong></p><h3 id="Gold序列"><a href="#Gold序列" class="headerlink" title="Gold序列"></a>Gold序列</h3><p>Gold序列将两个m序列作为优选对，把两个m序列的输出结果进行摩尔加。</p><p><strong>它具有良好的自相关性，不明显的互相关性，构造简单</strong>因此获得广泛应用</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240115011757069.png" alt="image-20240115011757069"></p><hr><h1 id="啁啾扩频-线性调频扩频-CSS"><a href="#啁啾扩频-线性调频扩频-CSS" class="headerlink" title="啁啾扩频/线性调频扩频(CSS)"></a>啁啾扩频/线性调频扩频(CSS)</h1><h2 id="啁啾-zh-overline-ou-ji-overline-u"><a href="#啁啾-zh-overline-ou-ji-overline-u" class="headerlink" title="啁啾($zh\overline ou ji\overline u$)"></a>啁啾($zh\overline ou ji\overline u$)</h2><p>啁啾是频率随时间增加（up-chirp）或减少（down-chirp）的信号，其基本定义式如下：</p><script type="math/tex; mode=display">x(t)=sin(\phi(t))</script><p>可以看到啁啾使用相位的移动来控制震荡频率，其相位是一个与 $t$ 有关的函数。在这个表达式下，瞬时角频率 $\omega$ 也就成了$\phi$ 的变化速率，即对$\phi(t)$求导。</p><script type="math/tex; mode=display">\omega(t)=\frac{d\phi(t)}{dt}</script><p>再根据 $\omega$ 和 $f$ 的关系，可以写出频率表达式：</p><script type="math/tex; mode=display">f(t)=\frac{\omega(t)}{2\pi}</script><p>类似于“角加速度”的概念，定义一个瞬时角啁啾系数(instantaneous angular chirpyness) $\gamma(t)$，单位：$rad/s^2$</p><script type="math/tex; mode=display">\gamma(t)=\frac{d^2\phi(t)}{dt}=\frac{d\omega(t)}{dt}</script><p>instantaneous angular chirpyness 定义的是瞬时角频率的变化率，将角频率转化为频率，就得到的 instantaneous ordinary chirpyness $c(t)$ (定义为瞬时频率的变化率)</p><script type="math/tex; mode=display">c(t)=\frac{\gamma(t)}{2\pi}=\frac{df(t)}{2\pi}</script><h3 id="线性啁啾"><a href="#线性啁啾" class="headerlink" title="线性啁啾"></a>线性啁啾</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240116114246398.png" alt="image-20240116114246398"></p><p>线性啁啾是指的瞬时频率$f(t)$随时间呈线性变化，下式中c是啁啾率(chirp rate)，是一个常数，表达式为$c=\frac{f_1-f_0}{T}=\frac{\Delta f}{\Delta t}$</p><script type="math/tex; mode=display">f(t)=ct+f_0</script><p>转化成基本定义式中的相位的表达形式:</p><script type="math/tex; mode=display">\phi(t)=\phi_0+2\pi\int_0^tf(\tau)d\tau=\phi_0+2\pi(\frac{c}{2}t^2+f_0t)</script><p>其中$\phi_0$表示初始相位</p><h3 id="指数啁啾"><a href="#指数啁啾" class="headerlink" title="指数啁啾"></a>指数啁啾</h3><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240116120520930.png" alt="image-20240116120520930"></p><p>指数啁啾的定义为：</p><script type="math/tex; mode=display">f(t)=f_0k^{\frac{t}{T}}</script><p>它具有如果$t_1$和$t_2$间时间间隔$T=t_2-t_1$是常数，$f_2(t)/f_1(t)$也是常数的性质。</p><p>相位表达式如下：</p><script type="math/tex; mode=display">\phi(t)=\phi_0+2\pi\int_0^tf(\tau)d\tau=\phi_0+2\pi f_0(\frac{k^{\frac{t}{T}}-1}{ln(k)})</script><h3 id="双曲啁啾"><a href="#双曲啁啾" class="headerlink" title="双曲啁啾"></a>双曲啁啾</h3><p>双曲啁啾定义为：</p><script type="math/tex; mode=display">f(t)=\frac{f_0f_1T}{(f_0-f_1)t+f_1T}</script><p>其相位表达式为：</p><script type="math/tex; mode=display">\phi(t)=\phi_0+2\pi\int_0^tf(\tau)d\tau=\phi_0+2\pi \frac{-f_0f_1T}{f_1-f_0}ln(1-\frac{f_1-f_0}{f_1T}t)</script><p>除此之外，还有对数啁啾，二次(^2)啁啾等，都是指的其频率的变化呈现对数、二次的关系。</p><h2 id="啁啾扩频"><a href="#啁啾扩频" class="headerlink" title="啁啾扩频"></a>啁啾扩频</h2><p>由上方啁啾信号得知，啁啾信号频率随时间变化，也就是说，在频域来看，这个信号自带“扫频/扩频” 的特性。</p><p><strong>如果说使用这个信号来作为载波，调制信号，那么这么信号的带宽也就被扩宽了。这就是啁啾扩频的原理。</strong>啁啾扩频利用了其频率在整个带宽上线性变化的正弦脉冲信号来传输信息，因此不需要任何伪随机序列。</p><p>举个例子，下图这个调制模块（802.15.4a中定义的超带宽UWB调制，Chirp-UWB）：二进制信号先转化为差分信号后进行QPSK调制，再对QPSK信号进行进行啁啾调制来扩频得到QCSK信号。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240116124709497.png" alt="image-20240116124709497"></p><p>在这个例子中，调后的一个啁啾符号（Chirp Symbol）由4个啁啾脉冲（subchirp）构成，每个啁啾脉冲又可以携带一个QPSK信号。从而一个啁啾符号可以携带4个QPSK码字。</p><p>由于不能让这个啁啾信号占用无限的带宽，所以会对这个啁啾载频规定一个频率上限$f_H$和一个频率下限$f_L$，以up-chirp为例，它由起始频率$f_0$开始，随时间攀升，如果在自身持续周期内超过了$f_H$，那它将回到$f_L$,再继续爬升如下图所示(下图横坐标为时间$t$,纵坐标为频率$f$)。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240117184131604.png" alt="image-20240117184131604"></p><hr><center> ---CHAPTER END--- </center>]]></content>
      
      
      <categories>
          
          <category> LoRa定位开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 频带通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Part1-CH3-数字电路的化简</title>
      <link href="/posts/37477dca.html"/>
      <url>/posts/37477dca.html</url>
      
        <content type="html"><![CDATA[<h1 id="最小化策略"><a href="#最小化策略" class="headerlink" title="最小化策略"></a>最小化策略</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>包含名词：</strong></p><ul><li><p><strong>Literal:</strong> 字符，也就是有几个输入变量</p></li><li><p><strong>Implicant:</strong> 蕴含项，输入变量的不同组合,也就是卡诺图里面的圈，一个圈就是一种蕴含项。</p></li><li><p><strong>Prime implicant:</strong> 质蕴含项就是不能与其它蕴含项合并的蕴含项, 也就是，这个卡诺图的圈无法被更大的圈包裹.</p></li><li><p><strong>Cover:</strong> cover是不同implicant的组合，就是不同卡诺图的圈组合成的完整的表达式。</p></li><li><p><strong>Cost:</strong> 电路中所有 门的数量 + 门的输入信号的数量</p></li><li><p><strong>Essential prime implicant:</strong>  若函数的一个质蕴涵项包含有不被函数的其他任何质蕴涵项所包含的最小项，则此质蕴涵项被称为必要质蕴涵项。</p></li></ul><p><em>举个例子：</em></p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114192019432.png" alt="image-20240114192019432"  /></p><p>$\overline x_2  x_3$就是一个essential prime implicant, 因为$m_{11}$没有被其他任何质蕴涵项包含。同理还有$x_3 \overline x_4$ 和$x_2 \overline x_3 x_4$.<br>在最少的cost的布尔方程里面，必要质蕴涵项是必须被包含的。写出必要质蕴涵项之后，发现$m_7$还没有被包含到。$m_7$可以被$\overline x_1  x_3$或者$\overline x_1  x_2 x_4$包含，取其最小成本$\overline x_1 x_3$,所以这个布尔函数最小cost是：</p><script type="math/tex; mode=display">f=\overline x_2  x_3 + x_3 \overline x_4+x_2 \overline x_3 x_4+\overline x_1 x_3</script><p><strong><em>因此，寻找最小cost电路的步骤是：</em></strong></p><ol><li><strong>写出$f$的所有质蕴含项*</strong></li><li><strong><em>找到所有必要质蕴涵项</em></strong></li><li><strong><em>如果必要质蕴含项就包含了函数的所有1状态，那这就是最小cost，如果没有，则需要添加cost最小的非必要质蕴涵项来覆盖所有1状态</em></strong></li></ol><hr><h1 id="多输出电路（Multiple-Output-circuits）"><a href="#多输出电路（Multiple-Output-circuits）" class="headerlink" title="多输出电路（Multiple-Output circuits）"></a><em>多输出电路（Multiple-Output circuits）</em></h1><p>在具有多个输出的电路中，让电路共享一些逻辑门可以有效减少cost</p><p>这要求在卡诺图化简中<strong>并不一定按照质蕴涵项去画圈，而是查看更多蕴含项，寻找相同的蕴含项</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114193447675.png" alt="image-20240114193447675"></p><p>如上图就有两个蕴含项可以被共享。CAD工具将会自动执行这个共享的过程。在人工设计（考试）的时候，多输出电路也可以通过尽量圈出可以共享的圈圈来减少cost</p><hr><h1 id="多级综合（Multilevel-Synthesis）—不考"><a href="#多级综合（Multilevel-Synthesis）—不考" class="headerlink" title="多级综合（Multilevel Synthesis）—不考"></a><em>多级综合（Multilevel Synthesis）—不考</em></h1><ul><li><p><strong>Fan-in (扇入):</strong> 一个逻辑门输入的数量</p></li><li><p><strong>Fan-out(扇出):</strong> 是指该模块直接调用的下级模块的个数。也就是一个逻辑门的输出连了几个下一级门。</p></li></ul><p>通常来说，使用CMOS制造的芯片存在扇入限制。通常希望AND门扇入小于5。可以使用分配率，把一层极的计算化成多个层级。下图就是两个例子</p><table>    <tr>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114193819266.png"/></center></td>        <td><center><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114193752663.png"/></center></td>    </tr></table><hr><h1 id="立体表示法（Cubical-Representation）"><a href="#立体表示法（Cubical-Representation）" class="headerlink" title="立体表示法（Cubical Representation）"></a><em>立体表示法（Cubical Representation）</em></h1><p>卡诺图能表示的函数大小受到限制，为了处理更大的函数，需要使用立方体表示。</p><h2 id="构造立方体"><a href="#构造立方体" class="headerlink" title="构造立方体"></a>构造立方体</h2><p>有几个变量，就需要构造一个几维的立方体。立方体的顶点代表不同变量组合，立方体的边必须是含有一个x的组合，x代表0或者1。而面是含有两个x的组合。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114194225368.png" alt="image-20240114194225368"></p><p><em>以这个三维的cube为例，</em>首先标注顶点，000为顶点开始的三条边（三个变量所以三条边，x在三条边上换3个位置）需要分别为00x,0x0,x00,这三条边连接的另一个顶点将会是001,010,100（也就是x取和000相反的情况）。然后将新的顶点以同样的规则向外延伸，直至构成立方体。</p><h2 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h2><p>$f={000,010,100,101,110}$,将函数表达出来，并在顶点处标注出来。上图中的顶点围成了一个面和一条线，这个面是xx0，这条线是10x,所以这个函数可以被化简成</p><script type="math/tex; mode=display">f=\overline x_3 +x_1x_2</script><h2 id="四维立方体："><a href="#四维立方体：" class="headerlink" title="四维立方体："></a>四维立方体：</h2><p>四维立方体可以画成在一个大立方体内囊括了一个小立方体。这样每个顶点都有4条支路，可以安装上面的方法标注顶点了。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114194642317.png" alt="image-20240114194642317"></p><hr><h1 id="表格法化简（Quine-McCluskey-法）"><a href="#表格法化简（Quine-McCluskey-法）" class="headerlink" title="表格法化简（Quine-McCluskey 法）"></a><strong>表格法化简（Quine-McCluskey 法）</strong></h1><h3 id="Step1-–-计算质蕴涵项"><a href="#Step1-–-计算质蕴涵项" class="headerlink" title="Step1 – 计算质蕴涵项"></a>Step1 – 计算质蕴涵项</h3><ol><li>首先，把minterm表达式的项按只含0个“1”，只含1个“1”，只含2个“1”，…，只含n个“1”（n为变量个数）划分为不同的Group，并按“1”的数量排列（升序或降序均可）成表</li><li>准备一张新表。从含有最少数量的“1”的Group开始依次向下，将当前Group中的每一项与下一个Group的每一项比较。若两者只有一个变量不同，则将两项提取出来，并将不同的变量处用x标记，生成一个新的项。如果新的项在新表中已存在，则不执行动作；若不存在，则将这个新的项放到新表中的相应Group中。最后，在原表的两个Group中将提取的两项对应的“Subcube Covered”打上标记（打√）</li><li>在新生成的表中，重复2，直到新表中不存在只有一个变量不同的项为止</li><li><strong>所有未被打√的项，就是质蕴涵项。</strong></li></ol><p>例如：$f_{(x_1,…x_4)}=\sum m(0,4,8,10,11,12,13,15)$</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114195340907.png" alt="image-20240114195340907"></p><p>所以这个表达式的质蕴涵项就是</p><script type="math/tex; mode=display">P={10x0,101x,110x,1x11,11x1,xx00}</script><h3 id="Step2-–-找到必要质蕴含项"><a href="#Step2-–-找到必要质蕴含项" class="headerlink" title="Step2 – 找到必要质蕴含项"></a>Step2 – 找到必要质蕴含项</h3><p>把step1中找到的质蕴涵项列成表,如下图。发现0和4只有xx00表达了，所以xx00是必要质蕴涵项。把$P_6$挑出来</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114195622722.png" alt="image-20240114195622722"></p><h3 id="Step3-–-找到最小成本非必要质蕴涵项"><a href="#Step3-–-找到最小成本非必要质蕴涵项" class="headerlink" title="Step3 – 找到最小成本非必要质蕴涵项"></a>Step3 – 找到最小成本非必要质蕴涵项</h3><p>移除p6和被p6表达的0,4,8,12(被挑走了)，得到下表</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114195726090.png" alt="image-20240114195726090"></p><p>可以看到p1和p2的cost是相同的（他们都只有一个x），但是p1只能表述10, p2可以表述10，11，因此称p2支配 (dominates) p1。因此在这里选择p2。同理，可以选择p5。可以看到p4已经被p2和p5表达，因此这是不必要的。</p><p><img src="https://cdn.jsdelivr.net/gh/kaysonz/BlogPicHost/imgs/image-20240114195754979.png" alt="image-20240114195754979"></p><h3 id="Step4-–-完成化简"><a href="#Step4-–-完成化简" class="headerlink" title="Step4 – 完成化简"></a>Step4 – 完成化简</h3><p>取step2的必要质蕴含项，step3选取的之蕴含项，<br>所以，化简后：$C={p_2,p_5,p_6 },f=x_1\overline x_2 x_3+x_1 x_2 x_4+\overline x_1 \overline x_3$</p><hr><center> ---CHAPTER END--- </center>]]></content>
      
      
      <categories>
          
          <category> 大三上 </category>
          
          <category> 数字电路设计与可靠性工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
